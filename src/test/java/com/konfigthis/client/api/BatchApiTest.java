/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BatchGenerateLinkRequest;
import com.konfigthis.client.model.BatchGenerateLinkResponse;
import com.konfigthis.client.model.BatchGetBatchStatusesResponse;
import com.konfigthis.client.model.BatchGetErrorFilesResponse;
import com.konfigthis.client.model.BatchResponse;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BatchApi
 */
@Disabled
public class BatchApiTest {

    private static BatchApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BatchApi(apiClient);
    }

    /**
     * Generate batch link
     *
     * Returns a URL to which the batch file must be uploaded.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-bulk-payment-links). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateLinkTest() throws ApiException {
        String filename = null;
        String entityId = null;
        String notificationUrl = null;
        BatchGenerateLinkResponse response = api.generateLink(filename, entityId)
                .notificationUrl(notificationUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all batch statuses
     *
     * Query all batch statuses of a batch for a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchStatusesTest() throws ApiException {
        String entityId = null;
        Double offset = null;
        Double perPage = null;
        OffsetDateTime filtersStartDate = null;
        OffsetDateTime filtersEndDate = null;
        String filtersStatus = null;
        BatchGetBatchStatusesResponse response = api.getBatchStatuses(entityId)
                .offset(offset)
                .perPage(perPage)
                .filtersStartDate(filtersStartDate)
                .filtersEndDate(filtersEndDate)
                .filtersStatus(filtersStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Get batch error files
     *
     * Returns a set of URLs that can be accessed to retrieve the batch error files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getErrorFilesTest() throws ApiException {
        String batchId = null;
        BatchGetErrorFilesResponse response = api.getErrorFiles(batchId)
                .execute();
        // TODO: test validations
    }

    /**
     * Batch link status
     *
     * Returns the status of the batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkStatusGetTest() throws ApiException {
        String batchId = null;
        BatchResponse response = api.linkStatusGet(batchId)
                .execute();
        // TODO: test validations
    }

}

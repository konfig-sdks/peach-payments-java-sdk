/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CheckoutOptions;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.GenerateLinkPayment;
import com.konfigthis.client.model.GenerateLinkPaymentPayment;
import com.konfigthis.client.model.GenerateLinkResponse;
import com.konfigthis.client.model.MessageResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PaymentGetAllPaymentLinks200Response;
import com.konfigthis.client.model.PaymentGetAllPaymentLinksResponse;
import com.konfigthis.client.model.PaymentOptions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {

    private static PaymentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PaymentApi(apiClient);
    }

    /**
     * Cancel link
     *
     * Cancel a previously-generated link by supplying the unique paymentId which is returned to you in the payment response.  For more information, see the [documentation](https://developer.peachpayments.com/docs/cancel-link). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelLinkTest() throws ApiException {
        String paymentId = null;
        MessageResponse response = api.cancelLink(paymentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate link
     *
     * Generate a unique payment link for a transaction and optionally send this link to the recipient via email, SMS, WhatsApp, or a combination of the three.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-link-1). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateLinkTest() throws ApiException {
        GenerateLinkPaymentPayment payment = null;
        Customer customer = null;
        PaymentOptions options = null;
        CheckoutOptions checkout = null;
        String entityId = null;
        GenerateLinkResponse response = api.generateLink(payment, customer, options, checkout, entityId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve or export all payment links
     *
     * Retrieve a paginated list or export a CSV of all payment links. To export to CSV, change the request header&#39;s &#x60;Accept&#x60; value to &#x60;text/csv&#x60;. For more information, see the [documentation](https://developer.peachpayments.com/docs/retrieve-all-payment-links), or to try it out, see our [Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-265d80b0-5baa-478b-be10-debc942ca8f3).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPaymentLinksTest() throws ApiException {
        String merchant = null;
        Integer offset = null;
        Integer perPage = null;
        OffsetDateTime filtersStartDate = null;
        OffsetDateTime filtersEndDate = null;
        String filtersStatus = null;
        Double filtersAmountValue = null;
        String filtersAmountOperator = null;
        String filtersSendingOptions = null;
        PaymentGetAllPaymentLinksResponse response = api.getAllPaymentLinks()
                .merchant(merchant)
                .offset(offset)
                .perPage(perPage)
                .filtersStartDate(filtersStartDate)
                .filtersEndDate(filtersEndDate)
                .filtersStatus(filtersStatus)
                .filtersAmountValue(filtersAmountValue)
                .filtersAmountOperator(filtersAmountOperator)
                .filtersSendingOptions(filtersSendingOptions)
                .execute();
        // TODO: test validations
    }

}

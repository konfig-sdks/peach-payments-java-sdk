/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Checkout;
import com.konfigthis.client.model.CheckoutGenerationInitiateRedirectCheckoutResponse;
import com.konfigthis.client.model.MessageResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CheckoutGenerationApi
 */
@Disabled
public class CheckoutGenerationApiTest {

    private static CheckoutGenerationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CheckoutGenerationApi(apiClient);
    }

    /**
     * Initiate Checkout
     *
     * Load the Checkout frontend to complete a payment. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends.  Sign the data on the backend and execute the POST from the browser.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#form-post-checkout). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiatePaymentTest() throws ApiException {
        String referer = null;
        String authenticationEntityId = null;
        String signature = null;
        String merchantTransactionId = null;
        String amount = null;
        String paymentType = null;
        String currency = null;
        String nonce = null;
        String shopperResultUrl = null;
        String defaultPaymentMethod = null;
        String forceDefaultMethod = null;
        String merchantInvoiceId = null;
        String cancelUrl = null;
        String notificationUrl = null;
        String customParametersName = null;
        String customerMerchantCustomerId = null;
        String customerGivenName = null;
        String customerSurname = null;
        String customerMobile = null;
        String customerEmail = null;
        String customerStatus = null;
        String customerBirthDate = null;
        String customerIp = null;
        String customerPhone = null;
        String customerIdNumber = null;
        String billingStreet1 = null;
        String billingStreet2 = null;
        String billingCity = null;
        String billingCompany = null;
        String billingCountry = null;
        String billingState = null;
        String billingPostcode = null;
        String shippingStreet1 = null;
        String shippingStreet2 = null;
        String shippingCity = null;
        String shippingCompany = null;
        String shippingPostcode = null;
        String shippingCountry = null;
        String shippingState = null;
        String cartTax = null;
        String cartShippingAmount = null;
        String cartDiscount = null;
        String createRegistration = null;
        String originator = null;
        String returnTo = null;
        String response = api.initiatePayment(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl)
                .defaultPaymentMethod(defaultPaymentMethod)
                .forceDefaultMethod(forceDefaultMethod)
                .merchantInvoiceId(merchantInvoiceId)
                .cancelUrl(cancelUrl)
                .notificationUrl(notificationUrl)
                .customParametersName(customParametersName)
                .customerMerchantCustomerId(customerMerchantCustomerId)
                .customerGivenName(customerGivenName)
                .customerSurname(customerSurname)
                .customerMobile(customerMobile)
                .customerEmail(customerEmail)
                .customerStatus(customerStatus)
                .customerBirthDate(customerBirthDate)
                .customerIp(customerIp)
                .customerPhone(customerPhone)
                .customerIdNumber(customerIdNumber)
                .billingStreet1(billingStreet1)
                .billingStreet2(billingStreet2)
                .billingCity(billingCity)
                .billingCompany(billingCompany)
                .billingCountry(billingCountry)
                .billingState(billingState)
                .billingPostcode(billingPostcode)
                .shippingStreet1(shippingStreet1)
                .shippingStreet2(shippingStreet2)
                .shippingCity(shippingCity)
                .shippingCompany(shippingCompany)
                .shippingPostcode(shippingPostcode)
                .shippingCountry(shippingCountry)
                .shippingState(shippingState)
                .cartTax(cartTax)
                .cartShippingAmount(cartShippingAmount)
                .cartDiscount(cartDiscount)
                .createRegistration(createRegistration)
                .originator(originator)
                .returnTo(returnTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Initiate redirect-based Checkout
     *
     * Provide a redirect URL to the caller to redirect the user into the Checkout experience. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends. This allows the checkout instance to be created from a backend without requiring a \&quot;form post\&quot;, or other similar method, from the frontend.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#redirect-based-checkout). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateRedirectCheckoutTest() throws ApiException {
        String authenticationEntityId = null;
        String signature = null;
        String merchantTransactionId = null;
        String amount = null;
        String paymentType = null;
        String currency = null;
        String nonce = null;
        String shopperResultUrl = null;
        String referer = null;
        String defaultPaymentMethod = null;
        String forceDefaultMethod = null;
        String merchantInvoiceId = null;
        String cancelUrl = null;
        String notificationUrl = null;
        String customParametersName = null;
        String customerMerchantCustomerId = null;
        String customerGivenName = null;
        String customerSurname = null;
        String customerMobile = null;
        String customerEmail = null;
        String customerStatus = null;
        String customerBirthDate = null;
        String customerIp = null;
        String customerPhone = null;
        String customerIdNumber = null;
        String billingStreet1 = null;
        String billingStreet2 = null;
        String billingCity = null;
        String billingCompany = null;
        String billingCountry = null;
        String billingState = null;
        String billingPostcode = null;
        String shippingStreet1 = null;
        String shippingStreet2 = null;
        String shippingCity = null;
        String shippingCompany = null;
        String shippingPostcode = null;
        String shippingCountry = null;
        String shippingState = null;
        String cartTax = null;
        String cartShippingAmount = null;
        String cartDiscount = null;
        String createRegistration = null;
        String originator = null;
        String returnTo = null;
        CheckoutGenerationInitiateRedirectCheckoutResponse response = api.initiateRedirectCheckout(authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, referer)
                .defaultPaymentMethod(defaultPaymentMethod)
                .forceDefaultMethod(forceDefaultMethod)
                .merchantInvoiceId(merchantInvoiceId)
                .cancelUrl(cancelUrl)
                .notificationUrl(notificationUrl)
                .customParametersName(customParametersName)
                .customerMerchantCustomerId(customerMerchantCustomerId)
                .customerGivenName(customerGivenName)
                .customerSurname(customerSurname)
                .customerMobile(customerMobile)
                .customerEmail(customerEmail)
                .customerStatus(customerStatus)
                .customerBirthDate(customerBirthDate)
                .customerIp(customerIp)
                .customerPhone(customerPhone)
                .customerIdNumber(customerIdNumber)
                .billingStreet1(billingStreet1)
                .billingStreet2(billingStreet2)
                .billingCity(billingCity)
                .billingCompany(billingCompany)
                .billingCountry(billingCountry)
                .billingState(billingState)
                .billingPostcode(billingPostcode)
                .shippingStreet1(shippingStreet1)
                .shippingStreet2(shippingStreet2)
                .shippingCity(shippingCity)
                .shippingCompany(shippingCompany)
                .shippingPostcode(shippingPostcode)
                .shippingCountry(shippingCountry)
                .shippingState(shippingState)
                .cartTax(cartTax)
                .cartShippingAmount(cartShippingAmount)
                .cartDiscount(cartDiscount)
                .createRegistration(createRegistration)
                .originator(originator)
                .returnTo(returnTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate Checkout request
     *
     * Validate a request before trying to initiate a checkout session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateRequestTest() throws ApiException {
        String authenticationEntityId = null;
        String signature = null;
        String merchantTransactionId = null;
        String amount = null;
        String paymentType = null;
        String currency = null;
        String nonce = null;
        String shopperResultUrl = null;
        String referer = null;
        String defaultPaymentMethod = null;
        String forceDefaultMethod = null;
        String merchantInvoiceId = null;
        String cancelUrl = null;
        String notificationUrl = null;
        String customParametersName = null;
        String customerMerchantCustomerId = null;
        String customerGivenName = null;
        String customerSurname = null;
        String customerMobile = null;
        String customerEmail = null;
        String customerStatus = null;
        String customerBirthDate = null;
        String customerIp = null;
        String customerPhone = null;
        String customerIdNumber = null;
        String billingStreet1 = null;
        String billingStreet2 = null;
        String billingCity = null;
        String billingCompany = null;
        String billingCountry = null;
        String billingState = null;
        String billingPostcode = null;
        String shippingStreet1 = null;
        String shippingStreet2 = null;
        String shippingCity = null;
        String shippingCompany = null;
        String shippingPostcode = null;
        String shippingCountry = null;
        String shippingState = null;
        String cartTax = null;
        String cartShippingAmount = null;
        String cartDiscount = null;
        String createRegistration = null;
        String originator = null;
        String returnTo = null;
        MessageResponse response = api.validateRequest(authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, referer)
                .defaultPaymentMethod(defaultPaymentMethod)
                .forceDefaultMethod(forceDefaultMethod)
                .merchantInvoiceId(merchantInvoiceId)
                .cancelUrl(cancelUrl)
                .notificationUrl(notificationUrl)
                .customParametersName(customParametersName)
                .customerMerchantCustomerId(customerMerchantCustomerId)
                .customerGivenName(customerGivenName)
                .customerSurname(customerSurname)
                .customerMobile(customerMobile)
                .customerEmail(customerEmail)
                .customerStatus(customerStatus)
                .customerBirthDate(customerBirthDate)
                .customerIp(customerIp)
                .customerPhone(customerPhone)
                .customerIdNumber(customerIdNumber)
                .billingStreet1(billingStreet1)
                .billingStreet2(billingStreet2)
                .billingCity(billingCity)
                .billingCompany(billingCompany)
                .billingCountry(billingCountry)
                .billingState(billingState)
                .billingPostcode(billingPostcode)
                .shippingStreet1(shippingStreet1)
                .shippingStreet2(shippingStreet2)
                .shippingCity(shippingCity)
                .shippingCompany(shippingCompany)
                .shippingPostcode(shippingPostcode)
                .shippingCountry(shippingCountry)
                .shippingState(shippingState)
                .cartTax(cartTax)
                .cartShippingAmount(cartShippingAmount)
                .cartDiscount(cartDiscount)
                .createRegistration(createRegistration)
                .originator(originator)
                .returnTo(returnTo)
                .execute();
        // TODO: test validations
    }

}

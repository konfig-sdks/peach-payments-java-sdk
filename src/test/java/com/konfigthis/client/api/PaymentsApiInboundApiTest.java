/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Authentication;
import com.konfigthis.client.model.Cart;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.EPResponse;
import com.konfigthis.client.model.MerchantTransactionIdStatusResponse;
import com.konfigthis.client.model.PaymentBrand;
import com.konfigthis.client.model.PaymentRequest;
import com.konfigthis.client.model.PaymentType;
import com.konfigthis.client.model.REResponse;
import com.konfigthis.client.model.RefundPaymentType;
import com.konfigthis.client.model.RefundRequest;
import com.konfigthis.client.model.Shopify;
import com.konfigthis.client.model.TransactionIdStatusResponse;
import java.net.URI;
import com.konfigthis.client.model.VirtualAccount;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApiInboundApi
 */
@Disabled
public class PaymentsApiInboundApiTest {

    private static PaymentsApiInboundApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PaymentsApiInboundApi(apiClient);
    }

    /**
     * Payment
     *
     * Initiate a debit transaction.  Certain parameters are mandatory for specific payment methods and certain parameters act differently depending on the payment method.   - For 1Voucher, &#x60;customer.mobile&#x60; (the customer&#39;s phone number for receiving change vouchers and refunds) and &#x60;virtualAccount.password&#x60; (the voucher PIN) are mandatory. - For M-PESA, &#x60;virtualAccount.accountId&#x60; (the customer&#39;s 12-digit phone number) is mandatory. M-PESA only accepts integer amounts, not decimals, so round up your amount. - For blink by Emtel and MCB Juice, &#x60;virtualAccount.accountId&#x60; (the customer&#39;s 8-digit phone number) is mandatory. - For Mobicred, &#x60;virtualAccount.accountId&#x60; (the customer&#39;s Mobicred email address) and &#x60;virtualAccount.password&#x60; (the customer&#39;s Mobicred password) are mandatory. - For Capitec Pay, &#x60;virtualAccount.type&#x60; (the customer&#39;s identifier type; &#x60;IDNUMBER&#x60;, &#x60;CELLPHONE&#x60;, or &#x60;ACCOUNTNUMBER&#x60;) and &#x60;virtualAccount.accountId&#x60; (the customer&#39;s 13-digit ID number, 10-digit phone number starting with &#x60;0&#x60;, or up-to 64-digit, alphanumeric bank account number) are mandatory. High-risk merchants must provide the verified &#x60;IDNUMBER&#x60; and cannot use the &#x60;CELLPHONE&#x60; or &#x60;ACCOUNTNUMBER&#x60; account types. - For EFTsecure, Payflex, ZeroPay, FinChoicePay, Scan to Pay, M-PESA, blink by Emtel, Mobicred, Capitec Pay, Nebank Direct EFT, and MCB Juice, the &#x60;shopperResultUrl&#x60; is mandatory.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#payment-flow) and for sample calls, see our [public Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-693c4b18-dad5-4b6f-aeb0-99bc28b94812). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateDebitTransactionTest() throws ApiException {
        Authentication authentication = null;
        String merchantTransactionId = null;
        String amount = null;
        String currency = null;
        PaymentBrand paymentBrand = null;
        PaymentType paymentType = null;
        VirtualAccount virtualAccount = null;
        Address shipping = null;
        Address billing = null;
        Shopify shopify = null;
        Customer customer = null;
        Cart cart = null;
        String merchantInvoiceId = null;
        URI shopperResultUrl = null;
        EPResponse response = api.initiateDebitTransaction(authentication, merchantTransactionId, amount, currency, paymentBrand, paymentType)
                .virtualAccount(virtualAccount)
                .shipping(shipping)
                .billing(billing)
                .shopify(shopify)
                .customer(customer)
                .cart(cart)
                .merchantInvoiceId(merchantInvoiceId)
                .shopperResultUrl(shopperResultUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Query a transaction by transaction ID
     *
     * Query the status of a transaction using the Peach Payments unique ID.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTransactionByIdTest() throws ApiException {
        String uniqueId = null;
        String authenticationEntityId = null;
        String authenticationUserId = null;
        String authenticationPassword = null;
        TransactionIdStatusResponse response = api.queryTransactionById(uniqueId, authenticationEntityId, authenticationUserId, authenticationPassword)
                .execute();
        // TODO: test validations
    }

    /**
     * Refund
     *
     * Refund a successful debit transaction. You can only refund [certain payment methods](https://developer.peachpayments.com/docs/pp-payment-methods).  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#refund-flow). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refundTransactionTest() throws ApiException {
        Authentication authentication = null;
        String amount = null;
        String currency = null;
        RefundPaymentType paymentType = null;
        String uniqueId = null;
        REResponse response = api.refundTransaction(authentication, amount, currency, paymentType, uniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * Query a transaction by merchantTransactionId
     *
     * Query the status of a transaction using the merchantTransactionId. Could return multiple results.  For more information, see the [documentation](https://developer.peachpayments.com/docs/payments-api-flows#transaction-status-flow). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void statusTest() throws ApiException {
        String authenticationUserId = null;
        String authenticationPassword = null;
        String authenticationEntityId = null;
        String merchantTransactionId = null;
        MerchantTransactionIdStatusResponse response = api.status(authenticationUserId, authenticationPassword, authenticationEntityId, merchantTransactionId)
                .execute();
        // TODO: test validations
    }

}

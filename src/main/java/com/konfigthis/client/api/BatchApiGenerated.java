/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BatchGenerateLinkRequest;
import com.konfigthis.client.model.BatchGenerateLinkResponse;
import com.konfigthis.client.model.BatchGetBatchStatusesResponse;
import com.konfigthis.client.model.BatchGetErrorFilesResponse;
import com.konfigthis.client.model.BatchResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BatchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BatchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateLinkCall(String entityId, BatchGenerateLinkRequest batchGenerateLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchGenerateLinkRequest;

        // create path and map variables
        String localVarPath = "/api/channels/{entityId}/payments/batches"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateLinkValidateBeforeCall(String entityId, BatchGenerateLinkRequest batchGenerateLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling generateLink(Async)");
        }

        // verify the required parameter 'batchGenerateLinkRequest' is set
        if (batchGenerateLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'batchGenerateLinkRequest' when calling generateLink(Async)");
        }

        return generateLinkCall(entityId, batchGenerateLinkRequest, _callback);

    }


    private ApiResponse<BatchGenerateLinkResponse> generateLinkWithHttpInfo(String entityId, BatchGenerateLinkRequest batchGenerateLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = generateLinkValidateBeforeCall(entityId, batchGenerateLinkRequest, null);
        Type localVarReturnType = new TypeToken<BatchGenerateLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateLinkAsync(String entityId, BatchGenerateLinkRequest batchGenerateLinkRequest, final ApiCallback<BatchGenerateLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateLinkValidateBeforeCall(entityId, batchGenerateLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchGenerateLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateLinkRequestBuilder {
        private final String filename;
        private final String entityId;
        private String notificationUrl;

        private GenerateLinkRequestBuilder(String filename, String entityId) {
            this.filename = filename;
            this.entityId = entityId;
        }

        /**
         * Set notificationUrl
         * @param notificationUrl Webhooks are sent to this URL. It overrides the generic merchant webhook URL. (optional)
         * @return GenerateLinkRequestBuilder
         */
        public GenerateLinkRequestBuilder notificationUrl(String notificationUrl) {
            this.notificationUrl = notificationUrl;
            return this;
        }
        
        /**
         * Build call for generateLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Batch ID and URL. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchGenerateLinkRequest batchGenerateLinkRequest = buildBodyParams();
            return generateLinkCall(entityId, batchGenerateLinkRequest, _callback);
        }

        private BatchGenerateLinkRequest buildBodyParams() {
            BatchGenerateLinkRequest batchGenerateLinkRequest = new BatchGenerateLinkRequest();
            batchGenerateLinkRequest.filename(this.filename);
            batchGenerateLinkRequest.notificationUrl(this.notificationUrl);
            return batchGenerateLinkRequest;
        }

        /**
         * Execute generateLink request
         * @return BatchGenerateLinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Batch ID and URL. </td><td>  -  </td></tr>
         </table>
         */
        public BatchGenerateLinkResponse execute() throws ApiException {
            BatchGenerateLinkRequest batchGenerateLinkRequest = buildBodyParams();
            ApiResponse<BatchGenerateLinkResponse> localVarResp = generateLinkWithHttpInfo(entityId, batchGenerateLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateLink request with HTTP info returned
         * @return ApiResponse&lt;BatchGenerateLinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Batch ID and URL. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchGenerateLinkResponse> executeWithHttpInfo() throws ApiException {
            BatchGenerateLinkRequest batchGenerateLinkRequest = buildBodyParams();
            return generateLinkWithHttpInfo(entityId, batchGenerateLinkRequest);
        }

        /**
         * Execute generateLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Batch ID and URL. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchGenerateLinkResponse> _callback) throws ApiException {
            BatchGenerateLinkRequest batchGenerateLinkRequest = buildBodyParams();
            return generateLinkAsync(entityId, batchGenerateLinkRequest, _callback);
        }
    }

    /**
     * Generate batch link
     * Returns a URL to which the batch file must be uploaded.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-bulk-payment-links). 
     * @param entityId The entity for the request. (required)
     * @param batchGenerateLinkRequest  (required)
     * @return GenerateLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch ID and URL. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateLinkRequestBuilder generateLink(String filename, String entityId) throws IllegalArgumentException {
        if (filename == null) throw new IllegalArgumentException("\"filename\" is required but got null");
            

        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        return new GenerateLinkRequestBuilder(filename, entityId);
    }
    private okhttp3.Call getBatchStatusesCall(String entityId, Double offset, Double perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/channels/{entityId}/payments/batches"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (filtersStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[startDate]", filtersStartDate));
        }

        if (filtersEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[endDate]", filtersEndDate));
        }

        if (filtersStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[status]", filtersStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBatchStatusesValidateBeforeCall(String entityId, Double offset, Double perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getBatchStatuses(Async)");
        }

        return getBatchStatusesCall(entityId, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, _callback);

    }


    private ApiResponse<BatchGetBatchStatusesResponse> getBatchStatusesWithHttpInfo(String entityId, Double offset, Double perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus) throws ApiException {
        okhttp3.Call localVarCall = getBatchStatusesValidateBeforeCall(entityId, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, null);
        Type localVarReturnType = new TypeToken<BatchGetBatchStatusesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBatchStatusesAsync(String entityId, Double offset, Double perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus, final ApiCallback<BatchGetBatchStatusesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBatchStatusesValidateBeforeCall(entityId, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, _callback);
        Type localVarReturnType = new TypeToken<BatchGetBatchStatusesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBatchStatusesRequestBuilder {
        private final String entityId;
        private Double offset;
        private Double perPage;
        private OffsetDateTime filtersStartDate;
        private OffsetDateTime filtersEndDate;
        private String filtersStatus;

        private GetBatchStatusesRequestBuilder(String entityId) {
            this.entityId = entityId;
        }

        /**
         * Set offset
         * @param offset The offset from which to read data. (optional, default to 0)
         * @return GetBatchStatusesRequestBuilder
         */
        public GetBatchStatusesRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The amount of items to retrieve. (optional, default to 50)
         * @return GetBatchStatusesRequestBuilder
         */
        public GetBatchStatusesRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set filtersStartDate
         * @param filtersStartDate Retrieve all batches from the start date onwards. (optional)
         * @return GetBatchStatusesRequestBuilder
         */
        public GetBatchStatusesRequestBuilder filtersStartDate(OffsetDateTime filtersStartDate) {
            this.filtersStartDate = filtersStartDate;
            return this;
        }
        
        /**
         * Set filtersEndDate
         * @param filtersEndDate Retrieve all batches until the end date. (optional)
         * @return GetBatchStatusesRequestBuilder
         */
        public GetBatchStatusesRequestBuilder filtersEndDate(OffsetDateTime filtersEndDate) {
            this.filtersEndDate = filtersEndDate;
            return this;
        }
        
        /**
         * Set filtersStatus
         * @param filtersStatus The payment link status to filter on. (optional)
         * @return GetBatchStatusesRequestBuilder
         */
        public GetBatchStatusesRequestBuilder filtersStatus(String filtersStatus) {
            this.filtersStatus = filtersStatus;
            return this;
        }
        
        /**
         * Build call for getBatchStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBatchStatusesCall(entityId, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, _callback);
        }


        /**
         * Execute getBatchStatuses request
         * @return BatchGetBatchStatusesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL. </td><td>  -  </td></tr>
         </table>
         */
        public BatchGetBatchStatusesResponse execute() throws ApiException {
            ApiResponse<BatchGetBatchStatusesResponse> localVarResp = getBatchStatusesWithHttpInfo(entityId, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBatchStatuses request with HTTP info returned
         * @return ApiResponse&lt;BatchGetBatchStatusesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchGetBatchStatusesResponse> executeWithHttpInfo() throws ApiException {
            return getBatchStatusesWithHttpInfo(entityId, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus);
        }

        /**
         * Execute getBatchStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchGetBatchStatusesResponse> _callback) throws ApiException {
            return getBatchStatusesAsync(entityId, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, _callback);
        }
    }

    /**
     * Get all batch statuses
     * Query all batch statuses of a batch for a channel.
     * @param entityId The entity for the request. (required)
     * @return GetBatchStatusesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> URL. </td><td>  -  </td></tr>
     </table>
     */
    public GetBatchStatusesRequestBuilder getBatchStatuses(String entityId) throws IllegalArgumentException {
        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        return new GetBatchStatusesRequestBuilder(entityId);
    }
    private okhttp3.Call getErrorFilesCall(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/batches/{batchId}/files"
            .replace("{" + "batchId" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getErrorFilesValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getErrorFiles(Async)");
        }

        return getErrorFilesCall(batchId, _callback);

    }


    private ApiResponse<BatchGetErrorFilesResponse> getErrorFilesWithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = getErrorFilesValidateBeforeCall(batchId, null);
        Type localVarReturnType = new TypeToken<BatchGetErrorFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getErrorFilesAsync(String batchId, final ApiCallback<BatchGetErrorFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getErrorFilesValidateBeforeCall(batchId, _callback);
        Type localVarReturnType = new TypeToken<BatchGetErrorFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetErrorFilesRequestBuilder {
        private final String batchId;

        private GetErrorFilesRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Build call for getErrorFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Error files. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getErrorFilesCall(batchId, _callback);
        }


        /**
         * Execute getErrorFiles request
         * @return BatchGetErrorFilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Error files. </td><td>  -  </td></tr>
         </table>
         */
        public BatchGetErrorFilesResponse execute() throws ApiException {
            ApiResponse<BatchGetErrorFilesResponse> localVarResp = getErrorFilesWithHttpInfo(batchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getErrorFiles request with HTTP info returned
         * @return ApiResponse&lt;BatchGetErrorFilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Error files. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchGetErrorFilesResponse> executeWithHttpInfo() throws ApiException {
            return getErrorFilesWithHttpInfo(batchId);
        }

        /**
         * Execute getErrorFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Error files. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchGetErrorFilesResponse> _callback) throws ApiException {
            return getErrorFilesAsync(batchId, _callback);
        }
    }

    /**
     * Get batch error files
     * Returns a set of URLs that can be accessed to retrieve the batch error files.
     * @param batchId The batch for the request. (required)
     * @return GetErrorFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error files. </td><td>  -  </td></tr>
     </table>
     */
    public GetErrorFilesRequestBuilder getErrorFiles(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            

        return new GetErrorFilesRequestBuilder(batchId);
    }
    private okhttp3.Call linkStatusGetCall(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/batches/{batchId}"
            .replace("{" + "batchId" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkStatusGetValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling linkStatusGet(Async)");
        }

        return linkStatusGetCall(batchId, _callback);

    }


    private ApiResponse<BatchResponse> linkStatusGetWithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = linkStatusGetValidateBeforeCall(batchId, null);
        Type localVarReturnType = new TypeToken<BatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call linkStatusGetAsync(String batchId, final ApiCallback<BatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkStatusGetValidateBeforeCall(batchId, _callback);
        Type localVarReturnType = new TypeToken<BatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LinkStatusGetRequestBuilder {
        private final String batchId;

        private LinkStatusGetRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Build call for linkStatusGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status received. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return linkStatusGetCall(batchId, _callback);
        }


        /**
         * Execute linkStatusGet request
         * @return BatchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status received. </td><td>  -  </td></tr>
         </table>
         */
        public BatchResponse execute() throws ApiException {
            ApiResponse<BatchResponse> localVarResp = linkStatusGetWithHttpInfo(batchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute linkStatusGet request with HTTP info returned
         * @return ApiResponse&lt;BatchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status received. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchResponse> executeWithHttpInfo() throws ApiException {
            return linkStatusGetWithHttpInfo(batchId);
        }

        /**
         * Execute linkStatusGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Status received. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchResponse> _callback) throws ApiException {
            return linkStatusGetAsync(batchId, _callback);
        }
    }

    /**
     * Batch link status
     * Returns the status of the batch.
     * @param batchId The batch ID for the request. (required)
     * @return LinkStatusGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status received. </td><td>  -  </td></tr>
     </table>
     */
    public LinkStatusGetRequestBuilder linkStatusGet(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            

        return new LinkStatusGetRequestBuilder(batchId);
    }
}

/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.HelpersGetPaymentMethodsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HelpersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HelpersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HelpersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPaymentMethodsCall(HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = helpersGetPaymentMethodsRequest;

        // create path and map variables
        String localVarPath = "/merchant_specs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentMethodsValidateBeforeCall(HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'helpersGetPaymentMethodsRequest' is set
        if (helpersGetPaymentMethodsRequest == null) {
            throw new ApiException("Missing the required parameter 'helpersGetPaymentMethodsRequest' when calling getPaymentMethods(Async)");
        }

        return getPaymentMethodsCall(helpersGetPaymentMethodsRequest, _callback);

    }


    private ApiResponse<Void> getPaymentMethodsWithHttpInfo(HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest) throws ApiException {
        okhttp3.Call localVarCall = getPaymentMethodsValidateBeforeCall(helpersGetPaymentMethodsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getPaymentMethodsAsync(HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentMethodsValidateBeforeCall(helpersGetPaymentMethodsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetPaymentMethodsRequestBuilder {
        private final String authenticationEntityId;
        private final String signature;
        private final String currency;

        private GetPaymentMethodsRequestBuilder(String authenticationEntityId, String signature, String currency) {
            this.authenticationEntityId = authenticationEntityId;
            this.signature = signature;
            this.currency = currency;
        }

        /**
         * Build call for getPaymentMethods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest = buildBodyParams();
            return getPaymentMethodsCall(helpersGetPaymentMethodsRequest, _callback);
        }

        private HelpersGetPaymentMethodsRequest buildBodyParams() {
            HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest = new HelpersGetPaymentMethodsRequest();
            helpersGetPaymentMethodsRequest.authenticationEntityId(this.authenticationEntityId);
            helpersGetPaymentMethodsRequest.signature(this.signature);
            helpersGetPaymentMethodsRequest.currency(this.currency);
            return helpersGetPaymentMethodsRequest;
        }

        /**
         * Execute getPaymentMethods request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest = buildBodyParams();
            getPaymentMethodsWithHttpInfo(helpersGetPaymentMethodsRequest);
        }

        /**
         * Execute getPaymentMethods request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest = buildBodyParams();
            return getPaymentMethodsWithHttpInfo(helpersGetPaymentMethodsRequest);
        }

        /**
         * Execute getPaymentMethods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            HelpersGetPaymentMethodsRequest helpersGetPaymentMethodsRequest = buildBodyParams();
            return getPaymentMethodsAsync(helpersGetPaymentMethodsRequest, _callback);
        }
    }

    /**
     * Retrieve a list of payment methods for a currency
     * Retrieve a list of enabled payment methods for a channel given a particular currency.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-merchant-specs).  
     * @param helpersGetPaymentMethodsRequest  (required)
     * @return GetPaymentMethodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentMethodsRequestBuilder getPaymentMethods(String authenticationEntityId, String signature, String currency) throws IllegalArgumentException {
        if (authenticationEntityId == null) throw new IllegalArgumentException("\"authenticationEntityId\" is required but got null");
            if (authenticationEntityId != null && authenticationEntityId.length() < 32) {
              throw new IllegalArgumentException("Invalid value for authenticationEntityId. Length must be greater than or equal to 32.");
            }

        if (signature == null) throw new IllegalArgumentException("\"signature\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        return new GetPaymentMethodsRequestBuilder(authenticationEntityId, signature, currency);
    }
}

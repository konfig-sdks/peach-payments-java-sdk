/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Checkout;
import com.konfigthis.client.model.CheckoutGenerationInitiateRedirectCheckoutResponse;
import com.konfigthis.client.model.MessageResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CheckoutGenerationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CheckoutGenerationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CheckoutGenerationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call initiatePaymentCall(String referer, String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, Checkout checkout, String defaultPaymentMethod, String forceDefaultMethod, String merchantInvoiceId, String cancelUrl, String notificationUrl, String customParametersName, String customerMerchantCustomerId, String customerGivenName, String customerSurname, String customerMobile, String customerEmail, String customerStatus, String customerBirthDate, String customerIp, String customerPhone, String customerIdNumber, String billingStreet1, String billingStreet2, String billingCity, String billingCompany, String billingCountry, String billingState, String billingPostcode, String shippingStreet1, String shippingStreet2, String shippingCity, String shippingCompany, String shippingPostcode, String shippingCountry, String shippingState, String cartTax, String cartShippingAmount, String cartDiscount, String createRegistration, String originator, String returnTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkout;

        // create path and map variables
        String localVarPath = "/checkout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authenticationEntityId != null) {
            localVarFormParams.put("authentication.entityId", authenticationEntityId);
        }

        if (signature != null) {
            localVarFormParams.put("signature", signature);
        }

        if (merchantTransactionId != null) {
            localVarFormParams.put("merchantTransactionId", merchantTransactionId);
        }

        if (amount != null) {
            localVarFormParams.put("amount", amount);
        }

        if (paymentType != null) {
            localVarFormParams.put("paymentType", paymentType);
        }

        if (currency != null) {
            localVarFormParams.put("currency", currency);
        }

        if (nonce != null) {
            localVarFormParams.put("nonce", nonce);
        }

        if (shopperResultUrl != null) {
            localVarFormParams.put("shopperResultUrl", shopperResultUrl);
        }

        if (defaultPaymentMethod != null) {
            localVarFormParams.put("defaultPaymentMethod", defaultPaymentMethod);
        }

        if (forceDefaultMethod != null) {
            localVarFormParams.put("forceDefaultMethod", forceDefaultMethod);
        }

        if (merchantInvoiceId != null) {
            localVarFormParams.put("merchantInvoiceId", merchantInvoiceId);
        }

        if (cancelUrl != null) {
            localVarFormParams.put("cancelUrl", cancelUrl);
        }

        if (notificationUrl != null) {
            localVarFormParams.put("notificationUrl", notificationUrl);
        }

        if (customParametersName != null) {
            localVarFormParams.put("customParameters[name]", customParametersName);
        }

        if (customerMerchantCustomerId != null) {
            localVarFormParams.put("customer.merchantCustomerId", customerMerchantCustomerId);
        }

        if (customerGivenName != null) {
            localVarFormParams.put("customer.givenName", customerGivenName);
        }

        if (customerSurname != null) {
            localVarFormParams.put("customer.surname", customerSurname);
        }

        if (customerMobile != null) {
            localVarFormParams.put("customer.mobile", customerMobile);
        }

        if (customerEmail != null) {
            localVarFormParams.put("customer.email", customerEmail);
        }

        if (customerStatus != null) {
            localVarFormParams.put("customer.status", customerStatus);
        }

        if (customerBirthDate != null) {
            localVarFormParams.put("customer.birthDate", customerBirthDate);
        }

        if (customerIp != null) {
            localVarFormParams.put("customer.ip", customerIp);
        }

        if (customerPhone != null) {
            localVarFormParams.put("customer.phone", customerPhone);
        }

        if (customerIdNumber != null) {
            localVarFormParams.put("customer.idNumber", customerIdNumber);
        }

        if (billingStreet1 != null) {
            localVarFormParams.put("billing.street1", billingStreet1);
        }

        if (billingStreet2 != null) {
            localVarFormParams.put("billing.street2", billingStreet2);
        }

        if (billingCity != null) {
            localVarFormParams.put("billing.city", billingCity);
        }

        if (billingCompany != null) {
            localVarFormParams.put("billing.company", billingCompany);
        }

        if (billingCountry != null) {
            localVarFormParams.put("billing.country", billingCountry);
        }

        if (billingState != null) {
            localVarFormParams.put("billing.state", billingState);
        }

        if (billingPostcode != null) {
            localVarFormParams.put("billing.postcode", billingPostcode);
        }

        if (shippingStreet1 != null) {
            localVarFormParams.put("shipping.street1", shippingStreet1);
        }

        if (shippingStreet2 != null) {
            localVarFormParams.put("shipping.street2", shippingStreet2);
        }

        if (shippingCity != null) {
            localVarFormParams.put("shipping.city", shippingCity);
        }

        if (shippingCompany != null) {
            localVarFormParams.put("shipping.company", shippingCompany);
        }

        if (shippingPostcode != null) {
            localVarFormParams.put("shipping.postcode", shippingPostcode);
        }

        if (shippingCountry != null) {
            localVarFormParams.put("shipping.country", shippingCountry);
        }

        if (shippingState != null) {
            localVarFormParams.put("shipping.state", shippingState);
        }

        if (cartTax != null) {
            localVarFormParams.put("cart.tax", cartTax);
        }

        if (cartShippingAmount != null) {
            localVarFormParams.put("cart.shippingAmount", cartShippingAmount);
        }

        if (cartDiscount != null) {
            localVarFormParams.put("cart.discount", cartDiscount);
        }

        if (createRegistration != null) {
            localVarFormParams.put("createRegistration", createRegistration);
        }

        if (originator != null) {
            localVarFormParams.put("originator", originator);
        }

        if (returnTo != null) {
            localVarFormParams.put("returnTo", returnTo);
        }

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiatePaymentValidateBeforeCall(String referer, String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, Checkout checkout, String defaultPaymentMethod, String forceDefaultMethod, String merchantInvoiceId, String cancelUrl, String notificationUrl, String customParametersName, String customerMerchantCustomerId, String customerGivenName, String customerSurname, String customerMobile, String customerEmail, String customerStatus, String customerBirthDate, String customerIp, String customerPhone, String customerIdNumber, String billingStreet1, String billingStreet2, String billingCity, String billingCompany, String billingCountry, String billingState, String billingPostcode, String shippingStreet1, String shippingStreet2, String shippingCity, String shippingCompany, String shippingPostcode, String shippingCountry, String shippingState, String cartTax, String cartShippingAmount, String cartDiscount, String createRegistration, String originator, String returnTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'authenticationEntityId' is set
        if (authenticationEntityId == null) {
            throw new ApiException("Missing the required parameter 'authenticationEntityId' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'merchantTransactionId' is set
        if (merchantTransactionId == null) {
            throw new ApiException("Missing the required parameter 'merchantTransactionId' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'paymentType' is set
        if (paymentType == null) {
            throw new ApiException("Missing the required parameter 'paymentType' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'shopperResultUrl' is set
        if (shopperResultUrl == null) {
            throw new ApiException("Missing the required parameter 'shopperResultUrl' when calling initiatePayment(Async)");
        }

        // verify the required parameter 'checkout' is set
        if (checkout == null) {
            throw new ApiException("Missing the required parameter 'checkout' when calling initiatePayment(Async)");
        }

        return initiatePaymentCall(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, checkout, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo, _callback);

    }


    private ApiResponse<String> initiatePaymentWithHttpInfo(String referer, String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, Checkout checkout, String defaultPaymentMethod, String forceDefaultMethod, String merchantInvoiceId, String cancelUrl, String notificationUrl, String customParametersName, String customerMerchantCustomerId, String customerGivenName, String customerSurname, String customerMobile, String customerEmail, String customerStatus, String customerBirthDate, String customerIp, String customerPhone, String customerIdNumber, String billingStreet1, String billingStreet2, String billingCity, String billingCompany, String billingCountry, String billingState, String billingPostcode, String shippingStreet1, String shippingStreet2, String shippingCity, String shippingCompany, String shippingPostcode, String shippingCountry, String shippingState, String cartTax, String cartShippingAmount, String cartDiscount, String createRegistration, String originator, String returnTo) throws ApiException {
        okhttp3.Call localVarCall = initiatePaymentValidateBeforeCall(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, checkout, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initiatePaymentAsync(String referer, String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, Checkout checkout, String defaultPaymentMethod, String forceDefaultMethod, String merchantInvoiceId, String cancelUrl, String notificationUrl, String customParametersName, String customerMerchantCustomerId, String customerGivenName, String customerSurname, String customerMobile, String customerEmail, String customerStatus, String customerBirthDate, String customerIp, String customerPhone, String customerIdNumber, String billingStreet1, String billingStreet2, String billingCity, String billingCompany, String billingCountry, String billingState, String billingPostcode, String shippingStreet1, String shippingStreet2, String shippingCity, String shippingCompany, String shippingPostcode, String shippingCountry, String shippingState, String cartTax, String cartShippingAmount, String cartDiscount, String createRegistration, String originator, String returnTo, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiatePaymentValidateBeforeCall(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, checkout, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitiatePaymentRequestBuilder {
        private final String referer;
        private final String authenticationEntityId;
        private final String signature;
        private final String merchantTransactionId;
        private final String amount;
        private final String paymentType;
        private final String currency;
        private final String nonce;
        private final String shopperResultUrl;
        private String defaultPaymentMethod;
        private String forceDefaultMethod;
        private String merchantInvoiceId;
        private String cancelUrl;
        private String notificationUrl;
        private String customParametersName;
        private String customerMerchantCustomerId;
        private String customerGivenName;
        private String customerSurname;
        private String customerMobile;
        private String customerEmail;
        private String customerStatus;
        private String customerBirthDate;
        private String customerIp;
        private String customerPhone;
        private String customerIdNumber;
        private String billingStreet1;
        private String billingStreet2;
        private String billingCity;
        private String billingCompany;
        private String billingCountry;
        private String billingState;
        private String billingPostcode;
        private String shippingStreet1;
        private String shippingStreet2;
        private String shippingCity;
        private String shippingCompany;
        private String shippingPostcode;
        private String shippingCountry;
        private String shippingState;
        private String cartTax;
        private String cartShippingAmount;
        private String cartDiscount;
        private String createRegistration;
        private String originator;
        private String returnTo;

        private InitiatePaymentRequestBuilder(String referer, String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl) {
            this.referer = referer;
            this.authenticationEntityId = authenticationEntityId;
            this.signature = signature;
            this.merchantTransactionId = merchantTransactionId;
            this.amount = amount;
            this.paymentType = paymentType;
            this.currency = currency;
            this.nonce = nonce;
            this.shopperResultUrl = shopperResultUrl;
        }

        /**
         * Set defaultPaymentMethod
         * @param defaultPaymentMethod The preferred payment method which is active in the checkout page at the point of redirecting. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder defaultPaymentMethod(String defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }
        
        /**
         * Set forceDefaultMethod
         * @param forceDefaultMethod Force the default payment method to be the only payment method. (optional, default to false)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder forceDefaultMethod(String forceDefaultMethod) {
            this.forceDefaultMethod = forceDefaultMethod;
            return this;
        }
        
        /**
         * Set merchantInvoiceId
         * @param merchantInvoiceId Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder merchantInvoiceId(String merchantInvoiceId) {
            this.merchantInvoiceId = merchantInvoiceId;
            return this;
        }
        
        /**
         * Set cancelUrl
         * @param cancelUrl The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder cancelUrl(String cancelUrl) {
            this.cancelUrl = cancelUrl;
            return this;
        }
        
        /**
         * Set notificationUrl
         * @param notificationUrl Override the preconfigured webhook URL for this checkout instance, any changes to checkout will send a webhook to this url. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder notificationUrl(String notificationUrl) {
            this.notificationUrl = notificationUrl;
            return this;
        }
        
        /**
         * Set customParametersName
         * @param customParametersName A name value pair used for sending custom information. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customParametersName(String customParametersName) {
            this.customParametersName = customParametersName;
            return this;
        }
        
        /**
         * Set customerMerchantCustomerId
         * @param customerMerchantCustomerId An identifier for this customer. Typically this is the ID that identifies the shopper in the shop&#39;s system. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerMerchantCustomerId(String customerMerchantCustomerId) {
            this.customerMerchantCustomerId = customerMerchantCustomerId;
            return this;
        }
        
        /**
         * Set customerGivenName
         * @param customerGivenName The customer&#39;s first name or given name.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters.  (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerGivenName(String customerGivenName) {
            this.customerGivenName = customerGivenName;
            return this;
        }
        
        /**
         * Set customerSurname
         * @param customerSurname The customer&#39;s last name or surname.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters.  (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerSurname(String customerSurname) {
            this.customerSurname = customerSurname;
            return this;
        }
        
        /**
         * Set customerMobile
         * @param customerMobile The customer&#39;s mobile number. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerMobile(String customerMobile) {
            this.customerMobile = customerMobile;
            return this;
        }
        
        /**
         * Set customerEmail
         * @param customerEmail The customer&#39;s email address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerEmail(String customerEmail) {
            this.customerEmail = customerEmail;
            return this;
        }
        
        /**
         * Set customerStatus
         * @param customerStatus The customer&#39;s status. Accepts &#x60;NEW&#x60; or &#x60;EXISTING&#x60;. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerStatus(String customerStatus) {
            this.customerStatus = customerStatus;
            return this;
        }
        
        /**
         * Set customerBirthDate
         * @param customerBirthDate The customer&#39;s birth date in the yyyy-MM-dd format. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerBirthDate(String customerBirthDate) {
            this.customerBirthDate = customerBirthDate;
            return this;
        }
        
        /**
         * Set customerIp
         * @param customerIp The customer&#39;s IP address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerIp(String customerIp) {
            this.customerIp = customerIp;
            return this;
        }
        
        /**
         * Set customerPhone
         * @param customerPhone The customer&#39;s phone number. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerPhone(String customerPhone) {
            this.customerPhone = customerPhone;
            return this;
        }
        
        /**
         * Set customerIdNumber
         * @param customerIdNumber The customer&#39;s ID number, required for high-risk merchants supporting Capitec Pay. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder customerIdNumber(String customerIdNumber) {
            this.customerIdNumber = customerIdNumber;
            return this;
        }
        
        /**
         * Set billingStreet1
         * @param billingStreet1 The door number, floor, building number, building name, and/or street name of the billing address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder billingStreet1(String billingStreet1) {
            this.billingStreet1 = billingStreet1;
            return this;
        }
        
        /**
         * Set billingStreet2
         * @param billingStreet2 The adjoining road or locality, if required, of the billing address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder billingStreet2(String billingStreet2) {
            this.billingStreet2 = billingStreet2;
            return this;
        }
        
        /**
         * Set billingCity
         * @param billingCity The town, district, or city of the billing address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder billingCity(String billingCity) {
            this.billingCity = billingCity;
            return this;
        }
        
        /**
         * Set billingCompany
         * @param billingCompany The company of the billing address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder billingCompany(String billingCompany) {
            this.billingCompany = billingCompany;
            return this;
        }
        
        /**
         * Set billingCountry
         * @param billingCountry The country of the billing address (ISO 3166-1). (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder billingCountry(String billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }
        
        /**
         * Set billingState
         * @param billingState The county, state, or region of the billing address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder billingState(String billingState) {
            this.billingState = billingState;
            return this;
        }
        
        /**
         * Set billingPostcode
         * @param billingPostcode The postal code or ZIP code of the billing address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder billingPostcode(String billingPostcode) {
            this.billingPostcode = billingPostcode;
            return this;
        }
        
        /**
         * Set shippingStreet1
         * @param shippingStreet1 The door number, floor, building number, building name, and/or street name of the shipping address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder shippingStreet1(String shippingStreet1) {
            this.shippingStreet1 = shippingStreet1;
            return this;
        }
        
        /**
         * Set shippingStreet2
         * @param shippingStreet2 The adjoining road or locality, if required, of the shipping address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder shippingStreet2(String shippingStreet2) {
            this.shippingStreet2 = shippingStreet2;
            return this;
        }
        
        /**
         * Set shippingCity
         * @param shippingCity The town, district, or city of the shipping address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder shippingCity(String shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }
        
        /**
         * Set shippingCompany
         * @param shippingCompany The company of the shipping address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder shippingCompany(String shippingCompany) {
            this.shippingCompany = shippingCompany;
            return this;
        }
        
        /**
         * Set shippingPostcode
         * @param shippingPostcode The postal code or ZIP code of the shipping address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder shippingPostcode(String shippingPostcode) {
            this.shippingPostcode = shippingPostcode;
            return this;
        }
        
        /**
         * Set shippingCountry
         * @param shippingCountry The country of the shipping address (ISO 3166-1). (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder shippingCountry(String shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }
        
        /**
         * Set shippingState
         * @param shippingState The county, state, or region of the shipping address. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder shippingState(String shippingState) {
            this.shippingState = shippingState;
            return this;
        }
        
        /**
         * Set cartTax
         * @param cartTax The tax percentage applied to the price of the item in the shopping cart. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder cartTax(String cartTax) {
            this.cartTax = cartTax;
            return this;
        }
        
        /**
         * Set cartShippingAmount
         * @param cartShippingAmount The total amount of the cart item including quantity. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder cartShippingAmount(String cartShippingAmount) {
            this.cartShippingAmount = cartShippingAmount;
            return this;
        }
        
        /**
         * Set cartDiscount
         * @param cartDiscount Discount amount applied on order amount. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder cartDiscount(String cartDiscount) {
            this.cartDiscount = cartDiscount;
            return this;
        }
        
        /**
         * Set createRegistration
         * @param createRegistration Used to enable card tokenisation with COPYandPAY. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder createRegistration(String createRegistration) {
            this.createRegistration = createRegistration;
            return this;
        }
        
        /**
         * Set originator
         * @param originator Used to provide a name for the application that is creating the checkout instance. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder originator(String originator) {
            this.originator = originator;
            return this;
        }
        
        /**
         * Set returnTo
         * @param returnTo Text to display on \\\&quot;Return to Store\\\&quot; button on completing checkout. (optional)
         * @return InitiatePaymentRequestBuilder
         */
        public InitiatePaymentRequestBuilder returnTo(String returnTo) {
            this.returnTo = returnTo;
            return this;
        }
        
        /**
         * Build call for initiatePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Checkout successfully created. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Checkout checkout = buildBodyParams();
            return initiatePaymentCall(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, checkout, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo, _callback);
        }

        private Checkout buildBodyParams() {
            Checkout checkout = new Checkout();
            checkout.authenticationEntityId(this.authenticationEntityId);
            checkout.signature(this.signature);
            checkout.merchantTransactionId(this.merchantTransactionId);
            checkout.amount(this.amount);
            if (this.paymentType != null)
            checkout.paymentType(Checkout.PaymentTypeEnum.fromValue(this.paymentType));
            if (this.currency != null)
            checkout.currency(Checkout.CurrencyEnum.fromValue(this.currency));
            checkout.nonce(this.nonce);
            checkout.shopperResultUrl(this.shopperResultUrl);
            if (this.defaultPaymentMethod != null)
            checkout.defaultPaymentMethod(Checkout.DefaultPaymentMethodEnum.fromValue(this.defaultPaymentMethod));
            if (this.forceDefaultMethod != null)
            checkout.forceDefaultMethod(Checkout.ForceDefaultMethodEnum.fromValue(this.forceDefaultMethod));
            checkout.merchantInvoiceId(this.merchantInvoiceId);
            checkout.cancelUrl(this.cancelUrl);
            checkout.notificationUrl(this.notificationUrl);
            checkout.customParametersName(this.customParametersName);
            checkout.customerMerchantCustomerId(this.customerMerchantCustomerId);
            checkout.customerGivenName(this.customerGivenName);
            checkout.customerSurname(this.customerSurname);
            checkout.customerMobile(this.customerMobile);
            checkout.customerEmail(this.customerEmail);
            if (this.customerStatus != null)
            checkout.customerStatus(Checkout.CustomerStatusEnum.fromValue(this.customerStatus));
            checkout.customerBirthDate(this.customerBirthDate);
            checkout.customerIp(this.customerIp);
            checkout.customerPhone(this.customerPhone);
            checkout.customerIdNumber(this.customerIdNumber);
            checkout.billingStreet1(this.billingStreet1);
            checkout.billingStreet2(this.billingStreet2);
            checkout.billingCity(this.billingCity);
            checkout.billingCompany(this.billingCompany);
            checkout.billingCountry(this.billingCountry);
            checkout.billingState(this.billingState);
            checkout.billingPostcode(this.billingPostcode);
            checkout.shippingStreet1(this.shippingStreet1);
            checkout.shippingStreet2(this.shippingStreet2);
            checkout.shippingCity(this.shippingCity);
            checkout.shippingCompany(this.shippingCompany);
            checkout.shippingPostcode(this.shippingPostcode);
            checkout.shippingCountry(this.shippingCountry);
            checkout.shippingState(this.shippingState);
            checkout.cartTax(this.cartTax);
            checkout.cartShippingAmount(this.cartShippingAmount);
            checkout.cartDiscount(this.cartDiscount);
            if (this.createRegistration != null)
            checkout.createRegistration(Checkout.CreateRegistrationEnum.fromValue(this.createRegistration));
            checkout.originator(this.originator);
            if (this.returnTo != null)
            checkout.returnTo(Checkout.ReturnToEnum.fromValue(this.returnTo));
            return checkout;
        }

        /**
         * Execute initiatePayment request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Checkout successfully created. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Checkout checkout = buildBodyParams();
            ApiResponse<String> localVarResp = initiatePaymentWithHttpInfo(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, checkout, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initiatePayment request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Checkout successfully created. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Checkout checkout = buildBodyParams();
            return initiatePaymentWithHttpInfo(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, checkout, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo);
        }

        /**
         * Execute initiatePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Checkout successfully created. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Checkout checkout = buildBodyParams();
            return initiatePaymentAsync(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, checkout, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo, _callback);
        }
    }

    /**
     * Initiate Checkout
     * Load the Checkout frontend to complete a payment. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends.  Sign the data on the backend and execute the POST from the browser.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#form-post-checkout). 
     * @param referer An allowlisted domain for the merchant. (required)
     * @param authenticationEntityId The entity for the request. By default, this is the channel ID. (required)
     * @param signature Token to verify the integrity of the payment, ensuring that only the merchant sending the request is accepted. (required)
     * @param merchantTransactionId Merchant-provided reference number unique for your transactions. (required)
     * @param amount The amount of the payment request. The period is used as the decimal separator. M-PESA does not support decimal amounts, so Checkout automatically rounds them up. (required)
     * @param paymentType The payment type for the request. Accepts &#x60;DB&#x60;.  Does not accept &#x60;RG&#x60;, but you can tokenise a card by performing a DB with &#x60;createRegistration&#x60;.  Refund transactions through the Dashboard or as described in the &lt;a href&#x3D;\\\&quot;https://developer.peachpayments.com/docs/checkout-refund\\\&quot; target&#x3D;\\\&quot;_blank\\\&quot;&gt;documentation&lt;/a&gt;.  (required)
     * @param currency The currency code of the payment request amount. (required)
     * @param nonce Unique value to represent each request. (required)
     * @param shopperResultUrl Checkout uses a POST request to redirect the customer to this URL after the customer completes checkout. Must be a valid URL that can be accessed through a browser. (required)
     * @param checkout  (required)
     * @return InitiatePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Checkout successfully created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InitiatePaymentRequestBuilder initiatePayment(String referer, String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl) throws IllegalArgumentException {
        if (referer == null) throw new IllegalArgumentException("\"referer\" is required but got null");
            

        if (authenticationEntityId == null) throw new IllegalArgumentException("\"authenticationEntityId\" is required but got null");
            

        if (signature == null) throw new IllegalArgumentException("\"signature\" is required but got null");
            

        if (merchantTransactionId == null) throw new IllegalArgumentException("\"merchantTransactionId\" is required but got null");
            if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
              throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
            }

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
            

        if (paymentType == null) throw new IllegalArgumentException("\"paymentType\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (nonce == null) throw new IllegalArgumentException("\"nonce\" is required but got null");
            

        if (shopperResultUrl == null) throw new IllegalArgumentException("\"shopperResultUrl\" is required but got null");
            

        return new InitiatePaymentRequestBuilder(referer, authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl);
    }
    private okhttp3.Call initiateRedirectCheckoutCall(String referer, Checkout checkout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkout;

        // create path and map variables
        String localVarPath = "/checkout/initiate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateRedirectCheckoutValidateBeforeCall(String referer, Checkout checkout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling initiateRedirectCheckout(Async)");
        }

        // verify the required parameter 'checkout' is set
        if (checkout == null) {
            throw new ApiException("Missing the required parameter 'checkout' when calling initiateRedirectCheckout(Async)");
        }

        return initiateRedirectCheckoutCall(referer, checkout, _callback);

    }


    private ApiResponse<CheckoutGenerationInitiateRedirectCheckoutResponse> initiateRedirectCheckoutWithHttpInfo(String referer, Checkout checkout) throws ApiException {
        okhttp3.Call localVarCall = initiateRedirectCheckoutValidateBeforeCall(referer, checkout, null);
        Type localVarReturnType = new TypeToken<CheckoutGenerationInitiateRedirectCheckoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initiateRedirectCheckoutAsync(String referer, Checkout checkout, final ApiCallback<CheckoutGenerationInitiateRedirectCheckoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateRedirectCheckoutValidateBeforeCall(referer, checkout, _callback);
        Type localVarReturnType = new TypeToken<CheckoutGenerationInitiateRedirectCheckoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitiateRedirectCheckoutRequestBuilder {
        private final String authenticationEntityId;
        private final String signature;
        private final String merchantTransactionId;
        private final String amount;
        private final String paymentType;
        private final String currency;
        private final String nonce;
        private final String shopperResultUrl;
        private final String referer;
        private String defaultPaymentMethod;
        private String forceDefaultMethod;
        private String merchantInvoiceId;
        private String cancelUrl;
        private String notificationUrl;
        private String customParametersName;
        private String customerMerchantCustomerId;
        private String customerGivenName;
        private String customerSurname;
        private String customerMobile;
        private String customerEmail;
        private String customerStatus;
        private String customerBirthDate;
        private String customerIp;
        private String customerPhone;
        private String customerIdNumber;
        private String billingStreet1;
        private String billingStreet2;
        private String billingCity;
        private String billingCompany;
        private String billingCountry;
        private String billingState;
        private String billingPostcode;
        private String shippingStreet1;
        private String shippingStreet2;
        private String shippingCity;
        private String shippingCompany;
        private String shippingPostcode;
        private String shippingCountry;
        private String shippingState;
        private String cartTax;
        private String cartShippingAmount;
        private String cartDiscount;
        private String createRegistration;
        private String originator;
        private String returnTo;

        private InitiateRedirectCheckoutRequestBuilder(String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, String referer) {
            this.authenticationEntityId = authenticationEntityId;
            this.signature = signature;
            this.merchantTransactionId = merchantTransactionId;
            this.amount = amount;
            this.paymentType = paymentType;
            this.currency = currency;
            this.nonce = nonce;
            this.shopperResultUrl = shopperResultUrl;
            this.referer = referer;
        }

        /**
         * Set defaultPaymentMethod
         * @param defaultPaymentMethod The preferred payment method which is active in the checkout page at the point of redirecting. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder defaultPaymentMethod(String defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }
        
        /**
         * Set forceDefaultMethod
         * @param forceDefaultMethod Force the default payment method to be the only payment method. (optional, default to false)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder forceDefaultMethod(String forceDefaultMethod) {
            this.forceDefaultMethod = forceDefaultMethod;
            return this;
        }
        
        /**
         * Set merchantInvoiceId
         * @param merchantInvoiceId Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder merchantInvoiceId(String merchantInvoiceId) {
            this.merchantInvoiceId = merchantInvoiceId;
            return this;
        }
        
        /**
         * Set cancelUrl
         * @param cancelUrl The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder cancelUrl(String cancelUrl) {
            this.cancelUrl = cancelUrl;
            return this;
        }
        
        /**
         * Set notificationUrl
         * @param notificationUrl Override the preconfigured webhook URL for this checkout instance, any changes to checkout will send a webhook to this url. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder notificationUrl(String notificationUrl) {
            this.notificationUrl = notificationUrl;
            return this;
        }
        
        /**
         * Set customParametersName
         * @param customParametersName A name value pair used for sending custom information. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customParametersName(String customParametersName) {
            this.customParametersName = customParametersName;
            return this;
        }
        
        /**
         * Set customerMerchantCustomerId
         * @param customerMerchantCustomerId An identifier for this customer. Typically this is the ID that identifies the shopper in the shop&#39;s system. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerMerchantCustomerId(String customerMerchantCustomerId) {
            this.customerMerchantCustomerId = customerMerchantCustomerId;
            return this;
        }
        
        /**
         * Set customerGivenName
         * @param customerGivenName The customer&#39;s first name or given name.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters.  (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerGivenName(String customerGivenName) {
            this.customerGivenName = customerGivenName;
            return this;
        }
        
        /**
         * Set customerSurname
         * @param customerSurname The customer&#39;s last name or surname.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters.  (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerSurname(String customerSurname) {
            this.customerSurname = customerSurname;
            return this;
        }
        
        /**
         * Set customerMobile
         * @param customerMobile The customer&#39;s mobile number. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerMobile(String customerMobile) {
            this.customerMobile = customerMobile;
            return this;
        }
        
        /**
         * Set customerEmail
         * @param customerEmail The customer&#39;s email address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerEmail(String customerEmail) {
            this.customerEmail = customerEmail;
            return this;
        }
        
        /**
         * Set customerStatus
         * @param customerStatus The customer&#39;s status. Accepts &#x60;NEW&#x60; or &#x60;EXISTING&#x60;. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerStatus(String customerStatus) {
            this.customerStatus = customerStatus;
            return this;
        }
        
        /**
         * Set customerBirthDate
         * @param customerBirthDate The customer&#39;s birth date in the yyyy-MM-dd format. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerBirthDate(String customerBirthDate) {
            this.customerBirthDate = customerBirthDate;
            return this;
        }
        
        /**
         * Set customerIp
         * @param customerIp The customer&#39;s IP address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerIp(String customerIp) {
            this.customerIp = customerIp;
            return this;
        }
        
        /**
         * Set customerPhone
         * @param customerPhone The customer&#39;s phone number. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerPhone(String customerPhone) {
            this.customerPhone = customerPhone;
            return this;
        }
        
        /**
         * Set customerIdNumber
         * @param customerIdNumber The customer&#39;s ID number, required for high-risk merchants supporting Capitec Pay. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder customerIdNumber(String customerIdNumber) {
            this.customerIdNumber = customerIdNumber;
            return this;
        }
        
        /**
         * Set billingStreet1
         * @param billingStreet1 The door number, floor, building number, building name, and/or street name of the billing address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder billingStreet1(String billingStreet1) {
            this.billingStreet1 = billingStreet1;
            return this;
        }
        
        /**
         * Set billingStreet2
         * @param billingStreet2 The adjoining road or locality, if required, of the billing address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder billingStreet2(String billingStreet2) {
            this.billingStreet2 = billingStreet2;
            return this;
        }
        
        /**
         * Set billingCity
         * @param billingCity The town, district, or city of the billing address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder billingCity(String billingCity) {
            this.billingCity = billingCity;
            return this;
        }
        
        /**
         * Set billingCompany
         * @param billingCompany The company of the billing address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder billingCompany(String billingCompany) {
            this.billingCompany = billingCompany;
            return this;
        }
        
        /**
         * Set billingCountry
         * @param billingCountry The country of the billing address (ISO 3166-1). (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder billingCountry(String billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }
        
        /**
         * Set billingState
         * @param billingState The county, state, or region of the billing address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder billingState(String billingState) {
            this.billingState = billingState;
            return this;
        }
        
        /**
         * Set billingPostcode
         * @param billingPostcode The postal code or ZIP code of the billing address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder billingPostcode(String billingPostcode) {
            this.billingPostcode = billingPostcode;
            return this;
        }
        
        /**
         * Set shippingStreet1
         * @param shippingStreet1 The door number, floor, building number, building name, and/or street name of the shipping address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder shippingStreet1(String shippingStreet1) {
            this.shippingStreet1 = shippingStreet1;
            return this;
        }
        
        /**
         * Set shippingStreet2
         * @param shippingStreet2 The adjoining road or locality, if required, of the shipping address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder shippingStreet2(String shippingStreet2) {
            this.shippingStreet2 = shippingStreet2;
            return this;
        }
        
        /**
         * Set shippingCity
         * @param shippingCity The town, district, or city of the shipping address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder shippingCity(String shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }
        
        /**
         * Set shippingCompany
         * @param shippingCompany The company of the shipping address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder shippingCompany(String shippingCompany) {
            this.shippingCompany = shippingCompany;
            return this;
        }
        
        /**
         * Set shippingPostcode
         * @param shippingPostcode The postal code or ZIP code of the shipping address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder shippingPostcode(String shippingPostcode) {
            this.shippingPostcode = shippingPostcode;
            return this;
        }
        
        /**
         * Set shippingCountry
         * @param shippingCountry The country of the shipping address (ISO 3166-1). (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder shippingCountry(String shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }
        
        /**
         * Set shippingState
         * @param shippingState The county, state, or region of the shipping address. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder shippingState(String shippingState) {
            this.shippingState = shippingState;
            return this;
        }
        
        /**
         * Set cartTax
         * @param cartTax The tax percentage applied to the price of the item in the shopping cart. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder cartTax(String cartTax) {
            this.cartTax = cartTax;
            return this;
        }
        
        /**
         * Set cartShippingAmount
         * @param cartShippingAmount The total amount of the cart item including quantity. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder cartShippingAmount(String cartShippingAmount) {
            this.cartShippingAmount = cartShippingAmount;
            return this;
        }
        
        /**
         * Set cartDiscount
         * @param cartDiscount Discount amount applied on order amount. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder cartDiscount(String cartDiscount) {
            this.cartDiscount = cartDiscount;
            return this;
        }
        
        /**
         * Set createRegistration
         * @param createRegistration Used to enable card tokenisation with COPYandPAY. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder createRegistration(String createRegistration) {
            this.createRegistration = createRegistration;
            return this;
        }
        
        /**
         * Set originator
         * @param originator Used to provide a name for the application that is creating the checkout instance. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder originator(String originator) {
            this.originator = originator;
            return this;
        }
        
        /**
         * Set returnTo
         * @param returnTo Text to display on \\\&quot;Return to Store\\\&quot; button on completing checkout. (optional)
         * @return InitiateRedirectCheckoutRequestBuilder
         */
        public InitiateRedirectCheckoutRequestBuilder returnTo(String returnTo) {
            this.returnTo = returnTo;
            return this;
        }
        
        /**
         * Build call for initiateRedirectCheckout
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Checkout checkout = buildBodyParams();
            return initiateRedirectCheckoutCall(referer, checkout, _callback);
        }

        private Checkout buildBodyParams() {
            Checkout checkout = new Checkout();
            checkout.authenticationEntityId(this.authenticationEntityId);
            checkout.signature(this.signature);
            checkout.merchantTransactionId(this.merchantTransactionId);
            checkout.amount(this.amount);
            if (this.paymentType != null)
            checkout.paymentType(Checkout.PaymentTypeEnum.fromValue(this.paymentType));
            if (this.currency != null)
            checkout.currency(Checkout.CurrencyEnum.fromValue(this.currency));
            checkout.nonce(this.nonce);
            checkout.shopperResultUrl(this.shopperResultUrl);
            if (this.defaultPaymentMethod != null)
            checkout.defaultPaymentMethod(Checkout.DefaultPaymentMethodEnum.fromValue(this.defaultPaymentMethod));
            if (this.forceDefaultMethod != null)
            checkout.forceDefaultMethod(Checkout.ForceDefaultMethodEnum.fromValue(this.forceDefaultMethod));
            checkout.merchantInvoiceId(this.merchantInvoiceId);
            checkout.cancelUrl(this.cancelUrl);
            checkout.notificationUrl(this.notificationUrl);
            checkout.customParametersName(this.customParametersName);
            checkout.customerMerchantCustomerId(this.customerMerchantCustomerId);
            checkout.customerGivenName(this.customerGivenName);
            checkout.customerSurname(this.customerSurname);
            checkout.customerMobile(this.customerMobile);
            checkout.customerEmail(this.customerEmail);
            if (this.customerStatus != null)
            checkout.customerStatus(Checkout.CustomerStatusEnum.fromValue(this.customerStatus));
            checkout.customerBirthDate(this.customerBirthDate);
            checkout.customerIp(this.customerIp);
            checkout.customerPhone(this.customerPhone);
            checkout.customerIdNumber(this.customerIdNumber);
            checkout.billingStreet1(this.billingStreet1);
            checkout.billingStreet2(this.billingStreet2);
            checkout.billingCity(this.billingCity);
            checkout.billingCompany(this.billingCompany);
            checkout.billingCountry(this.billingCountry);
            checkout.billingState(this.billingState);
            checkout.billingPostcode(this.billingPostcode);
            checkout.shippingStreet1(this.shippingStreet1);
            checkout.shippingStreet2(this.shippingStreet2);
            checkout.shippingCity(this.shippingCity);
            checkout.shippingCompany(this.shippingCompany);
            checkout.shippingPostcode(this.shippingPostcode);
            checkout.shippingCountry(this.shippingCountry);
            checkout.shippingState(this.shippingState);
            checkout.cartTax(this.cartTax);
            checkout.cartShippingAmount(this.cartShippingAmount);
            checkout.cartDiscount(this.cartDiscount);
            if (this.createRegistration != null)
            checkout.createRegistration(Checkout.CreateRegistrationEnum.fromValue(this.createRegistration));
            checkout.originator(this.originator);
            if (this.returnTo != null)
            checkout.returnTo(Checkout.ReturnToEnum.fromValue(this.returnTo));
            return checkout;
        }

        /**
         * Execute initiateRedirectCheckout request
         * @return CheckoutGenerationInitiateRedirectCheckoutResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public CheckoutGenerationInitiateRedirectCheckoutResponse execute() throws ApiException {
            Checkout checkout = buildBodyParams();
            ApiResponse<CheckoutGenerationInitiateRedirectCheckoutResponse> localVarResp = initiateRedirectCheckoutWithHttpInfo(referer, checkout);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initiateRedirectCheckout request with HTTP info returned
         * @return ApiResponse&lt;CheckoutGenerationInitiateRedirectCheckoutResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckoutGenerationInitiateRedirectCheckoutResponse> executeWithHttpInfo() throws ApiException {
            Checkout checkout = buildBodyParams();
            return initiateRedirectCheckoutWithHttpInfo(referer, checkout);
        }

        /**
         * Execute initiateRedirectCheckout request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Request processed successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckoutGenerationInitiateRedirectCheckoutResponse> _callback) throws ApiException {
            Checkout checkout = buildBodyParams();
            return initiateRedirectCheckoutAsync(referer, checkout, _callback);
        }
    }

    /**
     * Initiate redirect-based Checkout
     * Provide a redirect URL to the caller to redirect the user into the Checkout experience. The POST request contains the entityId, signature, purchase parameters, and any custom parameters that a merchant optionally sends. This allows the checkout instance to be created from a backend without requiring a \&quot;form post\&quot;, or other similar method, from the frontend.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment#redirect-based-checkout). 
     * @param referer An allowlisted domain for the merchant. (required)
     * @param checkout  (required)
     * @return InitiateRedirectCheckoutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Request processed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid authentication information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public InitiateRedirectCheckoutRequestBuilder initiateRedirectCheckout(String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, String referer) throws IllegalArgumentException {
        if (authenticationEntityId == null) throw new IllegalArgumentException("\"authenticationEntityId\" is required but got null");
            

        if (signature == null) throw new IllegalArgumentException("\"signature\" is required but got null");
            

        if (merchantTransactionId == null) throw new IllegalArgumentException("\"merchantTransactionId\" is required but got null");
            if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
              throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
            }

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
            

        if (paymentType == null) throw new IllegalArgumentException("\"paymentType\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (nonce == null) throw new IllegalArgumentException("\"nonce\" is required but got null");
            

        if (shopperResultUrl == null) throw new IllegalArgumentException("\"shopperResultUrl\" is required but got null");
            

        if (referer == null) throw new IllegalArgumentException("\"referer\" is required but got null");
            

        return new InitiateRedirectCheckoutRequestBuilder(authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, referer);
    }
    private okhttp3.Call validateRequestCall(String referer, Checkout checkout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkout;

        // create path and map variables
        String localVarPath = "/checkout/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateRequestValidateBeforeCall(String referer, Checkout checkout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling validateRequest(Async)");
        }

        // verify the required parameter 'checkout' is set
        if (checkout == null) {
            throw new ApiException("Missing the required parameter 'checkout' when calling validateRequest(Async)");
        }

        return validateRequestCall(referer, checkout, _callback);

    }


    private ApiResponse<MessageResponse> validateRequestWithHttpInfo(String referer, Checkout checkout) throws ApiException {
        okhttp3.Call localVarCall = validateRequestValidateBeforeCall(referer, checkout, null);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateRequestAsync(String referer, Checkout checkout, final ApiCallback<MessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateRequestValidateBeforeCall(referer, checkout, _callback);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateRequestRequestBuilder {
        private final String authenticationEntityId;
        private final String signature;
        private final String merchantTransactionId;
        private final String amount;
        private final String paymentType;
        private final String currency;
        private final String nonce;
        private final String shopperResultUrl;
        private final String referer;
        private String defaultPaymentMethod;
        private String forceDefaultMethod;
        private String merchantInvoiceId;
        private String cancelUrl;
        private String notificationUrl;
        private String customParametersName;
        private String customerMerchantCustomerId;
        private String customerGivenName;
        private String customerSurname;
        private String customerMobile;
        private String customerEmail;
        private String customerStatus;
        private String customerBirthDate;
        private String customerIp;
        private String customerPhone;
        private String customerIdNumber;
        private String billingStreet1;
        private String billingStreet2;
        private String billingCity;
        private String billingCompany;
        private String billingCountry;
        private String billingState;
        private String billingPostcode;
        private String shippingStreet1;
        private String shippingStreet2;
        private String shippingCity;
        private String shippingCompany;
        private String shippingPostcode;
        private String shippingCountry;
        private String shippingState;
        private String cartTax;
        private String cartShippingAmount;
        private String cartDiscount;
        private String createRegistration;
        private String originator;
        private String returnTo;

        private ValidateRequestRequestBuilder(String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, String referer) {
            this.authenticationEntityId = authenticationEntityId;
            this.signature = signature;
            this.merchantTransactionId = merchantTransactionId;
            this.amount = amount;
            this.paymentType = paymentType;
            this.currency = currency;
            this.nonce = nonce;
            this.shopperResultUrl = shopperResultUrl;
            this.referer = referer;
        }

        /**
         * Set defaultPaymentMethod
         * @param defaultPaymentMethod The preferred payment method which is active in the checkout page at the point of redirecting. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder defaultPaymentMethod(String defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }
        
        /**
         * Set forceDefaultMethod
         * @param forceDefaultMethod Force the default payment method to be the only payment method. (optional, default to false)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder forceDefaultMethod(String forceDefaultMethod) {
            this.forceDefaultMethod = forceDefaultMethod;
            return this;
        }
        
        /**
         * Set merchantInvoiceId
         * @param merchantInvoiceId Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder merchantInvoiceId(String merchantInvoiceId) {
            this.merchantInvoiceId = merchantInvoiceId;
            return this;
        }
        
        /**
         * Set cancelUrl
         * @param cancelUrl The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder cancelUrl(String cancelUrl) {
            this.cancelUrl = cancelUrl;
            return this;
        }
        
        /**
         * Set notificationUrl
         * @param notificationUrl Override the preconfigured webhook URL for this checkout instance, any changes to checkout will send a webhook to this url. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder notificationUrl(String notificationUrl) {
            this.notificationUrl = notificationUrl;
            return this;
        }
        
        /**
         * Set customParametersName
         * @param customParametersName A name value pair used for sending custom information. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customParametersName(String customParametersName) {
            this.customParametersName = customParametersName;
            return this;
        }
        
        /**
         * Set customerMerchantCustomerId
         * @param customerMerchantCustomerId An identifier for this customer. Typically this is the ID that identifies the shopper in the shop&#39;s system. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerMerchantCustomerId(String customerMerchantCustomerId) {
            this.customerMerchantCustomerId = customerMerchantCustomerId;
            return this;
        }
        
        /**
         * Set customerGivenName
         * @param customerGivenName The customer&#39;s first name or given name.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters.  (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerGivenName(String customerGivenName) {
            this.customerGivenName = customerGivenName;
            return this;
        }
        
        /**
         * Set customerSurname
         * @param customerSurname The customer&#39;s last name or surname.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters.  (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerSurname(String customerSurname) {
            this.customerSurname = customerSurname;
            return this;
        }
        
        /**
         * Set customerMobile
         * @param customerMobile The customer&#39;s mobile number. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerMobile(String customerMobile) {
            this.customerMobile = customerMobile;
            return this;
        }
        
        /**
         * Set customerEmail
         * @param customerEmail The customer&#39;s email address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerEmail(String customerEmail) {
            this.customerEmail = customerEmail;
            return this;
        }
        
        /**
         * Set customerStatus
         * @param customerStatus The customer&#39;s status. Accepts &#x60;NEW&#x60; or &#x60;EXISTING&#x60;. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerStatus(String customerStatus) {
            this.customerStatus = customerStatus;
            return this;
        }
        
        /**
         * Set customerBirthDate
         * @param customerBirthDate The customer&#39;s birth date in the yyyy-MM-dd format. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerBirthDate(String customerBirthDate) {
            this.customerBirthDate = customerBirthDate;
            return this;
        }
        
        /**
         * Set customerIp
         * @param customerIp The customer&#39;s IP address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerIp(String customerIp) {
            this.customerIp = customerIp;
            return this;
        }
        
        /**
         * Set customerPhone
         * @param customerPhone The customer&#39;s phone number. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerPhone(String customerPhone) {
            this.customerPhone = customerPhone;
            return this;
        }
        
        /**
         * Set customerIdNumber
         * @param customerIdNumber The customer&#39;s ID number, required for high-risk merchants supporting Capitec Pay. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder customerIdNumber(String customerIdNumber) {
            this.customerIdNumber = customerIdNumber;
            return this;
        }
        
        /**
         * Set billingStreet1
         * @param billingStreet1 The door number, floor, building number, building name, and/or street name of the billing address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder billingStreet1(String billingStreet1) {
            this.billingStreet1 = billingStreet1;
            return this;
        }
        
        /**
         * Set billingStreet2
         * @param billingStreet2 The adjoining road or locality, if required, of the billing address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder billingStreet2(String billingStreet2) {
            this.billingStreet2 = billingStreet2;
            return this;
        }
        
        /**
         * Set billingCity
         * @param billingCity The town, district, or city of the billing address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder billingCity(String billingCity) {
            this.billingCity = billingCity;
            return this;
        }
        
        /**
         * Set billingCompany
         * @param billingCompany The company of the billing address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder billingCompany(String billingCompany) {
            this.billingCompany = billingCompany;
            return this;
        }
        
        /**
         * Set billingCountry
         * @param billingCountry The country of the billing address (ISO 3166-1). (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder billingCountry(String billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }
        
        /**
         * Set billingState
         * @param billingState The county, state, or region of the billing address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder billingState(String billingState) {
            this.billingState = billingState;
            return this;
        }
        
        /**
         * Set billingPostcode
         * @param billingPostcode The postal code or ZIP code of the billing address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder billingPostcode(String billingPostcode) {
            this.billingPostcode = billingPostcode;
            return this;
        }
        
        /**
         * Set shippingStreet1
         * @param shippingStreet1 The door number, floor, building number, building name, and/or street name of the shipping address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder shippingStreet1(String shippingStreet1) {
            this.shippingStreet1 = shippingStreet1;
            return this;
        }
        
        /**
         * Set shippingStreet2
         * @param shippingStreet2 The adjoining road or locality, if required, of the shipping address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder shippingStreet2(String shippingStreet2) {
            this.shippingStreet2 = shippingStreet2;
            return this;
        }
        
        /**
         * Set shippingCity
         * @param shippingCity The town, district, or city of the shipping address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder shippingCity(String shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }
        
        /**
         * Set shippingCompany
         * @param shippingCompany The company of the shipping address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder shippingCompany(String shippingCompany) {
            this.shippingCompany = shippingCompany;
            return this;
        }
        
        /**
         * Set shippingPostcode
         * @param shippingPostcode The postal code or ZIP code of the shipping address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder shippingPostcode(String shippingPostcode) {
            this.shippingPostcode = shippingPostcode;
            return this;
        }
        
        /**
         * Set shippingCountry
         * @param shippingCountry The country of the shipping address (ISO 3166-1). (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder shippingCountry(String shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }
        
        /**
         * Set shippingState
         * @param shippingState The county, state, or region of the shipping address. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder shippingState(String shippingState) {
            this.shippingState = shippingState;
            return this;
        }
        
        /**
         * Set cartTax
         * @param cartTax The tax percentage applied to the price of the item in the shopping cart. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder cartTax(String cartTax) {
            this.cartTax = cartTax;
            return this;
        }
        
        /**
         * Set cartShippingAmount
         * @param cartShippingAmount The total amount of the cart item including quantity. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder cartShippingAmount(String cartShippingAmount) {
            this.cartShippingAmount = cartShippingAmount;
            return this;
        }
        
        /**
         * Set cartDiscount
         * @param cartDiscount Discount amount applied on order amount. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder cartDiscount(String cartDiscount) {
            this.cartDiscount = cartDiscount;
            return this;
        }
        
        /**
         * Set createRegistration
         * @param createRegistration Used to enable card tokenisation with COPYandPAY. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder createRegistration(String createRegistration) {
            this.createRegistration = createRegistration;
            return this;
        }
        
        /**
         * Set originator
         * @param originator Used to provide a name for the application that is creating the checkout instance. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder originator(String originator) {
            this.originator = originator;
            return this;
        }
        
        /**
         * Set returnTo
         * @param returnTo Text to display on \\\&quot;Return to Store\\\&quot; button on completing checkout. (optional)
         * @return ValidateRequestRequestBuilder
         */
        public ValidateRequestRequestBuilder returnTo(String returnTo) {
            this.returnTo = returnTo;
            return this;
        }
        
        /**
         * Build call for validateRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Valid request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Checkout checkout = buildBodyParams();
            return validateRequestCall(referer, checkout, _callback);
        }

        private Checkout buildBodyParams() {
            Checkout checkout = new Checkout();
            checkout.authenticationEntityId(this.authenticationEntityId);
            checkout.signature(this.signature);
            checkout.merchantTransactionId(this.merchantTransactionId);
            checkout.amount(this.amount);
            if (this.paymentType != null)
            checkout.paymentType(Checkout.PaymentTypeEnum.fromValue(this.paymentType));
            if (this.currency != null)
            checkout.currency(Checkout.CurrencyEnum.fromValue(this.currency));
            checkout.nonce(this.nonce);
            checkout.shopperResultUrl(this.shopperResultUrl);
            if (this.defaultPaymentMethod != null)
            checkout.defaultPaymentMethod(Checkout.DefaultPaymentMethodEnum.fromValue(this.defaultPaymentMethod));
            if (this.forceDefaultMethod != null)
            checkout.forceDefaultMethod(Checkout.ForceDefaultMethodEnum.fromValue(this.forceDefaultMethod));
            checkout.merchantInvoiceId(this.merchantInvoiceId);
            checkout.cancelUrl(this.cancelUrl);
            checkout.notificationUrl(this.notificationUrl);
            checkout.customParametersName(this.customParametersName);
            checkout.customerMerchantCustomerId(this.customerMerchantCustomerId);
            checkout.customerGivenName(this.customerGivenName);
            checkout.customerSurname(this.customerSurname);
            checkout.customerMobile(this.customerMobile);
            checkout.customerEmail(this.customerEmail);
            if (this.customerStatus != null)
            checkout.customerStatus(Checkout.CustomerStatusEnum.fromValue(this.customerStatus));
            checkout.customerBirthDate(this.customerBirthDate);
            checkout.customerIp(this.customerIp);
            checkout.customerPhone(this.customerPhone);
            checkout.customerIdNumber(this.customerIdNumber);
            checkout.billingStreet1(this.billingStreet1);
            checkout.billingStreet2(this.billingStreet2);
            checkout.billingCity(this.billingCity);
            checkout.billingCompany(this.billingCompany);
            checkout.billingCountry(this.billingCountry);
            checkout.billingState(this.billingState);
            checkout.billingPostcode(this.billingPostcode);
            checkout.shippingStreet1(this.shippingStreet1);
            checkout.shippingStreet2(this.shippingStreet2);
            checkout.shippingCity(this.shippingCity);
            checkout.shippingCompany(this.shippingCompany);
            checkout.shippingPostcode(this.shippingPostcode);
            checkout.shippingCountry(this.shippingCountry);
            checkout.shippingState(this.shippingState);
            checkout.cartTax(this.cartTax);
            checkout.cartShippingAmount(this.cartShippingAmount);
            checkout.cartDiscount(this.cartDiscount);
            if (this.createRegistration != null)
            checkout.createRegistration(Checkout.CreateRegistrationEnum.fromValue(this.createRegistration));
            checkout.originator(this.originator);
            if (this.returnTo != null)
            checkout.returnTo(Checkout.ReturnToEnum.fromValue(this.returnTo));
            return checkout;
        }

        /**
         * Execute validateRequest request
         * @return MessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Valid request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public MessageResponse execute() throws ApiException {
            Checkout checkout = buildBodyParams();
            ApiResponse<MessageResponse> localVarResp = validateRequestWithHttpInfo(referer, checkout);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateRequest request with HTTP info returned
         * @return ApiResponse&lt;MessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Valid request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageResponse> executeWithHttpInfo() throws ApiException {
            Checkout checkout = buildBodyParams();
            return validateRequestWithHttpInfo(referer, checkout);
        }

        /**
         * Execute validateRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Valid request. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageResponse> _callback) throws ApiException {
            Checkout checkout = buildBodyParams();
            return validateRequestAsync(referer, checkout, _callback);
        }
    }

    /**
     * Validate Checkout request
     * Validate a request before trying to initiate a checkout session.
     * @param referer An allowlisted domain for the merchant. (required)
     * @param checkout  (required)
     * @return ValidateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid request. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateRequestRequestBuilder validateRequest(String authenticationEntityId, String signature, String merchantTransactionId, String amount, String paymentType, String currency, String nonce, String shopperResultUrl, String referer) throws IllegalArgumentException {
        if (authenticationEntityId == null) throw new IllegalArgumentException("\"authenticationEntityId\" is required but got null");
            

        if (signature == null) throw new IllegalArgumentException("\"signature\" is required but got null");
            

        if (merchantTransactionId == null) throw new IllegalArgumentException("\"merchantTransactionId\" is required but got null");
            if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
              throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
            }

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
            

        if (paymentType == null) throw new IllegalArgumentException("\"paymentType\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (nonce == null) throw new IllegalArgumentException("\"nonce\" is required but got null");
            

        if (shopperResultUrl == null) throw new IllegalArgumentException("\"shopperResultUrl\" is required but got null");
            

        if (referer == null) throw new IllegalArgumentException("\"referer\" is required but got null");
            

        return new ValidateRequestRequestBuilder(authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, referer);
    }
}

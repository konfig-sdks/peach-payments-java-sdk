/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CheckoutOptions;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.GenerateLinkPayment;
import com.konfigthis.client.model.GenerateLinkPaymentPayment;
import com.konfigthis.client.model.GenerateLinkResponse;
import com.konfigthis.client.model.MessageResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PaymentGetAllPaymentLinks200Response;
import com.konfigthis.client.model.PaymentGetAllPaymentLinksResponse;
import com.konfigthis.client.model.PaymentOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelLinkCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/payments/{paymentId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelLinkValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling cancelLink(Async)");
        }

        return cancelLinkCall(paymentId, _callback);

    }


    private ApiResponse<MessageResponse> cancelLinkWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = cancelLinkValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelLinkAsync(String paymentId, final ApiCallback<MessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelLinkValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<MessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelLinkRequestBuilder {
        private final String paymentId;

        private CancelLinkRequestBuilder(String paymentId) {
            this.paymentId = paymentId;
        }

        /**
         * Build call for cancelLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelLinkCall(paymentId, _callback);
        }


        /**
         * Execute cancelLink request
         * @return MessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public MessageResponse execute() throws ApiException {
            ApiResponse<MessageResponse> localVarResp = cancelLinkWithHttpInfo(paymentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelLink request with HTTP info returned
         * @return ApiResponse&lt;MessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageResponse> executeWithHttpInfo() throws ApiException {
            return cancelLinkWithHttpInfo(paymentId);
        }

        /**
         * Execute cancelLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageResponse> _callback) throws ApiException {
            return cancelLinkAsync(paymentId, _callback);
        }
    }

    /**
     * Cancel link
     * Cancel a previously-generated link by supplying the unique paymentId which is returned to you in the payment response.  For more information, see the [documentation](https://developer.peachpayments.com/docs/cancel-link). 
     * @param paymentId The ID of the payment. Returned when creating a new payment. (required)
     * @return CancelLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public CancelLinkRequestBuilder cancelLink(String paymentId) throws IllegalArgumentException {
        if (paymentId == null) throw new IllegalArgumentException("\"paymentId\" is required but got null");
            

        return new CancelLinkRequestBuilder(paymentId);
    }
    private okhttp3.Call generateLinkCall(String entityId, GenerateLinkPayment generateLinkPayment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateLinkPayment;

        // create path and map variables
        String localVarPath = "/api/channels/{entityId}/payments"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateLinkValidateBeforeCall(String entityId, GenerateLinkPayment generateLinkPayment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling generateLink(Async)");
        }

        // verify the required parameter 'generateLinkPayment' is set
        if (generateLinkPayment == null) {
            throw new ApiException("Missing the required parameter 'generateLinkPayment' when calling generateLink(Async)");
        }

        return generateLinkCall(entityId, generateLinkPayment, _callback);

    }


    private ApiResponse<GenerateLinkResponse> generateLinkWithHttpInfo(String entityId, GenerateLinkPayment generateLinkPayment) throws ApiException {
        okhttp3.Call localVarCall = generateLinkValidateBeforeCall(entityId, generateLinkPayment, null);
        Type localVarReturnType = new TypeToken<GenerateLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateLinkAsync(String entityId, GenerateLinkPayment generateLinkPayment, final ApiCallback<GenerateLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateLinkValidateBeforeCall(entityId, generateLinkPayment, _callback);
        Type localVarReturnType = new TypeToken<GenerateLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateLinkRequestBuilder {
        private final GenerateLinkPaymentPayment payment;
        private final Customer customer;
        private final PaymentOptions options;
        private final CheckoutOptions checkout;
        private final String entityId;

        private GenerateLinkRequestBuilder(GenerateLinkPaymentPayment payment, Customer customer, PaymentOptions options, CheckoutOptions checkout, String entityId) {
            this.payment = payment;
            this.customer = customer;
            this.options = options;
            this.checkout = checkout;
            this.entityId = entityId;
        }

        /**
         * Build call for generateLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GenerateLinkPayment generateLinkPayment = buildBodyParams();
            return generateLinkCall(entityId, generateLinkPayment, _callback);
        }

        private GenerateLinkPayment buildBodyParams() {
            GenerateLinkPayment generateLinkPayment = new GenerateLinkPayment();
            generateLinkPayment.payment(this.payment);
            generateLinkPayment.customer(this.customer);
            generateLinkPayment.options(this.options);
            generateLinkPayment.checkout(this.checkout);
            return generateLinkPayment;
        }

        /**
         * Execute generateLink request
         * @return GenerateLinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public GenerateLinkResponse execute() throws ApiException {
            GenerateLinkPayment generateLinkPayment = buildBodyParams();
            ApiResponse<GenerateLinkResponse> localVarResp = generateLinkWithHttpInfo(entityId, generateLinkPayment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateLink request with HTTP info returned
         * @return ApiResponse&lt;GenerateLinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenerateLinkResponse> executeWithHttpInfo() throws ApiException {
            GenerateLinkPayment generateLinkPayment = buildBodyParams();
            return generateLinkWithHttpInfo(entityId, generateLinkPayment);
        }

        /**
         * Execute generateLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenerateLinkResponse> _callback) throws ApiException {
            GenerateLinkPayment generateLinkPayment = buildBodyParams();
            return generateLinkAsync(entityId, generateLinkPayment, _callback);
        }
    }

    /**
     * Generate link
     * Generate a unique payment link for a transaction and optionally send this link to the recipient via email, SMS, WhatsApp, or a combination of the three.  For more information, see the [documentation](https://developer.peachpayments.com/docs/generate-link-1). 
     * @param entityId The entity for the request. (required)
     * @param generateLinkPayment  (required)
     * @return GenerateLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateLinkRequestBuilder generateLink(GenerateLinkPaymentPayment payment, Customer customer, PaymentOptions options, CheckoutOptions checkout, String entityId) throws IllegalArgumentException {
        if (payment == null) throw new IllegalArgumentException("\"payment\" is required but got null");
        if (customer == null) throw new IllegalArgumentException("\"customer\" is required but got null");
        if (options == null) throw new IllegalArgumentException("\"options\" is required but got null");
        if (checkout == null) throw new IllegalArgumentException("\"checkout\" is required but got null");
        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        return new GenerateLinkRequestBuilder(payment, customer, options, checkout, entityId);
    }
    private okhttp3.Call getAllPaymentLinksCall(String merchant, Integer offset, Integer perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus, Double filtersAmountValue, String filtersAmountOperator, String filtersSendingOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchant", merchant));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (filtersStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[startDate]", filtersStartDate));
        }

        if (filtersEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[endDate]", filtersEndDate));
        }

        if (filtersStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[status]", filtersStatus));
        }

        if (filtersAmountValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[amountValue]", filtersAmountValue));
        }

        if (filtersAmountOperator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[amountOperator]", filtersAmountOperator));
        }

        if (filtersSendingOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[sendingOptions]", filtersSendingOptions));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaymentLinksValidateBeforeCall(String merchant, Integer offset, Integer perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus, Double filtersAmountValue, String filtersAmountOperator, String filtersSendingOptions, final ApiCallback _callback) throws ApiException {
        return getAllPaymentLinksCall(merchant, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, filtersAmountValue, filtersAmountOperator, filtersSendingOptions, _callback);

    }


    private ApiResponse<PaymentGetAllPaymentLinksResponse> getAllPaymentLinksWithHttpInfo(String merchant, Integer offset, Integer perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus, Double filtersAmountValue, String filtersAmountOperator, String filtersSendingOptions) throws ApiException {
        okhttp3.Call localVarCall = getAllPaymentLinksValidateBeforeCall(merchant, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, filtersAmountValue, filtersAmountOperator, filtersSendingOptions, null);
        Type localVarReturnType = new TypeToken<PaymentGetAllPaymentLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPaymentLinksAsync(String merchant, Integer offset, Integer perPage, OffsetDateTime filtersStartDate, OffsetDateTime filtersEndDate, String filtersStatus, Double filtersAmountValue, String filtersAmountOperator, String filtersSendingOptions, final ApiCallback<PaymentGetAllPaymentLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPaymentLinksValidateBeforeCall(merchant, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, filtersAmountValue, filtersAmountOperator, filtersSendingOptions, _callback);
        Type localVarReturnType = new TypeToken<PaymentGetAllPaymentLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPaymentLinksRequestBuilder {
        private String merchant;
        private Integer offset;
        private Integer perPage;
        private OffsetDateTime filtersStartDate;
        private OffsetDateTime filtersEndDate;
        private String filtersStatus;
        private Double filtersAmountValue;
        private String filtersAmountOperator;
        private String filtersSendingOptions;

        private GetAllPaymentLinksRequestBuilder() {
        }

        /**
         * Set merchant
         * @param merchant The unique merchant ID to scope the list to. Required if you&#39;re exporting payment links to CSV. (optional)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder merchant(String merchant) {
            this.merchant = merchant;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset from which to read data. (optional, default to 0)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage The amount of items to retrieve. (optional, default to 50)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set filtersStartDate
         * @param filtersStartDate Retrieve all payment links from the start date onwards. (optional)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder filtersStartDate(OffsetDateTime filtersStartDate) {
            this.filtersStartDate = filtersStartDate;
            return this;
        }
        
        /**
         * Set filtersEndDate
         * @param filtersEndDate Retrieve all payment links until the end date. (optional)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder filtersEndDate(OffsetDateTime filtersEndDate) {
            this.filtersEndDate = filtersEndDate;
            return this;
        }
        
        /**
         * Set filtersStatus
         * @param filtersStatus The payment link status to filter on. (optional)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder filtersStatus(String filtersStatus) {
            this.filtersStatus = filtersStatus;
            return this;
        }
        
        /**
         * Set filtersAmountValue
         * @param filtersAmountValue The amount to filter by. (optional)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder filtersAmountValue(Double filtersAmountValue) {
            this.filtersAmountValue = filtersAmountValue;
            return this;
        }
        
        /**
         * Set filtersAmountOperator
         * @param filtersAmountOperator How to use the amountValue for filtering. (optional)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder filtersAmountOperator(String filtersAmountOperator) {
            this.filtersAmountOperator = filtersAmountOperator;
            return this;
        }
        
        /**
         * Set filtersSendingOptions
         * @param filtersSendingOptions The sending option to filter on. (optional)
         * @return GetAllPaymentLinksRequestBuilder
         */
        public GetAllPaymentLinksRequestBuilder filtersSendingOptions(String filtersSendingOptions) {
            this.filtersSendingOptions = filtersSendingOptions;
            return this;
        }
        
        /**
         * Build call for getAllPaymentLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPaymentLinksCall(merchant, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, filtersAmountValue, filtersAmountOperator, filtersSendingOptions, _callback);
        }


        /**
         * Execute getAllPaymentLinks request
         * @return PaymentGetAllPaymentLinksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public PaymentGetAllPaymentLinksResponse execute() throws ApiException {
            ApiResponse<PaymentGetAllPaymentLinksResponse> localVarResp = getAllPaymentLinksWithHttpInfo(merchant, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, filtersAmountValue, filtersAmountOperator, filtersSendingOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPaymentLinks request with HTTP info returned
         * @return ApiResponse&lt;PaymentGetAllPaymentLinksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentGetAllPaymentLinksResponse> executeWithHttpInfo() throws ApiException {
            return getAllPaymentLinksWithHttpInfo(merchant, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, filtersAmountValue, filtersAmountOperator, filtersSendingOptions);
        }

        /**
         * Execute getAllPaymentLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentGetAllPaymentLinksResponse> _callback) throws ApiException {
            return getAllPaymentLinksAsync(merchant, offset, perPage, filtersStartDate, filtersEndDate, filtersStatus, filtersAmountValue, filtersAmountOperator, filtersSendingOptions, _callback);
        }
    }

    /**
     * Retrieve or export all payment links
     * Retrieve a paginated list or export a CSV of all payment links. To export to CSV, change the request header&#39;s &#x60;Accept&#x60; value to &#x60;text/csv&#x60;. For more information, see the [documentation](https://developer.peachpayments.com/docs/retrieve-all-payment-links), or to try it out, see our [Postman collection](https://www.postman.com/peachpayments/workspace/peach-payments-public-workspace/request/13324425-265d80b0-5baa-478b-be10-debc942ca8f3).
     * @return GetAllPaymentLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPaymentLinksRequestBuilder getAllPaymentLinks() throws IllegalArgumentException {
        return new GetAllPaymentLinksRequestBuilder();
    }
}

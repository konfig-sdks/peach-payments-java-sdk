/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.FilesUploadFileRequest;
import com.konfigthis.client.model.FilesUploadFileResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call downloadFileCall(String paymentId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/payments/{paymentId}/files/{fileId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadFileValidateBeforeCall(String paymentId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling downloadFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling downloadFile(Async)");
        }

        return downloadFileCall(paymentId, fileId, _callback);

    }


    private ApiResponse<Void> downloadFileWithHttpInfo(String paymentId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = downloadFileValidateBeforeCall(paymentId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call downloadFileAsync(String paymentId, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadFileValidateBeforeCall(paymentId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DownloadFileRequestBuilder {
        private final String paymentId;
        private final String fileId;

        private DownloadFileRequestBuilder(String paymentId, String fileId) {
            this.paymentId = paymentId;
            this.fileId = fileId;
        }

        /**
         * Build call for downloadFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadFileCall(paymentId, fileId, _callback);
        }


        /**
         * Execute downloadFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            downloadFileWithHttpInfo(paymentId, fileId);
        }

        /**
         * Execute downloadFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return downloadFileWithHttpInfo(paymentId, fileId);
        }

        /**
         * Execute downloadFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return downloadFileAsync(paymentId, fileId, _callback);
        }
    }

    /**
     * Download a file
     * Downloads a file that was attached to a payment link.
     * @param paymentId Payment ID. (required)
     * @param fileId File ID. (required)
     * @return DownloadFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public DownloadFileRequestBuilder downloadFile(String paymentId, String fileId) throws IllegalArgumentException {
        if (paymentId == null) throw new IllegalArgumentException("\"paymentId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new DownloadFileRequestBuilder(paymentId, fileId);
    }
    private okhttp3.Call uploadFileCall(File _file, FilesUploadFileRequest filesUploadFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesUploadFileRequest;

        // create path and map variables
        String localVarPath = "/api/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(File _file, FilesUploadFileRequest filesUploadFileRequest, final ApiCallback _callback) throws ApiException {
        return uploadFileCall(_file, filesUploadFileRequest, _callback);

    }


    private ApiResponse<FilesUploadFileResponse> uploadFileWithHttpInfo(File _file, FilesUploadFileRequest filesUploadFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(_file, filesUploadFileRequest, null);
        Type localVarReturnType = new TypeToken<FilesUploadFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadFileAsync(File _file, FilesUploadFileRequest filesUploadFileRequest, final ApiCallback<FilesUploadFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(_file, filesUploadFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesUploadFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadFileRequestBuilder {
        private File _file;

        private UploadFileRequestBuilder() {
        }

        /**
         * Set _file
         * @param _file File content to be uploaded. (optional)
         * @return UploadFileRequestBuilder
         */
        public UploadFileRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for uploadFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesUploadFileRequest filesUploadFileRequest = buildBodyParams();
            return uploadFileCall(_file, filesUploadFileRequest, _callback);
        }

        private FilesUploadFileRequest buildBodyParams() {
            FilesUploadFileRequest filesUploadFileRequest = new FilesUploadFileRequest();
            filesUploadFileRequest._file(this._file);
            return filesUploadFileRequest;
        }

        /**
         * Execute uploadFile request
         * @return FilesUploadFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public FilesUploadFileResponse execute() throws ApiException {
            FilesUploadFileRequest filesUploadFileRequest = buildBodyParams();
            ApiResponse<FilesUploadFileResponse> localVarResp = uploadFileWithHttpInfo(_file, filesUploadFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadFile request with HTTP info returned
         * @return ApiResponse&lt;FilesUploadFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesUploadFileResponse> executeWithHttpInfo() throws ApiException {
            FilesUploadFileRequest filesUploadFileRequest = buildBodyParams();
            return uploadFileWithHttpInfo(_file, filesUploadFileRequest);
        }

        /**
         * Execute uploadFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesUploadFileResponse> _callback) throws ApiException {
            FilesUploadFileRequest filesUploadFileRequest = buildBodyParams();
            return uploadFileAsync(_file, filesUploadFileRequest, _callback);
        }
    }

    /**
     * Upload a file
     * Upload a file so that it can be attached to a payment link. Only PDFs smaller than 5 MB are supported.
     * @return UploadFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public UploadFileRequestBuilder uploadFile() throws IllegalArgumentException {
        return new UploadFileRequestBuilder();
    }
}

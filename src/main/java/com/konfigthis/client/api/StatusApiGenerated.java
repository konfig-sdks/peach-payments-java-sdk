/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CheckoutStatus;
import com.konfigthis.client.model.StatusQueryPaymentStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatusApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatusApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkoutStatusGetCall(String authenticationEntityId, String signature, String checkoutId, String merchantTransactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authenticationEntityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authentication.entityId", authenticationEntityId));
        }

        if (checkoutId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkoutId", checkoutId));
        }

        if (merchantTransactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantTransactionId", merchantTransactionId));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkoutStatusGetValidateBeforeCall(String authenticationEntityId, String signature, String checkoutId, String merchantTransactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationEntityId' is set
        if (authenticationEntityId == null) {
            throw new ApiException("Missing the required parameter 'authenticationEntityId' when calling checkoutStatusGet(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling checkoutStatusGet(Async)");
        }

        return checkoutStatusGetCall(authenticationEntityId, signature, checkoutId, merchantTransactionId, _callback);

    }


    private ApiResponse<CheckoutStatus> checkoutStatusGetWithHttpInfo(String authenticationEntityId, String signature, String checkoutId, String merchantTransactionId) throws ApiException {
        okhttp3.Call localVarCall = checkoutStatusGetValidateBeforeCall(authenticationEntityId, signature, checkoutId, merchantTransactionId, null);
        Type localVarReturnType = new TypeToken<CheckoutStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkoutStatusGetAsync(String authenticationEntityId, String signature, String checkoutId, String merchantTransactionId, final ApiCallback<CheckoutStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkoutStatusGetValidateBeforeCall(authenticationEntityId, signature, checkoutId, merchantTransactionId, _callback);
        Type localVarReturnType = new TypeToken<CheckoutStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckoutStatusGetRequestBuilder {
        private final String authenticationEntityId;
        private final String signature;
        private String checkoutId;
        private String merchantTransactionId;

        private CheckoutStatusGetRequestBuilder(String authenticationEntityId, String signature) {
            this.authenticationEntityId = authenticationEntityId;
            this.signature = signature;
        }

        /**
         * Set checkoutId
         * @param checkoutId Checkout ID. (optional)
         * @return CheckoutStatusGetRequestBuilder
         */
        public CheckoutStatusGetRequestBuilder checkoutId(String checkoutId) {
            this.checkoutId = checkoutId;
            return this;
        }
        
        /**
         * Set merchantTransactionId
         * @param merchantTransactionId Merchant transaction ID. (optional)
         * @return CheckoutStatusGetRequestBuilder
         */
        public CheckoutStatusGetRequestBuilder merchantTransactionId(String merchantTransactionId) {
            this.merchantTransactionId = merchantTransactionId;
            return this;
        }
        
        /**
         * Build call for checkoutStatusGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkoutStatusGetCall(authenticationEntityId, signature, checkoutId, merchantTransactionId, _callback);
        }


        /**
         * Execute checkoutStatusGet request
         * @return CheckoutStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public CheckoutStatus execute() throws ApiException {
            ApiResponse<CheckoutStatus> localVarResp = checkoutStatusGetWithHttpInfo(authenticationEntityId, signature, checkoutId, merchantTransactionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkoutStatusGet request with HTTP info returned
         * @return ApiResponse&lt;CheckoutStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckoutStatus> executeWithHttpInfo() throws ApiException {
            return checkoutStatusGetWithHttpInfo(authenticationEntityId, signature, checkoutId, merchantTransactionId);
        }

        /**
         * Execute checkoutStatusGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckoutStatus> _callback) throws ApiException {
            return checkoutStatusGetAsync(authenticationEntityId, signature, checkoutId, merchantTransactionId, _callback);
        }
    }

    /**
     * Query Checkout status
     * Get the status of a checkout instance.  For more information, see the [documentation](https://developer.peachpayments.com/docs/checkout-payment-status). 
     * @param authenticationEntityId Merchant&#39;s entity ID. (required)
     * @param signature Signature of data signed with secret key of merchant. (required)
     * @return CheckoutStatusGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutStatusGetRequestBuilder checkoutStatusGet(String authenticationEntityId, String signature) throws IllegalArgumentException {
        if (authenticationEntityId == null) throw new IllegalArgumentException("\"authenticationEntityId\" is required but got null");
            

        if (signature == null) throw new IllegalArgumentException("\"signature\" is required but got null");
            

        return new CheckoutStatusGetRequestBuilder(authenticationEntityId, signature);
    }
    private okhttp3.Call queryPaymentStatusCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/payments/{paymentId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryPaymentStatusValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling queryPaymentStatus(Async)");
        }

        return queryPaymentStatusCall(paymentId, _callback);

    }


    private ApiResponse<StatusQueryPaymentStatusResponse> queryPaymentStatusWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = queryPaymentStatusValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<StatusQueryPaymentStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryPaymentStatusAsync(String paymentId, final ApiCallback<StatusQueryPaymentStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryPaymentStatusValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<StatusQueryPaymentStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryPaymentStatusRequestBuilder {
        private final String paymentId;

        private QueryPaymentStatusRequestBuilder(String paymentId) {
            this.paymentId = paymentId;
        }

        /**
         * Build call for queryPaymentStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryPaymentStatusCall(paymentId, _callback);
        }


        /**
         * Execute queryPaymentStatus request
         * @return StatusQueryPaymentStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public StatusQueryPaymentStatusResponse execute() throws ApiException {
            ApiResponse<StatusQueryPaymentStatusResponse> localVarResp = queryPaymentStatusWithHttpInfo(paymentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryPaymentStatus request with HTTP info returned
         * @return ApiResponse&lt;StatusQueryPaymentStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusQueryPaymentStatusResponse> executeWithHttpInfo() throws ApiException {
            return queryPaymentStatusWithHttpInfo(paymentId);
        }

        /**
         * Execute queryPaymentStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusQueryPaymentStatusResponse> _callback) throws ApiException {
            return queryPaymentStatusAsync(paymentId, _callback);
        }
    }

    /**
     * Query payment status
     * Query the status of a payment.  For more information, see the [documentation](https://developer.peachpayments.com/docs/query-payment). 
     * @param paymentId Payment ID. Returned when creating a new payment. (required)
     * @return QueryPaymentStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public QueryPaymentStatusRequestBuilder queryPaymentStatus(String paymentId) throws IllegalArgumentException {
        if (paymentId == null) throw new IllegalArgumentException("\"paymentId\" is required but got null");
            

        return new QueryPaymentStatusRequestBuilder(paymentId);
    }
}

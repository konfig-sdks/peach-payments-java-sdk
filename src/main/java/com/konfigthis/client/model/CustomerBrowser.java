/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The customer&#39;s browser details.
 */
@ApiModel(description = "The customer's browser details.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomerBrowser {
  public static final String SERIALIZED_NAME_ACCEPT_HEADER = "acceptHeader";
  @SerializedName(SERIALIZED_NAME_ACCEPT_HEADER)
  private String acceptHeader;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_SCREEN_HEIGHT = "screenHeight";
  @SerializedName(SERIALIZED_NAME_SCREEN_HEIGHT)
  private String screenHeight;

  public static final String SERIALIZED_NAME_SCREEN_WIDTH = "screenWidth";
  @SerializedName(SERIALIZED_NAME_SCREEN_WIDTH)
  private String screenWidth;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_JAVA_ENABLED = "javaEnabled";
  @SerializedName(SERIALIZED_NAME_JAVA_ENABLED)
  private String javaEnabled;

  public static final String SERIALIZED_NAME_JAVASCRIPT_ENABLED = "javascriptEnabled";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT_ENABLED)
  private String javascriptEnabled;

  public static final String SERIALIZED_NAME_SCREEN_COLOR_DEPTH = "screenColorDepth";
  @SerializedName(SERIALIZED_NAME_SCREEN_COLOR_DEPTH)
  private String screenColorDepth;

  public static final String SERIALIZED_NAME_CHALLENGE_WINDOW = "challengeWindow";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_WINDOW)
  private String challengeWindow;

  public CustomerBrowser() {
  }

  public CustomerBrowser acceptHeader(String acceptHeader) {
    
    
    
    
    this.acceptHeader = acceptHeader;
    return this;
  }

   /**
   * The value of the accept header sent from the customer&#39;s browser.
   * @return acceptHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "application/json", value = "The value of the accept header sent from the customer's browser.")

  public String getAcceptHeader() {
    return acceptHeader;
  }


  public void setAcceptHeader(String acceptHeader) {
    
    
    
    this.acceptHeader = acceptHeader;
  }


  public CustomerBrowser language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * The value representing the browser language as defined in IETF BCP47.
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EN", value = "The value representing the browser language as defined in IETF BCP47.")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public CustomerBrowser screenHeight(String screenHeight) {
    
    
    
    
    this.screenHeight = screenHeight;
    return this;
  }

   /**
   * The total height of the customer&#39;s screen in pixels.
   * @return screenHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1080", value = "The total height of the customer's screen in pixels.")

  public String getScreenHeight() {
    return screenHeight;
  }


  public void setScreenHeight(String screenHeight) {
    
    
    
    this.screenHeight = screenHeight;
  }


  public CustomerBrowser screenWidth(String screenWidth) {
    
    
    
    
    this.screenWidth = screenWidth;
    return this;
  }

   /**
   * The total width of the customer&#39;s screen in pixels.
   * @return screenWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1920", value = "The total width of the customer's screen in pixels.")

  public String getScreenWidth() {
    return screenWidth;
  }


  public void setScreenWidth(String screenWidth) {
    
    
    
    this.screenWidth = screenWidth;
  }


  public CustomerBrowser timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * The time-zone offset in minutes between UTC and the local time of the customer&#39;s browser.
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30", value = "The time-zone offset in minutes between UTC and the local time of the customer's browser.")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public CustomerBrowser userAgent(String userAgent) {
    
    
    
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * The exact content of the HTTP user-agent header.
   * @return userAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mozilla/5.0 (Android 4.4; Mobile; rv:41.0) Gecko/41.0 Firefox/41.0", value = "The exact content of the HTTP user-agent header.")

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    
    
    
    this.userAgent = userAgent;
  }


  public CustomerBrowser javaEnabled(String javaEnabled) {
    
    
    
    
    this.javaEnabled = javaEnabled;
    return this;
  }

   /**
   * The boolean that represents the ability of the customer&#39;s browser to execute Java.
   * @return javaEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "The boolean that represents the ability of the customer's browser to execute Java.")

  public String getJavaEnabled() {
    return javaEnabled;
  }


  public void setJavaEnabled(String javaEnabled) {
    
    
    
    this.javaEnabled = javaEnabled;
  }


  public CustomerBrowser javascriptEnabled(String javascriptEnabled) {
    
    
    
    
    this.javascriptEnabled = javascriptEnabled;
    return this;
  }

   /**
   * The boolean that represents the ability of the customer&#39;s browser to execute JavaScript.
   * @return javascriptEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "The boolean that represents the ability of the customer's browser to execute JavaScript.")

  public String getJavascriptEnabled() {
    return javascriptEnabled;
  }


  public void setJavascriptEnabled(String javascriptEnabled) {
    
    
    
    this.javascriptEnabled = javascriptEnabled;
  }


  public CustomerBrowser screenColorDepth(String screenColorDepth) {
    
    
    
    
    this.screenColorDepth = screenColorDepth;
    return this;
  }

   /**
   * The value representing the bit depth of the colour palette for displaying images in bits per pixel.
   * @return screenColorDepth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "24", value = "The value representing the bit depth of the colour palette for displaying images in bits per pixel.")

  public String getScreenColorDepth() {
    return screenColorDepth;
  }


  public void setScreenColorDepth(String screenColorDepth) {
    
    
    
    this.screenColorDepth = screenColorDepth;
  }


  public CustomerBrowser challengeWindow(String challengeWindow) {
    
    
    
    
    this.challengeWindow = challengeWindow;
    return this;
  }

   /**
   * The dimensions of the challenge window that has been displayed to the customer.
   * @return challengeWindow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01", value = "The dimensions of the challenge window that has been displayed to the customer.")

  public String getChallengeWindow() {
    return challengeWindow;
  }


  public void setChallengeWindow(String challengeWindow) {
    
    
    
    this.challengeWindow = challengeWindow;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomerBrowser instance itself
   */
  public CustomerBrowser putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerBrowser customerBrowser = (CustomerBrowser) o;
    return Objects.equals(this.acceptHeader, customerBrowser.acceptHeader) &&
        Objects.equals(this.language, customerBrowser.language) &&
        Objects.equals(this.screenHeight, customerBrowser.screenHeight) &&
        Objects.equals(this.screenWidth, customerBrowser.screenWidth) &&
        Objects.equals(this.timezone, customerBrowser.timezone) &&
        Objects.equals(this.userAgent, customerBrowser.userAgent) &&
        Objects.equals(this.javaEnabled, customerBrowser.javaEnabled) &&
        Objects.equals(this.javascriptEnabled, customerBrowser.javascriptEnabled) &&
        Objects.equals(this.screenColorDepth, customerBrowser.screenColorDepth) &&
        Objects.equals(this.challengeWindow, customerBrowser.challengeWindow)&&
        Objects.equals(this.additionalProperties, customerBrowser.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptHeader, language, screenHeight, screenWidth, timezone, userAgent, javaEnabled, javascriptEnabled, screenColorDepth, challengeWindow, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerBrowser {\n");
    sb.append("    acceptHeader: ").append(toIndentedString(acceptHeader)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    screenHeight: ").append(toIndentedString(screenHeight)).append("\n");
    sb.append("    screenWidth: ").append(toIndentedString(screenWidth)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    javaEnabled: ").append(toIndentedString(javaEnabled)).append("\n");
    sb.append("    javascriptEnabled: ").append(toIndentedString(javascriptEnabled)).append("\n");
    sb.append("    screenColorDepth: ").append(toIndentedString(screenColorDepth)).append("\n");
    sb.append("    challengeWindow: ").append(toIndentedString(challengeWindow)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptHeader");
    openapiFields.add("language");
    openapiFields.add("screenHeight");
    openapiFields.add("screenWidth");
    openapiFields.add("timezone");
    openapiFields.add("userAgent");
    openapiFields.add("javaEnabled");
    openapiFields.add("javascriptEnabled");
    openapiFields.add("screenColorDepth");
    openapiFields.add("challengeWindow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerBrowser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerBrowser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerBrowser is not found in the empty JSON string", CustomerBrowser.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("acceptHeader") != null && !jsonObj.get("acceptHeader").isJsonNull()) && !jsonObj.get("acceptHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceptHeader").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("screenHeight") != null && !jsonObj.get("screenHeight").isJsonNull()) && !jsonObj.get("screenHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenHeight").toString()));
      }
      if ((jsonObj.get("screenWidth") != null && !jsonObj.get("screenWidth").isJsonNull()) && !jsonObj.get("screenWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenWidth").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("javaEnabled") != null && !jsonObj.get("javaEnabled").isJsonNull()) && !jsonObj.get("javaEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaEnabled").toString()));
      }
      if ((jsonObj.get("javascriptEnabled") != null && !jsonObj.get("javascriptEnabled").isJsonNull()) && !jsonObj.get("javascriptEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javascriptEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javascriptEnabled").toString()));
      }
      if ((jsonObj.get("screenColorDepth") != null && !jsonObj.get("screenColorDepth").isJsonNull()) && !jsonObj.get("screenColorDepth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenColorDepth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenColorDepth").toString()));
      }
      if ((jsonObj.get("challengeWindow") != null && !jsonObj.get("challengeWindow").isJsonNull()) && !jsonObj.get("challengeWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challengeWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challengeWindow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerBrowser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerBrowser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerBrowser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerBrowser.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerBrowser>() {
           @Override
           public void write(JsonWriter out, CustomerBrowser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerBrowser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomerBrowser instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerBrowser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerBrowser
  * @throws IOException if the JSON string is invalid with respect to CustomerBrowser
  */
  public static CustomerBrowser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerBrowser.class);
  }

 /**
  * Convert an instance of CustomerBrowser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The payment brand specifies the method of payment for the request.
 */
@JsonAdapter(PaymentBrand.Adapter.class)public enum PaymentBrand {
  
  EFTSECURE("EFTSECURE"),
  
  PAYFLEX("PAYFLEX"),
  
  ZEROPAY("ZEROPAY"),
  
  FINCHOICEPAY("FINCHOICEPAY"),
  
  _1FORYOU("1FORYOU"),
  
  MASTERPASS("MASTERPASS"),
  
  MPESA("MPESA"),
  
  BLINKBYEMTEL("BLINKBYEMTEL"),
  
  MOBICRED("MOBICRED"),
  
  CAPITECPAY("CAPITECPAY"),
  
  NEDBANKDIRECTEFT("NEDBANKDIRECTEFT"),
  
  MCBJUICE("MCBJUICE");

  private String value;

  PaymentBrand(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PaymentBrand fromValue(String value) {
    for (PaymentBrand b : PaymentBrand.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PaymentBrand> {
    @Override
    public void write(final JsonWriter jsonWriter, final PaymentBrand enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PaymentBrand read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PaymentBrand.fromValue(value);
    }
  }
}


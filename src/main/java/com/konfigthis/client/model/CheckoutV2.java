/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CheckoutV2Billing;
import com.konfigthis.client.model.CheckoutV2Customer;
import com.konfigthis.client.model.CheckoutV2Shipping;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CheckoutV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckoutV2 {
  public static final String SERIALIZED_NAME_AUTHENTICATION_ENTITY_ID = "authentication.entityId";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_ENTITY_ID)
  private String authenticationEntityId;

  public static final String SERIALIZED_NAME_MERCHANT_TRANSACTION_ID = "merchantTransactionId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TRANSACTION_ID)
  private String merchantTransactionId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  /**
   * The currency code of the payment request amount.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    ZAR("ZAR"),
    
    USD("USD"),
    
    KES("KES"),
    
    MUR("MUR"),
    
    GBP("GBP"),
    
    EUR("EUR");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_SHOPPER_RESULT_URL = "shopperResultUrl";
  @SerializedName(SERIALIZED_NAME_SHOPPER_RESULT_URL)
  private String shopperResultUrl;

  /**
   * The preferred payment method which is active in the checkout page at the point of redirecting.
   */
  @JsonAdapter(DefaultPaymentMethodEnum.Adapter.class)
 public enum DefaultPaymentMethodEnum {
    CARD("CARD"),
    
    MASTERPASS("MASTERPASS"),
    
    MOBICRED("MOBICRED"),
    
    EFTSECURE("EFTSECURE"),
    
    MPESA("MPESA"),
    
    _1FORYOU("1FORYOU"),
    
    APLUS("APLUS"),
    
    PAYPAL("PAYPAL"),
    
    ZEROPAY("ZEROPAY"),
    
    PAYFLEX("PAYFLEX"),
    
    FINCHOICEPAY("FINCHOICEPAY"),
    
    BLINKBYEMTEL("BLINKBYEMTEL"),
    
    CAPITECPAY("CAPITECPAY"),
    
    NEDBANKDIRECTEFT("NEDBANKDIRECTEFT"),
    
    PAYBYBANK("PAYBYBANK"),
    
    MCBJUICE("MCBJUICE");

    private String value;

    DefaultPaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultPaymentMethodEnum fromValue(String value) {
      for (DefaultPaymentMethodEnum b : DefaultPaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultPaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultPaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultPaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultPaymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD = "defaultPaymentMethod";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD)
  private DefaultPaymentMethodEnum defaultPaymentMethod;

  public static final String SERIALIZED_NAME_FORCE_DEFAULT_METHOD = "forceDefaultMethod";
  @SerializedName(SERIALIZED_NAME_FORCE_DEFAULT_METHOD)
  private Boolean forceDefaultMethod = false;

  public static final String SERIALIZED_NAME_MERCHANT_INVOICE_ID = "merchantInvoiceId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INVOICE_ID)
  private String merchantInvoiceId;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancelUrl";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  private String cancelUrl;

  public static final String SERIALIZED_NAME_NOTIFICATION_URL = "notificationUrl";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_URL)
  private String notificationUrl;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS = "customParameters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS)
  private Map<String, String> customParameters = null;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CheckoutV2Customer customer;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private CheckoutV2Billing billing;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private CheckoutV2Shipping shipping;

  public static final String SERIALIZED_NAME_CREATE_REGISTRATION = "createRegistration";
  @SerializedName(SERIALIZED_NAME_CREATE_REGISTRATION)
  private Boolean createRegistration;

  public static final String SERIALIZED_NAME_ORIGINATOR = "originator";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR)
  private String originator;

  /**
   * Text to display on \&quot;Return to Store\&quot; button on completing checkout.
   */
  @JsonAdapter(ReturnToEnum.Adapter.class)
 public enum ReturnToEnum {
    STORE("STORE"),
    
    INVOICE("INVOICE");

    private String value;

    ReturnToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnToEnum fromValue(String value) {
      for (ReturnToEnum b : ReturnToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnToEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RETURN_TO = "returnTo";
  @SerializedName(SERIALIZED_NAME_RETURN_TO)
  private ReturnToEnum returnTo;

  public CheckoutV2() {
  }

  public CheckoutV2 authenticationEntityId(String authenticationEntityId) {
    
    
    
    
    this.authenticationEntityId = authenticationEntityId;
    return this;
  }

   /**
   * The entity for the request. By default, this is the channel ID.
   * @return authenticationEntityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8ac7a4ca68c22c4d0168c2caab2e0025", required = true, value = "The entity for the request. By default, this is the channel ID.")

  public String getAuthenticationEntityId() {
    return authenticationEntityId;
  }


  public void setAuthenticationEntityId(String authenticationEntityId) {
    
    
    
    this.authenticationEntityId = authenticationEntityId;
  }


  public CheckoutV2 merchantTransactionId(String merchantTransactionId) {
    
    
    if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
    }
    
    this.merchantTransactionId = merchantTransactionId;
    return this;
  }

   /**
   * Merchant-provided reference number unique for your transactions.
   * @return merchantTransactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "OrderNo453432", required = true, value = "Merchant-provided reference number unique for your transactions.")

  public String getMerchantTransactionId() {
    return merchantTransactionId;
  }


  public void setMerchantTransactionId(String merchantTransactionId) {
    
    
    if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
    }
    this.merchantTransactionId = merchantTransactionId;
  }


  public CheckoutV2 amount(Double amount) {
    if (amount != null && amount < 0.01) {
      throw new IllegalArgumentException("Invalid value for amount. Must be greater than or equal to 0.01.");
    }
    if (amount != null && amount > 99999999.99) {
      throw new IllegalArgumentException("Invalid value for amount. Must be less than or equal to 99999999.99.");
    }
    
    
    this.amount = amount;
    return this;
  }

  public CheckoutV2 amount(Integer amount) {
    if (amount != null && amount < 0.01) {
      throw new IllegalArgumentException("Invalid value for amount. Must be greater than or equal to 0.01.");
    }
    if (amount != null && amount > 99999999.99) {
      throw new IllegalArgumentException("Invalid value for amount. Must be less than or equal to 99999999.99.");
    }
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * The amount of the payment request. The period is used as the decimal separator.  M-PESA does not support decimal amounts, so Checkout automatically rounds them up. 
   * minimum: 0.01
   * maximum: 99999999.99
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1010.22", required = true, value = "The amount of the payment request. The period is used as the decimal separator.  M-PESA does not support decimal amounts, so Checkout automatically rounds them up. ")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    if (amount != null && amount < 0.01) {
      throw new IllegalArgumentException("Invalid value for amount. Must be greater than or equal to 0.01.");
    }
    if (amount != null && amount > 99999999.99) {
      throw new IllegalArgumentException("Invalid value for amount. Must be less than or equal to 99999999.99.");
    }
    
    this.amount = amount;
  }


  public CheckoutV2 currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code of the payment request amount.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ZAR", required = true, value = "The currency code of the payment request amount.")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public CheckoutV2 nonce(String nonce) {
    
    
    if (nonce != null && nonce.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nonce. Length must be greater than or equal to 1.");
    }
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Unique value to represent each request.
   * @return nonce
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "UNQ00012345678", required = true, value = "Unique value to represent each request.")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    
    
    if (nonce != null && nonce.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nonce. Length must be greater than or equal to 1.");
    }
    this.nonce = nonce;
  }


  public CheckoutV2 shopperResultUrl(String shopperResultUrl) {
    
    
    
    
    this.shopperResultUrl = shopperResultUrl;
    return this;
  }

   /**
   * Checkout uses a POST request to redirect the customer to this URL after the customer completes checkout. Must be a valid URL that can be accessed through a browser.
   * @return shopperResultUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://mydemostore.com/OrderNo453432", required = true, value = "Checkout uses a POST request to redirect the customer to this URL after the customer completes checkout. Must be a valid URL that can be accessed through a browser.")

  public String getShopperResultUrl() {
    return shopperResultUrl;
  }


  public void setShopperResultUrl(String shopperResultUrl) {
    
    
    
    this.shopperResultUrl = shopperResultUrl;
  }


  public CheckoutV2 defaultPaymentMethod(DefaultPaymentMethodEnum defaultPaymentMethod) {
    
    
    
    
    this.defaultPaymentMethod = defaultPaymentMethod;
    return this;
  }

   /**
   * The preferred payment method which is active in the checkout page at the point of redirecting.
   * @return defaultPaymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CARD", value = "The preferred payment method which is active in the checkout page at the point of redirecting.")

  public DefaultPaymentMethodEnum getDefaultPaymentMethod() {
    return defaultPaymentMethod;
  }


  public void setDefaultPaymentMethod(DefaultPaymentMethodEnum defaultPaymentMethod) {
    
    
    
    this.defaultPaymentMethod = defaultPaymentMethod;
  }


  public CheckoutV2 forceDefaultMethod(Boolean forceDefaultMethod) {
    
    
    
    
    this.forceDefaultMethod = forceDefaultMethod;
    return this;
  }

   /**
   * Force the default payment method to be the only payment method.
   * @return forceDefaultMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Force the default payment method to be the only payment method.")

  public Boolean getForceDefaultMethod() {
    return forceDefaultMethod;
  }


  public void setForceDefaultMethod(Boolean forceDefaultMethod) {
    
    
    
    this.forceDefaultMethod = forceDefaultMethod;
  }


  public CheckoutV2 merchantInvoiceId(String merchantInvoiceId) {
    
    
    if (merchantInvoiceId != null && merchantInvoiceId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantInvoiceId. Length must be greater than or equal to 8.");
    }
    
    this.merchantInvoiceId = merchantInvoiceId;
    return this;
  }

   /**
   * Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards.
   * @return merchantInvoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INV-00001", value = "Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards.")

  public String getMerchantInvoiceId() {
    return merchantInvoiceId;
  }


  public void setMerchantInvoiceId(String merchantInvoiceId) {
    
    
    if (merchantInvoiceId != null && merchantInvoiceId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantInvoiceId. Length must be greater than or equal to 8.");
    }
    this.merchantInvoiceId = merchantInvoiceId;
  }


  public CheckoutV2 cancelUrl(String cancelUrl) {
    
    
    
    
    this.cancelUrl = cancelUrl;
    return this;
  }

   /**
   * The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser.
   * @return cancelUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://mydemostore.com/OrderNo453432/cancelled", value = "The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser.")

  public String getCancelUrl() {
    return cancelUrl;
  }


  public void setCancelUrl(String cancelUrl) {
    
    
    
    this.cancelUrl = cancelUrl;
  }


  public CheckoutV2 notificationUrl(String notificationUrl) {
    
    
    
    
    this.notificationUrl = notificationUrl;
    return this;
  }

   /**
   * Override the preconfigured webhook URL for this checkout instance, any changes to checkout send a webhook to this URL.
   * @return notificationUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://mydemostore.com/OrderNo453432/webhook", value = "Override the preconfigured webhook URL for this checkout instance, any changes to checkout send a webhook to this URL.")

  public String getNotificationUrl() {
    return notificationUrl;
  }


  public void setNotificationUrl(String notificationUrl) {
    
    
    
    this.notificationUrl = notificationUrl;
  }


  public CheckoutV2 customParameters(Map<String, String> customParameters) {
    
    
    
    
    this.customParameters = customParameters;
    return this;
  }

  public CheckoutV2 putCustomParametersItem(String key, String customParametersItem) {
    if (this.customParameters == null) {
      this.customParameters = new HashMap<>();
    }
    this.customParameters.put(key, customParametersItem);
    return this;
  }

   /**
   * A name value pair used for sending custom information.
   * @return customParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A name value pair used for sending custom information.")

  public Map<String, String> getCustomParameters() {
    return customParameters;
  }


  public void setCustomParameters(Map<String, String> customParameters) {
    
    
    
    this.customParameters = customParameters;
  }


  public CheckoutV2 customer(CheckoutV2Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckoutV2Customer getCustomer() {
    return customer;
  }


  public void setCustomer(CheckoutV2Customer customer) {
    
    
    
    this.customer = customer;
  }


  public CheckoutV2 billing(CheckoutV2Billing billing) {
    
    
    
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckoutV2Billing getBilling() {
    return billing;
  }


  public void setBilling(CheckoutV2Billing billing) {
    
    
    
    this.billing = billing;
  }


  public CheckoutV2 shipping(CheckoutV2Shipping shipping) {
    
    
    
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckoutV2Shipping getShipping() {
    return shipping;
  }


  public void setShipping(CheckoutV2Shipping shipping) {
    
    
    
    this.shipping = shipping;
  }


  public CheckoutV2 createRegistration(Boolean createRegistration) {
    
    
    
    
    this.createRegistration = createRegistration;
    return this;
  }

   /**
   * Used to enable card tokenisation with COPYandPAY.
   * @return createRegistration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Used to enable card tokenisation with COPYandPAY.")

  public Boolean getCreateRegistration() {
    return createRegistration;
  }


  public void setCreateRegistration(Boolean createRegistration) {
    
    
    
    this.createRegistration = createRegistration;
  }


  public CheckoutV2 originator(String originator) {
    
    
    
    
    this.originator = originator;
    return this;
  }

   /**
   * Used to provide a name for the application that is creating the checkout instance.
   * @return originator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Webstore", value = "Used to provide a name for the application that is creating the checkout instance.")

  public String getOriginator() {
    return originator;
  }


  public void setOriginator(String originator) {
    
    
    
    this.originator = originator;
  }


  public CheckoutV2 returnTo(ReturnToEnum returnTo) {
    
    
    
    
    this.returnTo = returnTo;
    return this;
  }

   /**
   * Text to display on \&quot;Return to Store\&quot; button on completing checkout.
   * @return returnTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "STORE", value = "Text to display on \"Return to Store\" button on completing checkout.")

  public ReturnToEnum getReturnTo() {
    return returnTo;
  }


  public void setReturnTo(ReturnToEnum returnTo) {
    
    
    
    this.returnTo = returnTo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutV2 instance itself
   */
  public CheckoutV2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutV2 checkoutV2 = (CheckoutV2) o;
    return Objects.equals(this.authenticationEntityId, checkoutV2.authenticationEntityId) &&
        Objects.equals(this.merchantTransactionId, checkoutV2.merchantTransactionId) &&
        Objects.equals(this.amount, checkoutV2.amount) &&
        Objects.equals(this.currency, checkoutV2.currency) &&
        Objects.equals(this.nonce, checkoutV2.nonce) &&
        Objects.equals(this.shopperResultUrl, checkoutV2.shopperResultUrl) &&
        Objects.equals(this.defaultPaymentMethod, checkoutV2.defaultPaymentMethod) &&
        Objects.equals(this.forceDefaultMethod, checkoutV2.forceDefaultMethod) &&
        Objects.equals(this.merchantInvoiceId, checkoutV2.merchantInvoiceId) &&
        Objects.equals(this.cancelUrl, checkoutV2.cancelUrl) &&
        Objects.equals(this.notificationUrl, checkoutV2.notificationUrl) &&
        Objects.equals(this.customParameters, checkoutV2.customParameters) &&
        Objects.equals(this.customer, checkoutV2.customer) &&
        Objects.equals(this.billing, checkoutV2.billing) &&
        Objects.equals(this.shipping, checkoutV2.shipping) &&
        Objects.equals(this.createRegistration, checkoutV2.createRegistration) &&
        Objects.equals(this.originator, checkoutV2.originator) &&
        Objects.equals(this.returnTo, checkoutV2.returnTo)&&
        Objects.equals(this.additionalProperties, checkoutV2.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationEntityId, merchantTransactionId, amount, currency, nonce, shopperResultUrl, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParameters, customer, billing, shipping, createRegistration, originator, returnTo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutV2 {\n");
    sb.append("    authenticationEntityId: ").append(toIndentedString(authenticationEntityId)).append("\n");
    sb.append("    merchantTransactionId: ").append(toIndentedString(merchantTransactionId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    shopperResultUrl: ").append(toIndentedString(shopperResultUrl)).append("\n");
    sb.append("    defaultPaymentMethod: ").append(toIndentedString(defaultPaymentMethod)).append("\n");
    sb.append("    forceDefaultMethod: ").append(toIndentedString(forceDefaultMethod)).append("\n");
    sb.append("    merchantInvoiceId: ").append(toIndentedString(merchantInvoiceId)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    notificationUrl: ").append(toIndentedString(notificationUrl)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    createRegistration: ").append(toIndentedString(createRegistration)).append("\n");
    sb.append("    originator: ").append(toIndentedString(originator)).append("\n");
    sb.append("    returnTo: ").append(toIndentedString(returnTo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication.entityId");
    openapiFields.add("merchantTransactionId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("nonce");
    openapiFields.add("shopperResultUrl");
    openapiFields.add("defaultPaymentMethod");
    openapiFields.add("forceDefaultMethod");
    openapiFields.add("merchantInvoiceId");
    openapiFields.add("cancelUrl");
    openapiFields.add("notificationUrl");
    openapiFields.add("customParameters");
    openapiFields.add("customer");
    openapiFields.add("billing");
    openapiFields.add("shipping");
    openapiFields.add("createRegistration");
    openapiFields.add("originator");
    openapiFields.add("returnTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authentication.entityId");
    openapiRequiredFields.add("merchantTransactionId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("nonce");
    openapiRequiredFields.add("shopperResultUrl");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutV2 is not found in the empty JSON string", CheckoutV2.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutV2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("authentication.entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication.entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication.entityId").toString()));
      }
      if (!jsonObj.get("merchantTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantTransactionId").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if (!jsonObj.get("shopperResultUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperResultUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperResultUrl").toString()));
      }
      if ((jsonObj.get("defaultPaymentMethod") != null && !jsonObj.get("defaultPaymentMethod").isJsonNull()) && !jsonObj.get("defaultPaymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPaymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPaymentMethod").toString()));
      }
      if ((jsonObj.get("merchantInvoiceId") != null && !jsonObj.get("merchantInvoiceId").isJsonNull()) && !jsonObj.get("merchantInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantInvoiceId").toString()));
      }
      if ((jsonObj.get("cancelUrl") != null && !jsonObj.get("cancelUrl").isJsonNull()) && !jsonObj.get("cancelUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelUrl").toString()));
      }
      if ((jsonObj.get("notificationUrl") != null && !jsonObj.get("notificationUrl").isJsonNull()) && !jsonObj.get("notificationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationUrl").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        CheckoutV2Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        CheckoutV2Billing.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        CheckoutV2Shipping.validateJsonObject(jsonObj.getAsJsonObject("shipping"));
      }
      if ((jsonObj.get("originator") != null && !jsonObj.get("originator").isJsonNull()) && !jsonObj.get("originator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator").toString()));
      }
      if ((jsonObj.get("returnTo") != null && !jsonObj.get("returnTo").isJsonNull()) && !jsonObj.get("returnTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutV2.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutV2>() {
           @Override
           public void write(JsonWriter out, CheckoutV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckoutV2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutV2
  * @throws IOException if the JSON string is invalid with respect to CheckoutV2
  */
  public static CheckoutV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutV2.class);
  }

 /**
  * Convert an instance of CheckoutV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Transaction reconciliation data.
 */
@ApiModel(description = "Transaction reconciliation data.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Recon {
  public static final String SERIALIZED_NAME_CI_MERCHANT_NUMBER = "ciMerchantNumber";
  @SerializedName(SERIALIZED_NAME_CI_MERCHANT_NUMBER)
  private String ciMerchantNumber;

  public static final String SERIALIZED_NAME_RRN = "rrn";
  @SerializedName(SERIALIZED_NAME_RRN)
  private String rrn;

  public static final String SERIALIZED_NAME_AUTH_CODE = "authCode";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_RESULT_CODE = "resultCode";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private String resultCode;

  public static final String SERIALIZED_NAME_STAN = "stan";
  @SerializedName(SERIALIZED_NAME_STAN)
  private String stan;

  public Recon() {
  }

  public Recon ciMerchantNumber(String ciMerchantNumber) {
    
    
    
    
    this.ciMerchantNumber = ciMerchantNumber;
    return this;
  }

   /**
   * The payment service provider merchant number.
   * @return ciMerchantNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789012345", value = "The payment service provider merchant number.")

  public String getCiMerchantNumber() {
    return ciMerchantNumber;
  }


  public void setCiMerchantNumber(String ciMerchantNumber) {
    
    
    
    this.ciMerchantNumber = ciMerchantNumber;
  }


  public Recon rrn(String rrn) {
    
    
    
    
    this.rrn = rrn;
    return this;
  }

   /**
   * The reconciliation reference number from the payment service provider.
   * @return rrn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789012", value = "The reconciliation reference number from the payment service provider.")

  public String getRrn() {
    return rrn;
  }


  public void setRrn(String rrn) {
    
    
    
    this.rrn = rrn;
  }


  public Recon authCode(String authCode) {
    
    
    
    
    this.authCode = authCode;
    return this;
  }

   /**
   * The authorisation code from the payment service provider.
   * @return authCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456", value = "The authorisation code from the payment service provider.")

  public String getAuthCode() {
    return authCode;
  }


  public void setAuthCode(String authCode) {
    
    
    
    this.authCode = authCode;
  }


  public Recon resultCode(String resultCode) {
    
    
    
    
    this.resultCode = resultCode;
    return this;
  }

   /**
   * The result code from the payment service provider.
   * @return resultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The result code from the payment service provider.")

  public String getResultCode() {
    return resultCode;
  }


  public void setResultCode(String resultCode) {
    
    
    
    this.resultCode = resultCode;
  }


  public Recon stan(String stan) {
    
    
    
    
    this.stan = stan;
    return this;
  }

   /**
   * The STAN reference number from the payment service provider.
   * @return stan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456", value = "The STAN reference number from the payment service provider.")

  public String getStan() {
    return stan;
  }


  public void setStan(String stan) {
    
    
    
    this.stan = stan;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Recon instance itself
   */
  public Recon putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recon recon = (Recon) o;
    return Objects.equals(this.ciMerchantNumber, recon.ciMerchantNumber) &&
        Objects.equals(this.rrn, recon.rrn) &&
        Objects.equals(this.authCode, recon.authCode) &&
        Objects.equals(this.resultCode, recon.resultCode) &&
        Objects.equals(this.stan, recon.stan)&&
        Objects.equals(this.additionalProperties, recon.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ciMerchantNumber, rrn, authCode, resultCode, stan, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recon {\n");
    sb.append("    ciMerchantNumber: ").append(toIndentedString(ciMerchantNumber)).append("\n");
    sb.append("    rrn: ").append(toIndentedString(rrn)).append("\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    stan: ").append(toIndentedString(stan)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ciMerchantNumber");
    openapiFields.add("rrn");
    openapiFields.add("authCode");
    openapiFields.add("resultCode");
    openapiFields.add("stan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Recon
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Recon.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recon is not found in the empty JSON string", Recon.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("ciMerchantNumber") != null && !jsonObj.get("ciMerchantNumber").isJsonNull()) && !jsonObj.get("ciMerchantNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciMerchantNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciMerchantNumber").toString()));
      }
      if ((jsonObj.get("rrn") != null && !jsonObj.get("rrn").isJsonNull()) && !jsonObj.get("rrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rrn").toString()));
      }
      if ((jsonObj.get("authCode") != null && !jsonObj.get("authCode").isJsonNull()) && !jsonObj.get("authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authCode").toString()));
      }
      if ((jsonObj.get("resultCode") != null && !jsonObj.get("resultCode").isJsonNull()) && !jsonObj.get("resultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCode").toString()));
      }
      if ((jsonObj.get("stan") != null && !jsonObj.get("stan").isJsonNull()) && !jsonObj.get("stan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recon.class));

       return (TypeAdapter<T>) new TypeAdapter<Recon>() {
           @Override
           public void write(JsonWriter out, Recon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Recon read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Recon instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Recon given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Recon
  * @throws IOException if the JSON string is invalid with respect to Recon
  */
  public static Recon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recon.class);
  }

 /**
  * Convert an instance of Recon to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


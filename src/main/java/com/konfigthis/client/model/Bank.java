/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Mandate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Customer bank account details.
 */
@ApiModel(description = "Customer bank account details.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Bank {
  public static final String SERIALIZED_NAME_HOLDER = "holder";
  @SerializedName(SERIALIZED_NAME_HOLDER)
  private String holder;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public static final String SERIALIZED_NAME_BIC = "bic";
  @SerializedName(SERIALIZED_NAME_BIC)
  private String bic;

  public static final String SERIALIZED_NAME_BANK_CODE = "bankCode";
  @SerializedName(SERIALIZED_NAME_BANK_CODE)
  private String bankCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_MANDATE = "mandate";
  @SerializedName(SERIALIZED_NAME_MANDATE)
  private Mandate mandate;

  public static final String SERIALIZED_NAME_TRANSACTION_DUE_DATE = "transactionDueDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DUE_DATE)
  private String transactionDueDate;

  public Bank() {
  }

  public Bank holder(String holder) {
    
    
    
    
    this.holder = holder;
    return this;
  }

   /**
   * The bank account holder.
   * @return holder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jane Doe", value = "The bank account holder.")

  public String getHolder() {
    return holder;
  }


  public void setHolder(String holder) {
    
    
    
    this.holder = holder;
  }


  public Bank bankName(String bankName) {
    
    
    
    
    this.bankName = bankName;
    return this;
  }

   /**
   * The name of the bank which holds the account.
   * @return bankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Bank A", value = "The name of the bank which holds the account.")

  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    
    
    
    this.bankName = bankName;
  }


  public Bank number(String number) {
    
    
    
    
    this.number = number;
    return this;
  }

   /**
   * The bank account number.
   * @return number
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345678901", value = "The bank account number.")

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    
    
    
    this.number = number;
  }


  public Bank iban(String iban) {
    
    
    
    
    this.iban = iban;
    return this;
  }

   /**
   * The IBAN (International Bank Account Number) associated with the bank account.
   * @return iban
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MU43BOMM0101123456789101000MUR", value = "The IBAN (International Bank Account Number) associated with the bank account.")

  public String getIban() {
    return iban;
  }


  public void setIban(String iban) {
    
    
    
    this.iban = iban;
  }


  public Bank bic(String bic) {
    
    
    
    
    this.bic = bic;
    return this;
  }

   /**
   * The BIC (Bank Identifier Code (SWIFT)) of the bank account.
   * @return bic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "WFBIUS6SELP", value = "The BIC (Bank Identifier Code (SWIFT)) of the bank account.")

  public String getBic() {
    return bic;
  }


  public void setBic(String bic) {
    
    
    
    this.bic = bic;
  }


  public Bank bankCode(String bankCode) {
    
    
    
    
    this.bankCode = bankCode;
    return this;
  }

   /**
   * The code associated with the bank account.
   * @return bankCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10002003", value = "The code associated with the bank account.")

  public String getBankCode() {
    return bankCode;
  }


  public void setBankCode(String bankCode) {
    
    
    
    this.bankCode = bankCode;
  }


  public Bank country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The country code of the bank account (ISO 3166-1).
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZA", value = "The country code of the bank account (ISO 3166-1).")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public Bank mandate(Mandate mandate) {
    
    
    
    
    this.mandate = mandate;
    return this;
  }

   /**
   * Get mandate
   * @return mandate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Mandate getMandate() {
    return mandate;
  }


  public void setMandate(Mandate mandate) {
    
    
    
    this.mandate = mandate;
  }


  public Bank transactionDueDate(String transactionDueDate) {
    
    
    
    
    this.transactionDueDate = transactionDueDate;
    return this;
  }

   /**
   * The due date of the transaction of the direct debit.
   * @return transactionDueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-11-11", value = "The due date of the transaction of the direct debit.")

  public String getTransactionDueDate() {
    return transactionDueDate;
  }


  public void setTransactionDueDate(String transactionDueDate) {
    
    
    
    this.transactionDueDate = transactionDueDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Bank instance itself
   */
  public Bank putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bank bank = (Bank) o;
    return Objects.equals(this.holder, bank.holder) &&
        Objects.equals(this.bankName, bank.bankName) &&
        Objects.equals(this.number, bank.number) &&
        Objects.equals(this.iban, bank.iban) &&
        Objects.equals(this.bic, bank.bic) &&
        Objects.equals(this.bankCode, bank.bankCode) &&
        Objects.equals(this.country, bank.country) &&
        Objects.equals(this.mandate, bank.mandate) &&
        Objects.equals(this.transactionDueDate, bank.transactionDueDate)&&
        Objects.equals(this.additionalProperties, bank.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holder, bankName, number, iban, bic, bankCode, country, mandate, transactionDueDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bank {\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    bic: ").append(toIndentedString(bic)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    mandate: ").append(toIndentedString(mandate)).append("\n");
    sb.append("    transactionDueDate: ").append(toIndentedString(transactionDueDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("holder");
    openapiFields.add("bankName");
    openapiFields.add("number");
    openapiFields.add("iban");
    openapiFields.add("bic");
    openapiFields.add("bankCode");
    openapiFields.add("country");
    openapiFields.add("mandate");
    openapiFields.add("transactionDueDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Bank
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Bank.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bank is not found in the empty JSON string", Bank.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("holder") != null && !jsonObj.get("holder").isJsonNull()) && !jsonObj.get("holder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holder").toString()));
      }
      if ((jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("bic") != null && !jsonObj.get("bic").isJsonNull()) && !jsonObj.get("bic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bic").toString()));
      }
      if ((jsonObj.get("bankCode") != null && !jsonObj.get("bankCode").isJsonNull()) && !jsonObj.get("bankCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCode").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `mandate`
      if (jsonObj.get("mandate") != null && !jsonObj.get("mandate").isJsonNull()) {
        Mandate.validateJsonObject(jsonObj.getAsJsonObject("mandate"));
      }
      if ((jsonObj.get("transactionDueDate") != null && !jsonObj.get("transactionDueDate").isJsonNull()) && !jsonObj.get("transactionDueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionDueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionDueDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bank.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bank' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bank> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bank.class));

       return (TypeAdapter<T>) new TypeAdapter<Bank>() {
           @Override
           public void write(JsonWriter out, Bank value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Bank read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Bank instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Bank given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Bank
  * @throws IOException if the JSON string is invalid with respect to Bank
  */
  public static Bank fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bank.class);
  }

 /**
  * Convert an instance of Bank to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * QueryStatusResponsePayment
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class QueryStatusResponsePayment {
  public static final String SERIALIZED_NAME_LINK_ID = "linkId";
  @SerializedName(SERIALIZED_NAME_LINK_ID)
  private String linkId;

  public static final String SERIALIZED_NAME_LINK_URL = "linkUrl";
  @SerializedName(SERIALIZED_NAME_LINK_URL)
  private String linkUrl;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  /**
   * Payment link status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    INITIATED("initiated"),
    
    PROCESSING("processing"),
    
    EXPIRED("expired"),
    
    CANCELLED("cancelled"),
    
    COMPLETED("completed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Currency code for the payment.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    ZAR("ZAR"),
    
    KES("KES"),
    
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_MERCHANT_INVOICE_ID = "merchantInvoiceId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INVOICE_ID)
  private String merchantInvoiceId;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private String expiryTime;

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private String batchId;

  public QueryStatusResponsePayment() {
  }

  public QueryStatusResponsePayment linkId(String linkId) {
    
    
    
    
    this.linkId = linkId;
    return this;
  }

   /**
   * Payment link ID.
   * @return linkId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "G56F5_ll", value = "Payment link ID.")

  public String getLinkId() {
    return linkId;
  }


  public void setLinkId(String linkId) {
    
    
    
    this.linkId = linkId;
  }


  public QueryStatusResponsePayment linkUrl(String linkUrl) {
    
    
    
    
    this.linkUrl = linkUrl;
    return this;
  }

   /**
   * Payment link URL.
   * @return linkUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://l.ppay.io/af6c33cce7fabefb", value = "Payment link URL.")

  public String getLinkUrl() {
    return linkUrl;
  }


  public void setLinkUrl(String linkUrl) {
    
    
    
    this.linkUrl = linkUrl;
  }


  public QueryStatusResponsePayment amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public QueryStatusResponsePayment amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * Payment amount.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123.45", value = "Payment amount.")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public QueryStatusResponsePayment status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Payment link status.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "COMPLETED", value = "Payment link status.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public QueryStatusResponsePayment currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency code for the payment.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZAR", value = "Currency code for the payment.")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public QueryStatusResponsePayment merchantInvoiceId(String merchantInvoiceId) {
    
    
    
    
    this.merchantInvoiceId = merchantInvoiceId;
    return this;
  }

   /**
   * Payment order number provided by merchant.
   * @return merchantInvoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INV-902", value = "Payment order number provided by merchant.")

  public String getMerchantInvoiceId() {
    return merchantInvoiceId;
  }


  public void setMerchantInvoiceId(String merchantInvoiceId) {
    
    
    
    this.merchantInvoiceId = merchantInvoiceId;
  }


  public QueryStatusResponsePayment entityId(String entityId) {
    
    
    
    
    this.entityId = entityId;
    return this;
  }

   /**
   * Merchant channel ID that the payment link was created in.
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8ac7a4ca77a64c9c0177af52972c13bd", value = "Merchant channel ID that the payment link was created in.")

  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    
    
    
    this.entityId = entityId;
  }


  public QueryStatusResponsePayment notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * A note to include with the payment link.
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Please pay this at your earliest convenience.", value = "A note to include with the payment link.")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public QueryStatusResponsePayment expiryTime(String expiryTime) {
    
    
    
    
    this.expiryTime = expiryTime;
    return this;
  }

   /**
   * Timestamp when the payment link expires.
   * @return expiryTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-10-27T12:45:27Z", value = "Timestamp when the payment link expires.")

  public String getExpiryTime() {
    return expiryTime;
  }


  public void setExpiryTime(String expiryTime) {
    
    
    
    this.expiryTime = expiryTime;
  }


  public QueryStatusResponsePayment batchId(String batchId) {
    
    
    
    
    this.batchId = batchId;
    return this;
  }

   /**
   * Batch ID for the payment link.
   * @return batchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "421e1e63-ddd5-46ec-8812-74eda861259b", value = "Batch ID for the payment link.")

  public String getBatchId() {
    return batchId;
  }


  public void setBatchId(String batchId) {
    
    
    
    this.batchId = batchId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QueryStatusResponsePayment instance itself
   */
  public QueryStatusResponsePayment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryStatusResponsePayment queryStatusResponsePayment = (QueryStatusResponsePayment) o;
    return Objects.equals(this.linkId, queryStatusResponsePayment.linkId) &&
        Objects.equals(this.linkUrl, queryStatusResponsePayment.linkUrl) &&
        Objects.equals(this.amount, queryStatusResponsePayment.amount) &&
        Objects.equals(this.status, queryStatusResponsePayment.status) &&
        Objects.equals(this.currency, queryStatusResponsePayment.currency) &&
        Objects.equals(this.merchantInvoiceId, queryStatusResponsePayment.merchantInvoiceId) &&
        Objects.equals(this.entityId, queryStatusResponsePayment.entityId) &&
        Objects.equals(this.notes, queryStatusResponsePayment.notes) &&
        Objects.equals(this.expiryTime, queryStatusResponsePayment.expiryTime) &&
        Objects.equals(this.batchId, queryStatusResponsePayment.batchId)&&
        Objects.equals(this.additionalProperties, queryStatusResponsePayment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkId, linkUrl, amount, status, currency, merchantInvoiceId, entityId, notes, expiryTime, batchId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryStatusResponsePayment {\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    linkUrl: ").append(toIndentedString(linkUrl)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    merchantInvoiceId: ").append(toIndentedString(merchantInvoiceId)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("linkId");
    openapiFields.add("linkUrl");
    openapiFields.add("amount");
    openapiFields.add("status");
    openapiFields.add("currency");
    openapiFields.add("merchantInvoiceId");
    openapiFields.add("entityId");
    openapiFields.add("notes");
    openapiFields.add("expiryTime");
    openapiFields.add("batchId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QueryStatusResponsePayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QueryStatusResponsePayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryStatusResponsePayment is not found in the empty JSON string", QueryStatusResponsePayment.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("linkId") != null && !jsonObj.get("linkId").isJsonNull()) && !jsonObj.get("linkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkId").toString()));
      }
      if ((jsonObj.get("linkUrl") != null && !jsonObj.get("linkUrl").isJsonNull()) && !jsonObj.get("linkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkUrl").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("merchantInvoiceId") != null && !jsonObj.get("merchantInvoiceId").isJsonNull()) && !jsonObj.get("merchantInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantInvoiceId").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("expiryTime") != null && !jsonObj.get("expiryTime").isJsonNull()) && !jsonObj.get("expiryTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryTime").toString()));
      }
      if ((jsonObj.get("batchId") != null && !jsonObj.get("batchId").isJsonNull()) && !jsonObj.get("batchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryStatusResponsePayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryStatusResponsePayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryStatusResponsePayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryStatusResponsePayment.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryStatusResponsePayment>() {
           @Override
           public void write(JsonWriter out, QueryStatusResponsePayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryStatusResponsePayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             QueryStatusResponsePayment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueryStatusResponsePayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueryStatusResponsePayment
  * @throws IOException if the JSON string is invalid with respect to QueryStatusResponsePayment
  */
  public static QueryStatusResponsePayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryStatusResponsePayment.class);
  }

 /**
  * Convert an instance of QueryStatusResponsePayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CheckoutSuccessfulWebhookAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckoutSuccessfulWebhookAllOf {
  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchant.name";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_RECON_AUTH_CODE = "recon.authCode";
  @SerializedName(SERIALIZED_NAME_RECON_AUTH_CODE)
  private String reconAuthCode;

  public static final String SERIALIZED_NAME_RECON_RESULT_CODE = "recon.resultCode";
  @SerializedName(SERIALIZED_NAME_RECON_RESULT_CODE)
  private String reconResultCode;

  public static final String SERIALIZED_NAME_RECON_RRN = "recon.rrn";
  @SerializedName(SERIALIZED_NAME_RECON_RRN)
  private String reconRrn;

  public static final String SERIALIZED_NAME_RESULT_CODE = "result.code";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private String resultCode = "000.000.000";

  public static final String SERIALIZED_NAME_RESULT_DESCRIPTION = "result.description";
  @SerializedName(SERIALIZED_NAME_RESULT_DESCRIPTION)
  private String resultDescription = "Request successfully processed in 'Merchant in Integrator Test Mode'";

  public static final String SERIALIZED_NAME_RESULT_DETAILS_ACQUIRER_RESPONSE = "resultDetails.AcquirerResponse";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS_ACQUIRER_RESPONSE)
  private String resultDetailsAcquirerResponse;

  public static final String SERIALIZED_NAME_RESULT_DETAILS_CONNECTOR_TX_I_D1 = "resultDetails.ConnectorTxID1";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS_CONNECTOR_TX_I_D1)
  private String resultDetailsConnectorTxID1;

  public static final String SERIALIZED_NAME_RESULT_DETAILS_EXTENDED_DESCRIPTION = "resultDetails.ExtendedDescription";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS_EXTENDED_DESCRIPTION)
  private String resultDetailsExtendedDescription;

  public CheckoutSuccessfulWebhookAllOf() {
  }

  public CheckoutSuccessfulWebhookAllOf merchantName(String merchantName) {
    
    
    
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * Get merchantName
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    
    
    
    this.merchantName = merchantName;
  }


  public CheckoutSuccessfulWebhookAllOf reconAuthCode(String reconAuthCode) {
    
    
    
    
    this.reconAuthCode = reconAuthCode;
    return this;
  }

   /**
   * Get reconAuthCode
   * @return reconAuthCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReconAuthCode() {
    return reconAuthCode;
  }


  public void setReconAuthCode(String reconAuthCode) {
    
    
    
    this.reconAuthCode = reconAuthCode;
  }


  public CheckoutSuccessfulWebhookAllOf reconResultCode(String reconResultCode) {
    
    
    
    
    this.reconResultCode = reconResultCode;
    return this;
  }

   /**
   * Get reconResultCode
   * @return reconResultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReconResultCode() {
    return reconResultCode;
  }


  public void setReconResultCode(String reconResultCode) {
    
    
    
    this.reconResultCode = reconResultCode;
  }


  public CheckoutSuccessfulWebhookAllOf reconRrn(String reconRrn) {
    
    
    
    
    this.reconRrn = reconRrn;
    return this;
  }

   /**
   * Get reconRrn
   * @return reconRrn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReconRrn() {
    return reconRrn;
  }


  public void setReconRrn(String reconRrn) {
    
    
    
    this.reconRrn = reconRrn;
  }


  public CheckoutSuccessfulWebhookAllOf resultCode(String resultCode) {
    
    
    
    
    this.resultCode = resultCode;
    return this;
  }

   /**
   * Get resultCode
   * @return resultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "000.000.000", value = "")

  public String getResultCode() {
    return resultCode;
  }


  public void setResultCode(String resultCode) {
    
    
    
    this.resultCode = resultCode;
  }


  public CheckoutSuccessfulWebhookAllOf resultDescription(String resultDescription) {
    
    
    
    
    this.resultDescription = resultDescription;
    return this;
  }

   /**
   * Get resultDescription
   * @return resultDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Request successfully processed in 'Merchant in Integrator Test Mode'", value = "")

  public String getResultDescription() {
    return resultDescription;
  }


  public void setResultDescription(String resultDescription) {
    
    
    
    this.resultDescription = resultDescription;
  }


  public CheckoutSuccessfulWebhookAllOf resultDetailsAcquirerResponse(String resultDetailsAcquirerResponse) {
    
    
    
    
    this.resultDetailsAcquirerResponse = resultDetailsAcquirerResponse;
    return this;
  }

   /**
   * Get resultDetailsAcquirerResponse
   * @return resultDetailsAcquirerResponse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResultDetailsAcquirerResponse() {
    return resultDetailsAcquirerResponse;
  }


  public void setResultDetailsAcquirerResponse(String resultDetailsAcquirerResponse) {
    
    
    
    this.resultDetailsAcquirerResponse = resultDetailsAcquirerResponse;
  }


  public CheckoutSuccessfulWebhookAllOf resultDetailsConnectorTxID1(String resultDetailsConnectorTxID1) {
    
    
    
    
    this.resultDetailsConnectorTxID1 = resultDetailsConnectorTxID1;
    return this;
  }

   /**
   * Get resultDetailsConnectorTxID1
   * @return resultDetailsConnectorTxID1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResultDetailsConnectorTxID1() {
    return resultDetailsConnectorTxID1;
  }


  public void setResultDetailsConnectorTxID1(String resultDetailsConnectorTxID1) {
    
    
    
    this.resultDetailsConnectorTxID1 = resultDetailsConnectorTxID1;
  }


  public CheckoutSuccessfulWebhookAllOf resultDetailsExtendedDescription(String resultDetailsExtendedDescription) {
    
    
    
    
    this.resultDetailsExtendedDescription = resultDetailsExtendedDescription;
    return this;
  }

   /**
   * Get resultDetailsExtendedDescription
   * @return resultDetailsExtendedDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResultDetailsExtendedDescription() {
    return resultDetailsExtendedDescription;
  }


  public void setResultDetailsExtendedDescription(String resultDetailsExtendedDescription) {
    
    
    
    this.resultDetailsExtendedDescription = resultDetailsExtendedDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutSuccessfulWebhookAllOf instance itself
   */
  public CheckoutSuccessfulWebhookAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutSuccessfulWebhookAllOf checkoutSuccessfulWebhookAllOf = (CheckoutSuccessfulWebhookAllOf) o;
    return Objects.equals(this.merchantName, checkoutSuccessfulWebhookAllOf.merchantName) &&
        Objects.equals(this.reconAuthCode, checkoutSuccessfulWebhookAllOf.reconAuthCode) &&
        Objects.equals(this.reconResultCode, checkoutSuccessfulWebhookAllOf.reconResultCode) &&
        Objects.equals(this.reconRrn, checkoutSuccessfulWebhookAllOf.reconRrn) &&
        Objects.equals(this.resultCode, checkoutSuccessfulWebhookAllOf.resultCode) &&
        Objects.equals(this.resultDescription, checkoutSuccessfulWebhookAllOf.resultDescription) &&
        Objects.equals(this.resultDetailsAcquirerResponse, checkoutSuccessfulWebhookAllOf.resultDetailsAcquirerResponse) &&
        Objects.equals(this.resultDetailsConnectorTxID1, checkoutSuccessfulWebhookAllOf.resultDetailsConnectorTxID1) &&
        Objects.equals(this.resultDetailsExtendedDescription, checkoutSuccessfulWebhookAllOf.resultDetailsExtendedDescription)&&
        Objects.equals(this.additionalProperties, checkoutSuccessfulWebhookAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantName, reconAuthCode, reconResultCode, reconRrn, resultCode, resultDescription, resultDetailsAcquirerResponse, resultDetailsConnectorTxID1, resultDetailsExtendedDescription, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutSuccessfulWebhookAllOf {\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    reconAuthCode: ").append(toIndentedString(reconAuthCode)).append("\n");
    sb.append("    reconResultCode: ").append(toIndentedString(reconResultCode)).append("\n");
    sb.append("    reconRrn: ").append(toIndentedString(reconRrn)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    resultDescription: ").append(toIndentedString(resultDescription)).append("\n");
    sb.append("    resultDetailsAcquirerResponse: ").append(toIndentedString(resultDetailsAcquirerResponse)).append("\n");
    sb.append("    resultDetailsConnectorTxID1: ").append(toIndentedString(resultDetailsConnectorTxID1)).append("\n");
    sb.append("    resultDetailsExtendedDescription: ").append(toIndentedString(resultDetailsExtendedDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchant.name");
    openapiFields.add("recon.authCode");
    openapiFields.add("recon.resultCode");
    openapiFields.add("recon.rrn");
    openapiFields.add("result.code");
    openapiFields.add("result.description");
    openapiFields.add("resultDetails.AcquirerResponse");
    openapiFields.add("resultDetails.ConnectorTxID1");
    openapiFields.add("resultDetails.ExtendedDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutSuccessfulWebhookAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutSuccessfulWebhookAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutSuccessfulWebhookAllOf is not found in the empty JSON string", CheckoutSuccessfulWebhookAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("merchant.name") != null && !jsonObj.get("merchant.name").isJsonNull()) && !jsonObj.get("merchant.name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant.name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant.name").toString()));
      }
      if ((jsonObj.get("recon.authCode") != null && !jsonObj.get("recon.authCode").isJsonNull()) && !jsonObj.get("recon.authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recon.authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recon.authCode").toString()));
      }
      if ((jsonObj.get("recon.resultCode") != null && !jsonObj.get("recon.resultCode").isJsonNull()) && !jsonObj.get("recon.resultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recon.resultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recon.resultCode").toString()));
      }
      if ((jsonObj.get("recon.rrn") != null && !jsonObj.get("recon.rrn").isJsonNull()) && !jsonObj.get("recon.rrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recon.rrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recon.rrn").toString()));
      }
      if ((jsonObj.get("result.code") != null && !jsonObj.get("result.code").isJsonNull()) && !jsonObj.get("result.code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result.code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result.code").toString()));
      }
      if ((jsonObj.get("result.description") != null && !jsonObj.get("result.description").isJsonNull()) && !jsonObj.get("result.description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result.description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result.description").toString()));
      }
      if ((jsonObj.get("resultDetails.AcquirerResponse") != null && !jsonObj.get("resultDetails.AcquirerResponse").isJsonNull()) && !jsonObj.get("resultDetails.AcquirerResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultDetails.AcquirerResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultDetails.AcquirerResponse").toString()));
      }
      if ((jsonObj.get("resultDetails.ConnectorTxID1") != null && !jsonObj.get("resultDetails.ConnectorTxID1").isJsonNull()) && !jsonObj.get("resultDetails.ConnectorTxID1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultDetails.ConnectorTxID1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultDetails.ConnectorTxID1").toString()));
      }
      if ((jsonObj.get("resultDetails.ExtendedDescription") != null && !jsonObj.get("resultDetails.ExtendedDescription").isJsonNull()) && !jsonObj.get("resultDetails.ExtendedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultDetails.ExtendedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultDetails.ExtendedDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutSuccessfulWebhookAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutSuccessfulWebhookAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutSuccessfulWebhookAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutSuccessfulWebhookAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutSuccessfulWebhookAllOf>() {
           @Override
           public void write(JsonWriter out, CheckoutSuccessfulWebhookAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutSuccessfulWebhookAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckoutSuccessfulWebhookAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutSuccessfulWebhookAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutSuccessfulWebhookAllOf
  * @throws IOException if the JSON string is invalid with respect to CheckoutSuccessfulWebhookAllOf
  */
  public static CheckoutSuccessfulWebhookAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutSuccessfulWebhookAllOf.class);
  }

 /**
  * Convert an instance of CheckoutSuccessfulWebhookAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


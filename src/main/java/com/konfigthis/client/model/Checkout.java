/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Checkout
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Checkout {
  public static final String SERIALIZED_NAME_AUTHENTICATION_ENTITY_ID = "authentication.entityId";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_ENTITY_ID)
  private String authenticationEntityId;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_MERCHANT_TRANSACTION_ID = "merchantTransactionId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TRANSACTION_ID)
  private String merchantTransactionId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  /**
   * The payment type for the request. Accepts &#x60;DB&#x60;.  Does not accept &#x60;RG&#x60;, but you can tokenise a card by performing a DB with &#x60;createRegistration&#x60;.  Refund transactions through the Dashboard or as described in the &lt;a href&#x3D;\&quot;https://developer.peachpayments.com/docs/checkout-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;documentation&lt;/a&gt;. 
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
 public enum PaymentTypeEnum {
    DB("DB");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  /**
   * The currency code of the payment request amount.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    ZAR("ZAR"),
    
    USD("USD"),
    
    KES("KES"),
    
    MUR("MUR"),
    
    GBP("GBP"),
    
    EUR("EUR");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_SHOPPER_RESULT_URL = "shopperResultUrl";
  @SerializedName(SERIALIZED_NAME_SHOPPER_RESULT_URL)
  private String shopperResultUrl;

  /**
   * The preferred payment method which is active in the checkout page at the point of redirecting.
   */
  @JsonAdapter(DefaultPaymentMethodEnum.Adapter.class)
 public enum DefaultPaymentMethodEnum {
    CARD("CARD"),
    
    MASTERPASS("MASTERPASS"),
    
    MOBICRED("MOBICRED"),
    
    EFTSECURE("EFTSECURE"),
    
    MPESA("MPESA"),
    
    _1FORYOU("1FORYOU"),
    
    APLUS("APLUS"),
    
    PAYPAL("PAYPAL"),
    
    ZEROPAY("ZEROPAY"),
    
    PAYFLEX("PAYFLEX"),
    
    FINCHOICEPAY("FINCHOICEPAY"),
    
    BLINKBYEMTEL("BLINKBYEMTEL"),
    
    CAPITECPAY("CAPITECPAY"),
    
    NEDBANKDIRECTEFT("NEDBANKDIRECTEFT"),
    
    PAYBYBANK("PAYBYBANK"),
    
    APPLE_PAY("APPLE PAY"),
    
    MCBJUICE("MCBJUICE");

    private String value;

    DefaultPaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultPaymentMethodEnum fromValue(String value) {
      for (DefaultPaymentMethodEnum b : DefaultPaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultPaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultPaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultPaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultPaymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD = "defaultPaymentMethod";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD)
  private DefaultPaymentMethodEnum defaultPaymentMethod;

  /**
   * Force the default payment method to be the only payment method.
   */
  @JsonAdapter(ForceDefaultMethodEnum.Adapter.class)
 public enum ForceDefaultMethodEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    ForceDefaultMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForceDefaultMethodEnum fromValue(String value) {
      for (ForceDefaultMethodEnum b : ForceDefaultMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForceDefaultMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForceDefaultMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForceDefaultMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ForceDefaultMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FORCE_DEFAULT_METHOD = "forceDefaultMethod";
  @SerializedName(SERIALIZED_NAME_FORCE_DEFAULT_METHOD)
  private ForceDefaultMethodEnum forceDefaultMethod = ForceDefaultMethodEnum.FALSE;

  public static final String SERIALIZED_NAME_MERCHANT_INVOICE_ID = "merchantInvoiceId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INVOICE_ID)
  private String merchantInvoiceId;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancelUrl";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  private String cancelUrl;

  public static final String SERIALIZED_NAME_NOTIFICATION_URL = "notificationUrl";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_URL)
  private String notificationUrl;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS_NAME = "customParameters[name]";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS_NAME)
  private String customParametersName;

  public static final String SERIALIZED_NAME_CUSTOMER_MERCHANT_CUSTOMER_ID = "customer.merchantCustomerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MERCHANT_CUSTOMER_ID)
  private String customerMerchantCustomerId;

  public static final String SERIALIZED_NAME_CUSTOMER_GIVEN_NAME = "customer.givenName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GIVEN_NAME)
  private String customerGivenName;

  public static final String SERIALIZED_NAME_CUSTOMER_SURNAME = "customer.surname";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SURNAME)
  private String customerSurname;

  public static final String SERIALIZED_NAME_CUSTOMER_MOBILE = "customer.mobile";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MOBILE)
  private String customerMobile;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customer.email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  /**
   * The customer&#39;s status. Accepts &#x60;NEW&#x60; or &#x60;EXISTING&#x60;.
   */
  @JsonAdapter(CustomerStatusEnum.Adapter.class)
 public enum CustomerStatusEnum {
    NEW("NEW"),
    
    EXISTING("EXISTING");

    private String value;

    CustomerStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerStatusEnum fromValue(String value) {
      for (CustomerStatusEnum b : CustomerStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_STATUS = "customer.status";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_STATUS)
  private CustomerStatusEnum customerStatus;

  public static final String SERIALIZED_NAME_CUSTOMER_BIRTH_DATE = "customer.birthDate";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_BIRTH_DATE)
  private String customerBirthDate;

  public static final String SERIALIZED_NAME_CUSTOMER_IP = "customer.ip";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IP)
  private String customerIp;

  public static final String SERIALIZED_NAME_CUSTOMER_PHONE = "customer.phone";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PHONE)
  private String customerPhone;

  public static final String SERIALIZED_NAME_CUSTOMER_ID_NUMBER = "customer.idNumber";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID_NUMBER)
  private String customerIdNumber;

  public static final String SERIALIZED_NAME_BILLING_STREET1 = "billing.street1";
  @SerializedName(SERIALIZED_NAME_BILLING_STREET1)
  private String billingStreet1;

  public static final String SERIALIZED_NAME_BILLING_STREET2 = "billing.street2";
  @SerializedName(SERIALIZED_NAME_BILLING_STREET2)
  private String billingStreet2;

  public static final String SERIALIZED_NAME_BILLING_CITY = "billing.city";
  @SerializedName(SERIALIZED_NAME_BILLING_CITY)
  private String billingCity;

  public static final String SERIALIZED_NAME_BILLING_COMPANY = "billing.company";
  @SerializedName(SERIALIZED_NAME_BILLING_COMPANY)
  private String billingCompany;

  public static final String SERIALIZED_NAME_BILLING_COUNTRY = "billing.country";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY)
  private String billingCountry;

  public static final String SERIALIZED_NAME_BILLING_STATE = "billing.state";
  @SerializedName(SERIALIZED_NAME_BILLING_STATE)
  private String billingState;

  public static final String SERIALIZED_NAME_BILLING_POSTCODE = "billing.postcode";
  @SerializedName(SERIALIZED_NAME_BILLING_POSTCODE)
  private String billingPostcode;

  public static final String SERIALIZED_NAME_SHIPPING_STREET1 = "shipping.street1";
  @SerializedName(SERIALIZED_NAME_SHIPPING_STREET1)
  private String shippingStreet1;

  public static final String SERIALIZED_NAME_SHIPPING_STREET2 = "shipping.street2";
  @SerializedName(SERIALIZED_NAME_SHIPPING_STREET2)
  private String shippingStreet2;

  public static final String SERIALIZED_NAME_SHIPPING_CITY = "shipping.city";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CITY)
  private String shippingCity;

  public static final String SERIALIZED_NAME_SHIPPING_COMPANY = "shipping.company";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COMPANY)
  private String shippingCompany;

  public static final String SERIALIZED_NAME_SHIPPING_POSTCODE = "shipping.postcode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_POSTCODE)
  private String shippingPostcode;

  public static final String SERIALIZED_NAME_SHIPPING_COUNTRY = "shipping.country";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COUNTRY)
  private String shippingCountry;

  public static final String SERIALIZED_NAME_SHIPPING_STATE = "shipping.state";
  @SerializedName(SERIALIZED_NAME_SHIPPING_STATE)
  private String shippingState;

  public static final String SERIALIZED_NAME_CART_TAX = "cart.tax";
  @SerializedName(SERIALIZED_NAME_CART_TAX)
  private String cartTax;

  public static final String SERIALIZED_NAME_CART_SHIPPING_AMOUNT = "cart.shippingAmount";
  @SerializedName(SERIALIZED_NAME_CART_SHIPPING_AMOUNT)
  private String cartShippingAmount;

  public static final String SERIALIZED_NAME_CART_DISCOUNT = "cart.discount";
  @SerializedName(SERIALIZED_NAME_CART_DISCOUNT)
  private String cartDiscount;

  /**
   * Used to enable card tokenisation with COPYandPAY.
   */
  @JsonAdapter(CreateRegistrationEnum.Adapter.class)
 public enum CreateRegistrationEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    CreateRegistrationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateRegistrationEnum fromValue(String value) {
      for (CreateRegistrationEnum b : CreateRegistrationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreateRegistrationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateRegistrationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateRegistrationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreateRegistrationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CREATE_REGISTRATION = "createRegistration";
  @SerializedName(SERIALIZED_NAME_CREATE_REGISTRATION)
  private CreateRegistrationEnum createRegistration;

  public static final String SERIALIZED_NAME_ORIGINATOR = "originator";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR)
  private String originator;

  /**
   * Text to display on \&quot;Return to Store\&quot; button on completing checkout.
   */
  @JsonAdapter(ReturnToEnum.Adapter.class)
 public enum ReturnToEnum {
    STORE("STORE"),
    
    INVOICE("INVOICE");

    private String value;

    ReturnToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnToEnum fromValue(String value) {
      for (ReturnToEnum b : ReturnToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnToEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RETURN_TO = "returnTo";
  @SerializedName(SERIALIZED_NAME_RETURN_TO)
  private ReturnToEnum returnTo;

  public Checkout() {
  }

  public Checkout authenticationEntityId(String authenticationEntityId) {
    
    
    
    
    this.authenticationEntityId = authenticationEntityId;
    return this;
  }

   /**
   * The entity for the request. By default, this is the channel ID.
   * @return authenticationEntityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8ac7a4ca68c22c4d0168c2caab2e0025", required = true, value = "The entity for the request. By default, this is the channel ID.")

  public String getAuthenticationEntityId() {
    return authenticationEntityId;
  }


  public void setAuthenticationEntityId(String authenticationEntityId) {
    
    
    
    this.authenticationEntityId = authenticationEntityId;
  }


  public Checkout signature(String signature) {
    
    
    
    
    this.signature = signature;
    return this;
  }

   /**
   * Token to verify the integrity of the payment, ensuring that only the merchant sending the request is accepted.
   * @return signature
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "a668342244a9c77b08a2f9090d033d6e2610b431a5c0ca975f32035ed06164f4", required = true, value = "Token to verify the integrity of the payment, ensuring that only the merchant sending the request is accepted.")

  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    
    
    
    this.signature = signature;
  }


  public Checkout merchantTransactionId(String merchantTransactionId) {
    
    
    if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
    }
    
    this.merchantTransactionId = merchantTransactionId;
    return this;
  }

   /**
   * Merchant-provided reference number unique for your transactions.
   * @return merchantTransactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "OrderNo453432", required = true, value = "Merchant-provided reference number unique for your transactions.")

  public String getMerchantTransactionId() {
    return merchantTransactionId;
  }


  public void setMerchantTransactionId(String merchantTransactionId) {
    
    
    if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
    }
    this.merchantTransactionId = merchantTransactionId;
  }


  public Checkout amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the payment request. The period is used as the decimal separator. M-PESA does not support decimal amounts, so Checkout automatically rounds them up.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1010.22", required = true, value = "The amount of the payment request. The period is used as the decimal separator. M-PESA does not support decimal amounts, so Checkout automatically rounds them up.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }


  public Checkout paymentType(PaymentTypeEnum paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The payment type for the request. Accepts &#x60;DB&#x60;.  Does not accept &#x60;RG&#x60;, but you can tokenise a card by performing a DB with &#x60;createRegistration&#x60;.  Refund transactions through the Dashboard or as described in the &lt;a href&#x3D;\&quot;https://developer.peachpayments.com/docs/checkout-refund\&quot; target&#x3D;\&quot;_blank\&quot;&gt;documentation&lt;/a&gt;. 
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DB", required = true, value = "The payment type for the request. Accepts `DB`.  Does not accept `RG`, but you can tokenise a card by performing a DB with `createRegistration`.  Refund transactions through the Dashboard or as described in the <a href=\"https://developer.peachpayments.com/docs/checkout-refund\" target=\"_blank\">documentation</a>. ")

  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(PaymentTypeEnum paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public Checkout currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code of the payment request amount.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ZAR", required = true, value = "The currency code of the payment request amount.")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public Checkout nonce(String nonce) {
    
    
    
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Unique value to represent each request.
   * @return nonce
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "UNQ00012345678", required = true, value = "Unique value to represent each request.")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    
    
    
    this.nonce = nonce;
  }


  public Checkout shopperResultUrl(String shopperResultUrl) {
    
    
    
    
    this.shopperResultUrl = shopperResultUrl;
    return this;
  }

   /**
   * Checkout uses a POST request to redirect the customer to this URL after the customer completes checkout. Must be a valid URL that can be accessed through a browser.
   * @return shopperResultUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://mydemostore.com/OrderNo453432", required = true, value = "Checkout uses a POST request to redirect the customer to this URL after the customer completes checkout. Must be a valid URL that can be accessed through a browser.")

  public String getShopperResultUrl() {
    return shopperResultUrl;
  }


  public void setShopperResultUrl(String shopperResultUrl) {
    
    
    
    this.shopperResultUrl = shopperResultUrl;
  }


  public Checkout defaultPaymentMethod(DefaultPaymentMethodEnum defaultPaymentMethod) {
    
    
    
    
    this.defaultPaymentMethod = defaultPaymentMethod;
    return this;
  }

   /**
   * The preferred payment method which is active in the checkout page at the point of redirecting.
   * @return defaultPaymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CARD", value = "The preferred payment method which is active in the checkout page at the point of redirecting.")

  public DefaultPaymentMethodEnum getDefaultPaymentMethod() {
    return defaultPaymentMethod;
  }


  public void setDefaultPaymentMethod(DefaultPaymentMethodEnum defaultPaymentMethod) {
    
    
    
    this.defaultPaymentMethod = defaultPaymentMethod;
  }


  public Checkout forceDefaultMethod(ForceDefaultMethodEnum forceDefaultMethod) {
    
    
    
    
    this.forceDefaultMethod = forceDefaultMethod;
    return this;
  }

   /**
   * Force the default payment method to be the only payment method.
   * @return forceDefaultMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FALSE", value = "Force the default payment method to be the only payment method.")

  public ForceDefaultMethodEnum getForceDefaultMethod() {
    return forceDefaultMethod;
  }


  public void setForceDefaultMethod(ForceDefaultMethodEnum forceDefaultMethod) {
    
    
    
    this.forceDefaultMethod = forceDefaultMethod;
  }


  public Checkout merchantInvoiceId(String merchantInvoiceId) {
    
    
    if (merchantInvoiceId != null && merchantInvoiceId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantInvoiceId. Length must be greater than or equal to 8.");
    }
    
    this.merchantInvoiceId = merchantInvoiceId;
    return this;
  }

   /**
   * Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards.
   * @return merchantInvoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INV-0001", value = "Merchant-provided invoice number unique for your transactions. This identifier is not sent onwards.")

  public String getMerchantInvoiceId() {
    return merchantInvoiceId;
  }


  public void setMerchantInvoiceId(String merchantInvoiceId) {
    
    
    if (merchantInvoiceId != null && merchantInvoiceId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantInvoiceId. Length must be greater than or equal to 8.");
    }
    this.merchantInvoiceId = merchantInvoiceId;
  }


  public Checkout cancelUrl(String cancelUrl) {
    
    
    
    
    this.cancelUrl = cancelUrl;
    return this;
  }

   /**
   * The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser.
   * @return cancelUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://mydemostore.com/OrderNo453432/cancelled", value = "The customer is redirected to this URL if they cancel checkout. It must be a valid URL that can be reached through a browser.")

  public String getCancelUrl() {
    return cancelUrl;
  }


  public void setCancelUrl(String cancelUrl) {
    
    
    
    this.cancelUrl = cancelUrl;
  }


  public Checkout notificationUrl(String notificationUrl) {
    
    
    
    
    this.notificationUrl = notificationUrl;
    return this;
  }

   /**
   * Override the preconfigured webhook URL for this checkout instance, any changes to checkout will send a webhook to this url.
   * @return notificationUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://mydemostore.com/OrderNo453432/webhook", value = "Override the preconfigured webhook URL for this checkout instance, any changes to checkout will send a webhook to this url.")

  public String getNotificationUrl() {
    return notificationUrl;
  }


  public void setNotificationUrl(String notificationUrl) {
    
    
    
    this.notificationUrl = notificationUrl;
  }


  public Checkout customParametersName(String customParametersName) {
    
    
    
    
    this.customParametersName = customParametersName;
    return this;
  }

   /**
   * A name value pair used for sending custom information.
   * @return customParametersName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "name: Name1 value: Value1", value = "A name value pair used for sending custom information.")

  public String getCustomParametersName() {
    return customParametersName;
  }


  public void setCustomParametersName(String customParametersName) {
    
    
    
    this.customParametersName = customParametersName;
  }


  public Checkout customerMerchantCustomerId(String customerMerchantCustomerId) {
    
    
    if (customerMerchantCustomerId != null && customerMerchantCustomerId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerMerchantCustomerId. Length must be greater than or equal to 0.");
    }
    
    this.customerMerchantCustomerId = customerMerchantCustomerId;
    return this;
  }

   /**
   * An identifier for this customer. Typically this is the ID that identifies the shopper in the shop&#39;s system.
   * @return customerMerchantCustomerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "971020", value = "An identifier for this customer. Typically this is the ID that identifies the shopper in the shop's system.")

  public String getCustomerMerchantCustomerId() {
    return customerMerchantCustomerId;
  }


  public void setCustomerMerchantCustomerId(String customerMerchantCustomerId) {
    
    
    if (customerMerchantCustomerId != null && customerMerchantCustomerId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerMerchantCustomerId. Length must be greater than or equal to 0.");
    }
    this.customerMerchantCustomerId = customerMerchantCustomerId;
  }


  public Checkout customerGivenName(String customerGivenName) {
    
    
    if (customerGivenName != null && customerGivenName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerGivenName. Length must be greater than or equal to 0.");
    }
    
    this.customerGivenName = customerGivenName;
    return this;
  }

   /**
   * The customer&#39;s first name or given name.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. 
   * @return customerGivenName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "The customer's first name or given name.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. ")

  public String getCustomerGivenName() {
    return customerGivenName;
  }


  public void setCustomerGivenName(String customerGivenName) {
    
    
    if (customerGivenName != null && customerGivenName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerGivenName. Length must be greater than or equal to 0.");
    }
    this.customerGivenName = customerGivenName;
  }


  public Checkout customerSurname(String customerSurname) {
    
    
    if (customerSurname != null && customerSurname.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerSurname. Length must be greater than or equal to 0.");
    }
    
    this.customerSurname = customerSurname;
    return this;
  }

   /**
   * The customer&#39;s last name or surname.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. 
   * @return customerSurname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith", value = "The customer's last name or surname.  Required if you send in any other customer parameters, and for some risk checks and payment providers.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.  Truncated after 48 characters. ")

  public String getCustomerSurname() {
    return customerSurname;
  }


  public void setCustomerSurname(String customerSurname) {
    
    
    if (customerSurname != null && customerSurname.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerSurname. Length must be greater than or equal to 0.");
    }
    this.customerSurname = customerSurname;
  }


  public Checkout customerMobile(String customerMobile) {
    
    
    if (customerMobile != null && customerMobile.length() < 5) {
      throw new IllegalArgumentException("Invalid value for customerMobile. Length must be greater than or equal to 5.");
    }
    
    this.customerMobile = customerMobile;
    return this;
  }

   /**
   * The customer&#39;s mobile number.
   * @return customerMobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27123456789", value = "The customer's mobile number.")

  public String getCustomerMobile() {
    return customerMobile;
  }


  public void setCustomerMobile(String customerMobile) {
    
    
    if (customerMobile != null && customerMobile.length() < 5) {
      throw new IllegalArgumentException("Invalid value for customerMobile. Length must be greater than or equal to 5.");
    }
    this.customerMobile = customerMobile;
  }


  public Checkout customerEmail(String customerEmail) {
    
    
    if (customerEmail != null && customerEmail.length() < 6) {
      throw new IllegalArgumentException("Invalid value for customerEmail. Length must be greater than or equal to 6.");
    }
    
    this.customerEmail = customerEmail;
    return this;
  }

   /**
   * The customer&#39;s email address.
   * @return customerEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "johnsmith@mail.com", value = "The customer's email address.")

  public String getCustomerEmail() {
    return customerEmail;
  }


  public void setCustomerEmail(String customerEmail) {
    
    
    if (customerEmail != null && customerEmail.length() < 6) {
      throw new IllegalArgumentException("Invalid value for customerEmail. Length must be greater than or equal to 6.");
    }
    this.customerEmail = customerEmail;
  }


  public Checkout customerStatus(CustomerStatusEnum customerStatus) {
    
    
    
    
    this.customerStatus = customerStatus;
    return this;
  }

   /**
   * The customer&#39;s status. Accepts &#x60;NEW&#x60; or &#x60;EXISTING&#x60;.
   * @return customerStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EXISTING", value = "The customer's status. Accepts `NEW` or `EXISTING`.")

  public CustomerStatusEnum getCustomerStatus() {
    return customerStatus;
  }


  public void setCustomerStatus(CustomerStatusEnum customerStatus) {
    
    
    
    this.customerStatus = customerStatus;
  }


  public Checkout customerBirthDate(String customerBirthDate) {
    
    
    
    
    this.customerBirthDate = customerBirthDate;
    return this;
  }

   /**
   * The customer&#39;s birth date in the yyyy-MM-dd format.
   * @return customerBirthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1970-02-17", value = "The customer's birth date in the yyyy-MM-dd format.")

  public String getCustomerBirthDate() {
    return customerBirthDate;
  }


  public void setCustomerBirthDate(String customerBirthDate) {
    
    
    
    this.customerBirthDate = customerBirthDate;
  }


  public Checkout customerIp(String customerIp) {
    
    
    if (customerIp != null && customerIp.length() < 1) {
      throw new IllegalArgumentException("Invalid value for customerIp. Length must be greater than or equal to 1.");
    }
    
    this.customerIp = customerIp;
    return this;
  }

   /**
   * The customer&#39;s IP address.
   * @return customerIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "192.168.1.1", value = "The customer's IP address.")

  public String getCustomerIp() {
    return customerIp;
  }


  public void setCustomerIp(String customerIp) {
    
    
    if (customerIp != null && customerIp.length() < 1) {
      throw new IllegalArgumentException("Invalid value for customerIp. Length must be greater than or equal to 1.");
    }
    this.customerIp = customerIp;
  }


  public Checkout customerPhone(String customerPhone) {
    
    
    if (customerPhone != null && customerPhone.length() < 5) {
      throw new IllegalArgumentException("Invalid value for customerPhone. Length must be greater than or equal to 5.");
    }
    
    this.customerPhone = customerPhone;
    return this;
  }

   /**
   * The customer&#39;s phone number.
   * @return customerPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27123456789", value = "The customer's phone number.")

  public String getCustomerPhone() {
    return customerPhone;
  }


  public void setCustomerPhone(String customerPhone) {
    
    
    if (customerPhone != null && customerPhone.length() < 5) {
      throw new IllegalArgumentException("Invalid value for customerPhone. Length must be greater than or equal to 5.");
    }
    this.customerPhone = customerPhone;
  }


  public Checkout customerIdNumber(String customerIdNumber) {
    
    
    if (customerIdNumber != null && customerIdNumber.length() < 13) {
      throw new IllegalArgumentException("Invalid value for customerIdNumber. Length must be greater than or equal to 13.");
    }
    
    this.customerIdNumber = customerIdNumber;
    return this;
  }

   /**
   * The customer&#39;s ID number, required for high-risk merchants supporting Capitec Pay.
   * @return customerIdNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9001010000084", value = "The customer's ID number, required for high-risk merchants supporting Capitec Pay.")

  public String getCustomerIdNumber() {
    return customerIdNumber;
  }


  public void setCustomerIdNumber(String customerIdNumber) {
    
    
    if (customerIdNumber != null && customerIdNumber.length() < 13) {
      throw new IllegalArgumentException("Invalid value for customerIdNumber. Length must be greater than or equal to 13.");
    }
    this.customerIdNumber = customerIdNumber;
  }


  public Checkout billingStreet1(String billingStreet1) {
    
    
    if (billingStreet1 != null && billingStreet1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingStreet1. Length must be greater than or equal to 1.");
    }
    
    this.billingStreet1 = billingStreet1;
    return this;
  }

   /**
   * The door number, floor, building number, building name, and/or street name of the billing address.
   * @return billingStreet1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1 Example Road", value = "The door number, floor, building number, building name, and/or street name of the billing address.")

  public String getBillingStreet1() {
    return billingStreet1;
  }


  public void setBillingStreet1(String billingStreet1) {
    
    
    if (billingStreet1 != null && billingStreet1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingStreet1. Length must be greater than or equal to 1.");
    }
    this.billingStreet1 = billingStreet1;
  }


  public Checkout billingStreet2(String billingStreet2) {
    
    
    if (billingStreet2 != null && billingStreet2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingStreet2. Length must be greater than or equal to 1.");
    }
    
    this.billingStreet2 = billingStreet2;
    return this;
  }

   /**
   * The adjoining road or locality, if required, of the billing address.
   * @return billingStreet2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LocalityA", value = "The adjoining road or locality, if required, of the billing address.")

  public String getBillingStreet2() {
    return billingStreet2;
  }


  public void setBillingStreet2(String billingStreet2) {
    
    
    if (billingStreet2 != null && billingStreet2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingStreet2. Length must be greater than or equal to 1.");
    }
    this.billingStreet2 = billingStreet2;
  }


  public Checkout billingCity(String billingCity) {
    
    
    if (billingCity != null && billingCity.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingCity. Length must be greater than or equal to 1.");
    }
    
    this.billingCity = billingCity;
    return this;
  }

   /**
   * The town, district, or city of the billing address.
   * @return billingCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cape Town", value = "The town, district, or city of the billing address.")

  public String getBillingCity() {
    return billingCity;
  }


  public void setBillingCity(String billingCity) {
    
    
    if (billingCity != null && billingCity.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingCity. Length must be greater than or equal to 1.");
    }
    this.billingCity = billingCity;
  }


  public Checkout billingCompany(String billingCompany) {
    
    
    if (billingCompany != null && billingCompany.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingCompany. Length must be greater than or equal to 1.");
    }
    
    this.billingCompany = billingCompany;
    return this;
  }

   /**
   * The company of the billing address.
   * @return billingCompany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CompanyA", value = "The company of the billing address.")

  public String getBillingCompany() {
    return billingCompany;
  }


  public void setBillingCompany(String billingCompany) {
    
    
    if (billingCompany != null && billingCompany.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingCompany. Length must be greater than or equal to 1.");
    }
    this.billingCompany = billingCompany;
  }


  public Checkout billingCountry(String billingCountry) {
    
    
    if (billingCountry != null && billingCountry.length() < 3) {
      throw new IllegalArgumentException("Invalid value for billingCountry. Length must be greater than or equal to 3.");
    }
    
    this.billingCountry = billingCountry;
    return this;
  }

   /**
   * The country of the billing address (ISO 3166-1).
   * @return billingCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZA", value = "The country of the billing address (ISO 3166-1).")

  public String getBillingCountry() {
    return billingCountry;
  }


  public void setBillingCountry(String billingCountry) {
    
    
    if (billingCountry != null && billingCountry.length() < 3) {
      throw new IllegalArgumentException("Invalid value for billingCountry. Length must be greater than or equal to 3.");
    }
    this.billingCountry = billingCountry;
  }


  public Checkout billingState(String billingState) {
    
    
    if (billingState != null && billingState.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingState. Length must be greater than or equal to 1.");
    }
    
    this.billingState = billingState;
    return this;
  }

   /**
   * The county, state, or region of the billing address.
   * @return billingState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Western Cape", value = "The county, state, or region of the billing address.")

  public String getBillingState() {
    return billingState;
  }


  public void setBillingState(String billingState) {
    
    
    if (billingState != null && billingState.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingState. Length must be greater than or equal to 1.");
    }
    this.billingState = billingState;
  }


  public Checkout billingPostcode(String billingPostcode) {
    
    
    if (billingPostcode != null && billingPostcode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingPostcode. Length must be greater than or equal to 1.");
    }
    
    this.billingPostcode = billingPostcode;
    return this;
  }

   /**
   * The postal code or ZIP code of the billing address.
   * @return billingPostcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", value = "The postal code or ZIP code of the billing address.")

  public String getBillingPostcode() {
    return billingPostcode;
  }


  public void setBillingPostcode(String billingPostcode) {
    
    
    if (billingPostcode != null && billingPostcode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for billingPostcode. Length must be greater than or equal to 1.");
    }
    this.billingPostcode = billingPostcode;
  }


  public Checkout shippingStreet1(String shippingStreet1) {
    
    
    if (shippingStreet1 != null && shippingStreet1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingStreet1. Length must be greater than or equal to 1.");
    }
    
    this.shippingStreet1 = shippingStreet1;
    return this;
  }

   /**
   * The door number, floor, building number, building name, and/or street name of the shipping address.
   * @return shippingStreet1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1 Example Road", value = "The door number, floor, building number, building name, and/or street name of the shipping address.")

  public String getShippingStreet1() {
    return shippingStreet1;
  }


  public void setShippingStreet1(String shippingStreet1) {
    
    
    if (shippingStreet1 != null && shippingStreet1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingStreet1. Length must be greater than or equal to 1.");
    }
    this.shippingStreet1 = shippingStreet1;
  }


  public Checkout shippingStreet2(String shippingStreet2) {
    
    
    if (shippingStreet2 != null && shippingStreet2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingStreet2. Length must be greater than or equal to 1.");
    }
    
    this.shippingStreet2 = shippingStreet2;
    return this;
  }

   /**
   * The adjoining road or locality, if required, of the shipping address.
   * @return shippingStreet2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LocalityA", value = "The adjoining road or locality, if required, of the shipping address.")

  public String getShippingStreet2() {
    return shippingStreet2;
  }


  public void setShippingStreet2(String shippingStreet2) {
    
    
    if (shippingStreet2 != null && shippingStreet2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingStreet2. Length must be greater than or equal to 1.");
    }
    this.shippingStreet2 = shippingStreet2;
  }


  public Checkout shippingCity(String shippingCity) {
    
    
    if (shippingCity != null && shippingCity.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingCity. Length must be greater than or equal to 1.");
    }
    
    this.shippingCity = shippingCity;
    return this;
  }

   /**
   * The town, district, or city of the shipping address.
   * @return shippingCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cape Town", value = "The town, district, or city of the shipping address.")

  public String getShippingCity() {
    return shippingCity;
  }


  public void setShippingCity(String shippingCity) {
    
    
    if (shippingCity != null && shippingCity.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingCity. Length must be greater than or equal to 1.");
    }
    this.shippingCity = shippingCity;
  }


  public Checkout shippingCompany(String shippingCompany) {
    
    
    if (shippingCompany != null && shippingCompany.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingCompany. Length must be greater than or equal to 1.");
    }
    
    this.shippingCompany = shippingCompany;
    return this;
  }

   /**
   * The company of the shipping address.
   * @return shippingCompany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CompanyA", value = "The company of the shipping address.")

  public String getShippingCompany() {
    return shippingCompany;
  }


  public void setShippingCompany(String shippingCompany) {
    
    
    if (shippingCompany != null && shippingCompany.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingCompany. Length must be greater than or equal to 1.");
    }
    this.shippingCompany = shippingCompany;
  }


  public Checkout shippingPostcode(String shippingPostcode) {
    
    
    if (shippingPostcode != null && shippingPostcode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingPostcode. Length must be greater than or equal to 1.");
    }
    
    this.shippingPostcode = shippingPostcode;
    return this;
  }

   /**
   * The postal code or ZIP code of the shipping address.
   * @return shippingPostcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234", value = "The postal code or ZIP code of the shipping address.")

  public String getShippingPostcode() {
    return shippingPostcode;
  }


  public void setShippingPostcode(String shippingPostcode) {
    
    
    if (shippingPostcode != null && shippingPostcode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingPostcode. Length must be greater than or equal to 1.");
    }
    this.shippingPostcode = shippingPostcode;
  }


  public Checkout shippingCountry(String shippingCountry) {
    
    
    if (shippingCountry != null && shippingCountry.length() < 3) {
      throw new IllegalArgumentException("Invalid value for shippingCountry. Length must be greater than or equal to 3.");
    }
    
    this.shippingCountry = shippingCountry;
    return this;
  }

   /**
   * The country of the shipping address (ISO 3166-1).
   * @return shippingCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZA", value = "The country of the shipping address (ISO 3166-1).")

  public String getShippingCountry() {
    return shippingCountry;
  }


  public void setShippingCountry(String shippingCountry) {
    
    
    if (shippingCountry != null && shippingCountry.length() < 3) {
      throw new IllegalArgumentException("Invalid value for shippingCountry. Length must be greater than or equal to 3.");
    }
    this.shippingCountry = shippingCountry;
  }


  public Checkout shippingState(String shippingState) {
    
    
    if (shippingState != null && shippingState.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingState. Length must be greater than or equal to 1.");
    }
    
    this.shippingState = shippingState;
    return this;
  }

   /**
   * The county, state, or region of the shipping address.
   * @return shippingState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Western Cape", value = "The county, state, or region of the shipping address.")

  public String getShippingState() {
    return shippingState;
  }


  public void setShippingState(String shippingState) {
    
    
    if (shippingState != null && shippingState.length() < 1) {
      throw new IllegalArgumentException("Invalid value for shippingState. Length must be greater than or equal to 1.");
    }
    this.shippingState = shippingState;
  }


  public Checkout cartTax(String cartTax) {
    
    
    
    
    this.cartTax = cartTax;
    return this;
  }

   /**
   * The tax percentage applied to the price of the item in the shopping cart.
   * @return cartTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "15.00", value = "The tax percentage applied to the price of the item in the shopping cart.")

  public String getCartTax() {
    return cartTax;
  }


  public void setCartTax(String cartTax) {
    
    
    
    this.cartTax = cartTax;
  }


  public Checkout cartShippingAmount(String cartShippingAmount) {
    
    
    
    
    this.cartShippingAmount = cartShippingAmount;
    return this;
  }

   /**
   * The total amount of the cart item including quantity.
   * @return cartShippingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12.25", value = "The total amount of the cart item including quantity.")

  public String getCartShippingAmount() {
    return cartShippingAmount;
  }


  public void setCartShippingAmount(String cartShippingAmount) {
    
    
    
    this.cartShippingAmount = cartShippingAmount;
  }


  public Checkout cartDiscount(String cartDiscount) {
    
    
    
    
    this.cartDiscount = cartDiscount;
    return this;
  }

   /**
   * Discount amount applied on order amount.
   * @return cartDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "02.25", value = "Discount amount applied on order amount.")

  public String getCartDiscount() {
    return cartDiscount;
  }


  public void setCartDiscount(String cartDiscount) {
    
    
    
    this.cartDiscount = cartDiscount;
  }


  public Checkout createRegistration(CreateRegistrationEnum createRegistration) {
    
    
    
    
    this.createRegistration = createRegistration;
    return this;
  }

   /**
   * Used to enable card tokenisation with COPYandPAY.
   * @return createRegistration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FALSE", value = "Used to enable card tokenisation with COPYandPAY.")

  public CreateRegistrationEnum getCreateRegistration() {
    return createRegistration;
  }


  public void setCreateRegistration(CreateRegistrationEnum createRegistration) {
    
    
    
    this.createRegistration = createRegistration;
  }


  public Checkout originator(String originator) {
    
    
    
    
    this.originator = originator;
    return this;
  }

   /**
   * Used to provide a name for the application that is creating the checkout instance.
   * @return originator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Webstore", value = "Used to provide a name for the application that is creating the checkout instance.")

  public String getOriginator() {
    return originator;
  }


  public void setOriginator(String originator) {
    
    
    
    this.originator = originator;
  }


  public Checkout returnTo(ReturnToEnum returnTo) {
    
    
    
    
    this.returnTo = returnTo;
    return this;
  }

   /**
   * Text to display on \&quot;Return to Store\&quot; button on completing checkout.
   * @return returnTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text to display on \"Return to Store\" button on completing checkout.")

  public ReturnToEnum getReturnTo() {
    return returnTo;
  }


  public void setReturnTo(ReturnToEnum returnTo) {
    
    
    
    this.returnTo = returnTo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Checkout instance itself
   */
  public Checkout putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Checkout checkout = (Checkout) o;
    return Objects.equals(this.authenticationEntityId, checkout.authenticationEntityId) &&
        Objects.equals(this.signature, checkout.signature) &&
        Objects.equals(this.merchantTransactionId, checkout.merchantTransactionId) &&
        Objects.equals(this.amount, checkout.amount) &&
        Objects.equals(this.paymentType, checkout.paymentType) &&
        Objects.equals(this.currency, checkout.currency) &&
        Objects.equals(this.nonce, checkout.nonce) &&
        Objects.equals(this.shopperResultUrl, checkout.shopperResultUrl) &&
        Objects.equals(this.defaultPaymentMethod, checkout.defaultPaymentMethod) &&
        Objects.equals(this.forceDefaultMethod, checkout.forceDefaultMethod) &&
        Objects.equals(this.merchantInvoiceId, checkout.merchantInvoiceId) &&
        Objects.equals(this.cancelUrl, checkout.cancelUrl) &&
        Objects.equals(this.notificationUrl, checkout.notificationUrl) &&
        Objects.equals(this.customParametersName, checkout.customParametersName) &&
        Objects.equals(this.customerMerchantCustomerId, checkout.customerMerchantCustomerId) &&
        Objects.equals(this.customerGivenName, checkout.customerGivenName) &&
        Objects.equals(this.customerSurname, checkout.customerSurname) &&
        Objects.equals(this.customerMobile, checkout.customerMobile) &&
        Objects.equals(this.customerEmail, checkout.customerEmail) &&
        Objects.equals(this.customerStatus, checkout.customerStatus) &&
        Objects.equals(this.customerBirthDate, checkout.customerBirthDate) &&
        Objects.equals(this.customerIp, checkout.customerIp) &&
        Objects.equals(this.customerPhone, checkout.customerPhone) &&
        Objects.equals(this.customerIdNumber, checkout.customerIdNumber) &&
        Objects.equals(this.billingStreet1, checkout.billingStreet1) &&
        Objects.equals(this.billingStreet2, checkout.billingStreet2) &&
        Objects.equals(this.billingCity, checkout.billingCity) &&
        Objects.equals(this.billingCompany, checkout.billingCompany) &&
        Objects.equals(this.billingCountry, checkout.billingCountry) &&
        Objects.equals(this.billingState, checkout.billingState) &&
        Objects.equals(this.billingPostcode, checkout.billingPostcode) &&
        Objects.equals(this.shippingStreet1, checkout.shippingStreet1) &&
        Objects.equals(this.shippingStreet2, checkout.shippingStreet2) &&
        Objects.equals(this.shippingCity, checkout.shippingCity) &&
        Objects.equals(this.shippingCompany, checkout.shippingCompany) &&
        Objects.equals(this.shippingPostcode, checkout.shippingPostcode) &&
        Objects.equals(this.shippingCountry, checkout.shippingCountry) &&
        Objects.equals(this.shippingState, checkout.shippingState) &&
        Objects.equals(this.cartTax, checkout.cartTax) &&
        Objects.equals(this.cartShippingAmount, checkout.cartShippingAmount) &&
        Objects.equals(this.cartDiscount, checkout.cartDiscount) &&
        Objects.equals(this.createRegistration, checkout.createRegistration) &&
        Objects.equals(this.originator, checkout.originator) &&
        Objects.equals(this.returnTo, checkout.returnTo)&&
        Objects.equals(this.additionalProperties, checkout.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationEntityId, signature, merchantTransactionId, amount, paymentType, currency, nonce, shopperResultUrl, defaultPaymentMethod, forceDefaultMethod, merchantInvoiceId, cancelUrl, notificationUrl, customParametersName, customerMerchantCustomerId, customerGivenName, customerSurname, customerMobile, customerEmail, customerStatus, customerBirthDate, customerIp, customerPhone, customerIdNumber, billingStreet1, billingStreet2, billingCity, billingCompany, billingCountry, billingState, billingPostcode, shippingStreet1, shippingStreet2, shippingCity, shippingCompany, shippingPostcode, shippingCountry, shippingState, cartTax, cartShippingAmount, cartDiscount, createRegistration, originator, returnTo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Checkout {\n");
    sb.append("    authenticationEntityId: ").append(toIndentedString(authenticationEntityId)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    merchantTransactionId: ").append(toIndentedString(merchantTransactionId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    shopperResultUrl: ").append(toIndentedString(shopperResultUrl)).append("\n");
    sb.append("    defaultPaymentMethod: ").append(toIndentedString(defaultPaymentMethod)).append("\n");
    sb.append("    forceDefaultMethod: ").append(toIndentedString(forceDefaultMethod)).append("\n");
    sb.append("    merchantInvoiceId: ").append(toIndentedString(merchantInvoiceId)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    notificationUrl: ").append(toIndentedString(notificationUrl)).append("\n");
    sb.append("    customParametersName: ").append(toIndentedString(customParametersName)).append("\n");
    sb.append("    customerMerchantCustomerId: ").append(toIndentedString(customerMerchantCustomerId)).append("\n");
    sb.append("    customerGivenName: ").append(toIndentedString(customerGivenName)).append("\n");
    sb.append("    customerSurname: ").append(toIndentedString(customerSurname)).append("\n");
    sb.append("    customerMobile: ").append(toIndentedString(customerMobile)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerStatus: ").append(toIndentedString(customerStatus)).append("\n");
    sb.append("    customerBirthDate: ").append(toIndentedString(customerBirthDate)).append("\n");
    sb.append("    customerIp: ").append(toIndentedString(customerIp)).append("\n");
    sb.append("    customerPhone: ").append(toIndentedString(customerPhone)).append("\n");
    sb.append("    customerIdNumber: ").append(toIndentedString(customerIdNumber)).append("\n");
    sb.append("    billingStreet1: ").append(toIndentedString(billingStreet1)).append("\n");
    sb.append("    billingStreet2: ").append(toIndentedString(billingStreet2)).append("\n");
    sb.append("    billingCity: ").append(toIndentedString(billingCity)).append("\n");
    sb.append("    billingCompany: ").append(toIndentedString(billingCompany)).append("\n");
    sb.append("    billingCountry: ").append(toIndentedString(billingCountry)).append("\n");
    sb.append("    billingState: ").append(toIndentedString(billingState)).append("\n");
    sb.append("    billingPostcode: ").append(toIndentedString(billingPostcode)).append("\n");
    sb.append("    shippingStreet1: ").append(toIndentedString(shippingStreet1)).append("\n");
    sb.append("    shippingStreet2: ").append(toIndentedString(shippingStreet2)).append("\n");
    sb.append("    shippingCity: ").append(toIndentedString(shippingCity)).append("\n");
    sb.append("    shippingCompany: ").append(toIndentedString(shippingCompany)).append("\n");
    sb.append("    shippingPostcode: ").append(toIndentedString(shippingPostcode)).append("\n");
    sb.append("    shippingCountry: ").append(toIndentedString(shippingCountry)).append("\n");
    sb.append("    shippingState: ").append(toIndentedString(shippingState)).append("\n");
    sb.append("    cartTax: ").append(toIndentedString(cartTax)).append("\n");
    sb.append("    cartShippingAmount: ").append(toIndentedString(cartShippingAmount)).append("\n");
    sb.append("    cartDiscount: ").append(toIndentedString(cartDiscount)).append("\n");
    sb.append("    createRegistration: ").append(toIndentedString(createRegistration)).append("\n");
    sb.append("    originator: ").append(toIndentedString(originator)).append("\n");
    sb.append("    returnTo: ").append(toIndentedString(returnTo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication.entityId");
    openapiFields.add("signature");
    openapiFields.add("merchantTransactionId");
    openapiFields.add("amount");
    openapiFields.add("paymentType");
    openapiFields.add("currency");
    openapiFields.add("nonce");
    openapiFields.add("shopperResultUrl");
    openapiFields.add("defaultPaymentMethod");
    openapiFields.add("forceDefaultMethod");
    openapiFields.add("merchantInvoiceId");
    openapiFields.add("cancelUrl");
    openapiFields.add("notificationUrl");
    openapiFields.add("customParameters[name]");
    openapiFields.add("customer.merchantCustomerId");
    openapiFields.add("customer.givenName");
    openapiFields.add("customer.surname");
    openapiFields.add("customer.mobile");
    openapiFields.add("customer.email");
    openapiFields.add("customer.status");
    openapiFields.add("customer.birthDate");
    openapiFields.add("customer.ip");
    openapiFields.add("customer.phone");
    openapiFields.add("customer.idNumber");
    openapiFields.add("billing.street1");
    openapiFields.add("billing.street2");
    openapiFields.add("billing.city");
    openapiFields.add("billing.company");
    openapiFields.add("billing.country");
    openapiFields.add("billing.state");
    openapiFields.add("billing.postcode");
    openapiFields.add("shipping.street1");
    openapiFields.add("shipping.street2");
    openapiFields.add("shipping.city");
    openapiFields.add("shipping.company");
    openapiFields.add("shipping.postcode");
    openapiFields.add("shipping.country");
    openapiFields.add("shipping.state");
    openapiFields.add("cart.tax");
    openapiFields.add("cart.shippingAmount");
    openapiFields.add("cart.discount");
    openapiFields.add("createRegistration");
    openapiFields.add("originator");
    openapiFields.add("returnTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authentication.entityId");
    openapiRequiredFields.add("signature");
    openapiRequiredFields.add("merchantTransactionId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("paymentType");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("nonce");
    openapiRequiredFields.add("shopperResultUrl");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Checkout
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Checkout.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Checkout is not found in the empty JSON string", Checkout.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Checkout.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("authentication.entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication.entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication.entityId").toString()));
      }
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (!jsonObj.get("merchantTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantTransactionId").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if (!jsonObj.get("shopperResultUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperResultUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperResultUrl").toString()));
      }
      if ((jsonObj.get("defaultPaymentMethod") != null && !jsonObj.get("defaultPaymentMethod").isJsonNull()) && !jsonObj.get("defaultPaymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPaymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPaymentMethod").toString()));
      }
      if ((jsonObj.get("forceDefaultMethod") != null && !jsonObj.get("forceDefaultMethod").isJsonNull()) && !jsonObj.get("forceDefaultMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forceDefaultMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forceDefaultMethod").toString()));
      }
      if ((jsonObj.get("merchantInvoiceId") != null && !jsonObj.get("merchantInvoiceId").isJsonNull()) && !jsonObj.get("merchantInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantInvoiceId").toString()));
      }
      if ((jsonObj.get("cancelUrl") != null && !jsonObj.get("cancelUrl").isJsonNull()) && !jsonObj.get("cancelUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelUrl").toString()));
      }
      if ((jsonObj.get("notificationUrl") != null && !jsonObj.get("notificationUrl").isJsonNull()) && !jsonObj.get("notificationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationUrl").toString()));
      }
      if ((jsonObj.get("customParameters[name]") != null && !jsonObj.get("customParameters[name]").isJsonNull()) && !jsonObj.get("customParameters[name]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customParameters[name]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customParameters[name]").toString()));
      }
      if ((jsonObj.get("customer.merchantCustomerId") != null && !jsonObj.get("customer.merchantCustomerId").isJsonNull()) && !jsonObj.get("customer.merchantCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.merchantCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.merchantCustomerId").toString()));
      }
      if ((jsonObj.get("customer.givenName") != null && !jsonObj.get("customer.givenName").isJsonNull()) && !jsonObj.get("customer.givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.givenName").toString()));
      }
      if ((jsonObj.get("customer.surname") != null && !jsonObj.get("customer.surname").isJsonNull()) && !jsonObj.get("customer.surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.surname").toString()));
      }
      if ((jsonObj.get("customer.mobile") != null && !jsonObj.get("customer.mobile").isJsonNull()) && !jsonObj.get("customer.mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.mobile").toString()));
      }
      if ((jsonObj.get("customer.email") != null && !jsonObj.get("customer.email").isJsonNull()) && !jsonObj.get("customer.email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.email").toString()));
      }
      if ((jsonObj.get("customer.status") != null && !jsonObj.get("customer.status").isJsonNull()) && !jsonObj.get("customer.status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.status").toString()));
      }
      if ((jsonObj.get("customer.birthDate") != null && !jsonObj.get("customer.birthDate").isJsonNull()) && !jsonObj.get("customer.birthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.birthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.birthDate").toString()));
      }
      if ((jsonObj.get("customer.ip") != null && !jsonObj.get("customer.ip").isJsonNull()) && !jsonObj.get("customer.ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.ip").toString()));
      }
      if ((jsonObj.get("customer.phone") != null && !jsonObj.get("customer.phone").isJsonNull()) && !jsonObj.get("customer.phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.phone").toString()));
      }
      if ((jsonObj.get("customer.idNumber") != null && !jsonObj.get("customer.idNumber").isJsonNull()) && !jsonObj.get("customer.idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer.idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer.idNumber").toString()));
      }
      if ((jsonObj.get("billing.street1") != null && !jsonObj.get("billing.street1").isJsonNull()) && !jsonObj.get("billing.street1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing.street1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing.street1").toString()));
      }
      if ((jsonObj.get("billing.street2") != null && !jsonObj.get("billing.street2").isJsonNull()) && !jsonObj.get("billing.street2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing.street2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing.street2").toString()));
      }
      if ((jsonObj.get("billing.city") != null && !jsonObj.get("billing.city").isJsonNull()) && !jsonObj.get("billing.city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing.city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing.city").toString()));
      }
      if ((jsonObj.get("billing.company") != null && !jsonObj.get("billing.company").isJsonNull()) && !jsonObj.get("billing.company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing.company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing.company").toString()));
      }
      if ((jsonObj.get("billing.country") != null && !jsonObj.get("billing.country").isJsonNull()) && !jsonObj.get("billing.country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing.country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing.country").toString()));
      }
      if ((jsonObj.get("billing.state") != null && !jsonObj.get("billing.state").isJsonNull()) && !jsonObj.get("billing.state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing.state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing.state").toString()));
      }
      if ((jsonObj.get("billing.postcode") != null && !jsonObj.get("billing.postcode").isJsonNull()) && !jsonObj.get("billing.postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing.postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing.postcode").toString()));
      }
      if ((jsonObj.get("shipping.street1") != null && !jsonObj.get("shipping.street1").isJsonNull()) && !jsonObj.get("shipping.street1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping.street1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping.street1").toString()));
      }
      if ((jsonObj.get("shipping.street2") != null && !jsonObj.get("shipping.street2").isJsonNull()) && !jsonObj.get("shipping.street2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping.street2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping.street2").toString()));
      }
      if ((jsonObj.get("shipping.city") != null && !jsonObj.get("shipping.city").isJsonNull()) && !jsonObj.get("shipping.city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping.city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping.city").toString()));
      }
      if ((jsonObj.get("shipping.company") != null && !jsonObj.get("shipping.company").isJsonNull()) && !jsonObj.get("shipping.company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping.company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping.company").toString()));
      }
      if ((jsonObj.get("shipping.postcode") != null && !jsonObj.get("shipping.postcode").isJsonNull()) && !jsonObj.get("shipping.postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping.postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping.postcode").toString()));
      }
      if ((jsonObj.get("shipping.country") != null && !jsonObj.get("shipping.country").isJsonNull()) && !jsonObj.get("shipping.country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping.country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping.country").toString()));
      }
      if ((jsonObj.get("shipping.state") != null && !jsonObj.get("shipping.state").isJsonNull()) && !jsonObj.get("shipping.state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping.state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping.state").toString()));
      }
      if ((jsonObj.get("cart.tax") != null && !jsonObj.get("cart.tax").isJsonNull()) && !jsonObj.get("cart.tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart.tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart.tax").toString()));
      }
      if ((jsonObj.get("cart.shippingAmount") != null && !jsonObj.get("cart.shippingAmount").isJsonNull()) && !jsonObj.get("cart.shippingAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart.shippingAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart.shippingAmount").toString()));
      }
      if ((jsonObj.get("cart.discount") != null && !jsonObj.get("cart.discount").isJsonNull()) && !jsonObj.get("cart.discount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart.discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart.discount").toString()));
      }
      if ((jsonObj.get("createRegistration") != null && !jsonObj.get("createRegistration").isJsonNull()) && !jsonObj.get("createRegistration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createRegistration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createRegistration").toString()));
      }
      if ((jsonObj.get("originator") != null && !jsonObj.get("originator").isJsonNull()) && !jsonObj.get("originator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originator").toString()));
      }
      if ((jsonObj.get("returnTo") != null && !jsonObj.get("returnTo").isJsonNull()) && !jsonObj.get("returnTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Checkout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Checkout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Checkout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Checkout.class));

       return (TypeAdapter<T>) new TypeAdapter<Checkout>() {
           @Override
           public void write(JsonWriter out, Checkout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Checkout read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Checkout instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Checkout given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Checkout
  * @throws IOException if the JSON string is invalid with respect to Checkout
  */
  public static Checkout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Checkout.class);
  }

 /**
  * Convert an instance of Checkout to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


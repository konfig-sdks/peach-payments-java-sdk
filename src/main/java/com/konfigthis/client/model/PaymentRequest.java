/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Authentication;
import com.konfigthis.client.model.Cart;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.PaymentBrand;
import com.konfigthis.client.model.PaymentType;
import com.konfigthis.client.model.Shopify;
import com.konfigthis.client.model.VirtualAccount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Initiate a debit transaction.
 */
@ApiModel(description = "Initiate a debit transaction.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentRequest {
  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private Authentication authentication;

  public static final String SERIALIZED_NAME_MERCHANT_TRANSACTION_ID = "merchantTransactionId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TRANSACTION_ID)
  private String merchantTransactionId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PAYMENT_BRAND = "paymentBrand";
  @SerializedName(SERIALIZED_NAME_PAYMENT_BRAND)
  private PaymentBrand paymentBrand;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentType paymentType;

  public static final String SERIALIZED_NAME_VIRTUAL_ACCOUNT = "virtualAccount";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_ACCOUNT)
  private VirtualAccount virtualAccount;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Address shipping;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private Address billing;

  public static final String SERIALIZED_NAME_SHOPIFY = "shopify";
  @SerializedName(SERIALIZED_NAME_SHOPIFY)
  private Shopify shopify;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_CART = "cart";
  @SerializedName(SERIALIZED_NAME_CART)
  private Cart cart;

  public static final String SERIALIZED_NAME_MERCHANT_INVOICE_ID = "merchantInvoiceId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INVOICE_ID)
  private String merchantInvoiceId;

  public static final String SERIALIZED_NAME_SHOPPER_RESULT_URL = "shopperResultUrl";
  @SerializedName(SERIALIZED_NAME_SHOPPER_RESULT_URL)
  private URI shopperResultUrl;

  public PaymentRequest() {
  }

  public PaymentRequest authentication(Authentication authentication) {
    
    
    
    
    this.authentication = authentication;
    return this;
  }

   /**
   * Get authentication
   * @return authentication
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Authentication getAuthentication() {
    return authentication;
  }


  public void setAuthentication(Authentication authentication) {
    
    
    
    this.authentication = authentication;
  }


  public PaymentRequest merchantTransactionId(String merchantTransactionId) {
    
    
    
    
    this.merchantTransactionId = merchantTransactionId;
    return this;
  }

   /**
   * Merchant-provided reference number, often used for reconciliation.
   * @return merchantTransactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "test12345", required = true, value = "Merchant-provided reference number, often used for reconciliation.")

  public String getMerchantTransactionId() {
    return merchantTransactionId;
  }


  public void setMerchantTransactionId(String merchantTransactionId) {
    
    
    
    this.merchantTransactionId = merchantTransactionId;
  }


  public PaymentRequest amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The payment request amount.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "22.50", required = true, value = "The payment request amount.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }


  public PaymentRequest currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code of the payment request amount as defined by ISO-4217.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ZAR", required = true, value = "The currency code of the payment request amount as defined by ISO-4217.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public PaymentRequest paymentBrand(PaymentBrand paymentBrand) {
    
    
    
    
    this.paymentBrand = paymentBrand;
    return this;
  }

   /**
   * Get paymentBrand
   * @return paymentBrand
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PaymentBrand getPaymentBrand() {
    return paymentBrand;
  }


  public void setPaymentBrand(PaymentBrand paymentBrand) {
    
    
    
    this.paymentBrand = paymentBrand;
  }


  public PaymentRequest paymentType(PaymentType paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PaymentType getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(PaymentType paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public PaymentRequest virtualAccount(VirtualAccount virtualAccount) {
    
    
    
    
    this.virtualAccount = virtualAccount;
    return this;
  }

   /**
   * Get virtualAccount
   * @return virtualAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VirtualAccount getVirtualAccount() {
    return virtualAccount;
  }


  public void setVirtualAccount(VirtualAccount virtualAccount) {
    
    
    
    this.virtualAccount = virtualAccount;
  }


  public PaymentRequest shipping(Address shipping) {
    
    
    
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getShipping() {
    return shipping;
  }


  public void setShipping(Address shipping) {
    
    
    
    this.shipping = shipping;
  }


  public PaymentRequest billing(Address billing) {
    
    
    
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getBilling() {
    return billing;
  }


  public void setBilling(Address billing) {
    
    
    
    this.billing = billing;
  }


  public PaymentRequest shopify(Shopify shopify) {
    
    
    
    
    this.shopify = shopify;
    return this;
  }

   /**
   * Get shopify
   * @return shopify
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Shopify getShopify() {
    return shopify;
  }


  public void setShopify(Shopify shopify) {
    
    
    
    this.shopify = shopify;
  }


  public PaymentRequest customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public PaymentRequest cart(Cart cart) {
    
    
    
    
    this.cart = cart;
    return this;
  }

   /**
   * Get cart
   * @return cart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Cart getCart() {
    return cart;
  }


  public void setCart(Cart cart) {
    
    
    
    this.cart = cart;
  }


  public PaymentRequest merchantInvoiceId(String merchantInvoiceId) {
    
    
    
    
    this.merchantInvoiceId = merchantInvoiceId;
    return this;
  }

   /**
   * The merchant&#39;s invoice ID.
   * @return merchantInvoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20170630407200", value = "The merchant's invoice ID.")

  public String getMerchantInvoiceId() {
    return merchantInvoiceId;
  }


  public void setMerchantInvoiceId(String merchantInvoiceId) {
    
    
    
    this.merchantInvoiceId = merchantInvoiceId;
  }


  public PaymentRequest shopperResultUrl(URI shopperResultUrl) {
    
    
    
    
    this.shopperResultUrl = shopperResultUrl;
    return this;
  }

   /**
   * The Payments API redirects the user to this URL after processing the payment request.
   * @return shopperResultUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://example.com/redirect", value = "The Payments API redirects the user to this URL after processing the payment request.")

  public URI getShopperResultUrl() {
    return shopperResultUrl;
  }


  public void setShopperResultUrl(URI shopperResultUrl) {
    
    
    
    this.shopperResultUrl = shopperResultUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentRequest instance itself
   */
  public PaymentRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequest paymentRequest = (PaymentRequest) o;
    return Objects.equals(this.authentication, paymentRequest.authentication) &&
        Objects.equals(this.merchantTransactionId, paymentRequest.merchantTransactionId) &&
        Objects.equals(this.amount, paymentRequest.amount) &&
        Objects.equals(this.currency, paymentRequest.currency) &&
        Objects.equals(this.paymentBrand, paymentRequest.paymentBrand) &&
        Objects.equals(this.paymentType, paymentRequest.paymentType) &&
        Objects.equals(this.virtualAccount, paymentRequest.virtualAccount) &&
        Objects.equals(this.shipping, paymentRequest.shipping) &&
        Objects.equals(this.billing, paymentRequest.billing) &&
        Objects.equals(this.shopify, paymentRequest.shopify) &&
        Objects.equals(this.customer, paymentRequest.customer) &&
        Objects.equals(this.cart, paymentRequest.cart) &&
        Objects.equals(this.merchantInvoiceId, paymentRequest.merchantInvoiceId) &&
        Objects.equals(this.shopperResultUrl, paymentRequest.shopperResultUrl)&&
        Objects.equals(this.additionalProperties, paymentRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authentication, merchantTransactionId, amount, currency, paymentBrand, paymentType, virtualAccount, shipping, billing, shopify, customer, cart, merchantInvoiceId, shopperResultUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequest {\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    merchantTransactionId: ").append(toIndentedString(merchantTransactionId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    paymentBrand: ").append(toIndentedString(paymentBrand)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    virtualAccount: ").append(toIndentedString(virtualAccount)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    shopify: ").append(toIndentedString(shopify)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    cart: ").append(toIndentedString(cart)).append("\n");
    sb.append("    merchantInvoiceId: ").append(toIndentedString(merchantInvoiceId)).append("\n");
    sb.append("    shopperResultUrl: ").append(toIndentedString(shopperResultUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication");
    openapiFields.add("merchantTransactionId");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("paymentBrand");
    openapiFields.add("paymentType");
    openapiFields.add("virtualAccount");
    openapiFields.add("shipping");
    openapiFields.add("billing");
    openapiFields.add("shopify");
    openapiFields.add("customer");
    openapiFields.add("cart");
    openapiFields.add("merchantInvoiceId");
    openapiFields.add("shopperResultUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authentication");
    openapiRequiredFields.add("merchantTransactionId");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("paymentBrand");
    openapiRequiredFields.add("paymentType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentRequest is not found in the empty JSON string", PaymentRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `authentication`
      Authentication.validateJsonObject(jsonObj.getAsJsonObject("authentication"));
      if (!jsonObj.get("merchantTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantTransactionId").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `virtualAccount`
      if (jsonObj.get("virtualAccount") != null && !jsonObj.get("virtualAccount").isJsonNull()) {
        VirtualAccount.validateJsonObject(jsonObj.getAsJsonObject("virtualAccount"));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("shipping"));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      // validate the optional field `shopify`
      if (jsonObj.get("shopify") != null && !jsonObj.get("shopify").isJsonNull()) {
        Shopify.validateJsonObject(jsonObj.getAsJsonObject("shopify"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      // validate the optional field `cart`
      if (jsonObj.get("cart") != null && !jsonObj.get("cart").isJsonNull()) {
        Cart.validateJsonObject(jsonObj.getAsJsonObject("cart"));
      }
      if ((jsonObj.get("merchantInvoiceId") != null && !jsonObj.get("merchantInvoiceId").isJsonNull()) && !jsonObj.get("merchantInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantInvoiceId").toString()));
      }
      if ((jsonObj.get("shopperResultUrl") != null && !jsonObj.get("shopperResultUrl").isJsonNull()) && !jsonObj.get("shopperResultUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperResultUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperResultUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentRequest>() {
           @Override
           public void write(JsonWriter out, PaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentRequest
  * @throws IOException if the JSON string is invalid with respect to PaymentRequest
  */
  public static PaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentRequest.class);
  }

 /**
  * Convert an instance of PaymentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


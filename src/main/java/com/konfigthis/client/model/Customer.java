/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.CustomerBrowser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Optional object sent if customer data is required.
 */
@ApiModel(description = "Optional object sent if customer data is required.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Customer {
  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_WHATSAPP = "whatsapp";
  @SerializedName(SERIALIZED_NAME_WHATSAPP)
  private String whatsapp;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private Address billing;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_MERCHANT_CUSTOMER_LANGUAGE = "merchantCustomerLanguage";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CUSTOMER_LANGUAGE)
  private String merchantCustomerLanguage;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_MERCHANT_CUSTOMER_ID = "merchantCustomerId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CUSTOMER_ID)
  private String merchantCustomerId;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_TAX_TYPE = "taxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_BROWSER = "browser";
  @SerializedName(SERIALIZED_NAME_BROWSER)
  private CustomerBrowser browser;

  public Customer() {
  }

  public Customer givenName(String givenName) {
    
    
    if (givenName != null && givenName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for givenName. Length must be greater than or equal to 1.");
    }
    
    this.givenName = givenName;
    return this;
  }

   /**
   * The customer&#39;s first name or given name. Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.
   * @return givenName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Jane", required = true, value = "The customer's first name or given name. Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries.")

  public String getGivenName() {
    return givenName;
  }


  public void setGivenName(String givenName) {
    
    
    if (givenName != null && givenName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for givenName. Length must be greater than or equal to 1.");
    }
    this.givenName = givenName;
  }


  public Customer surname(String surname) {
    
    
    if (surname != null && surname.length() < 0) {
      throw new IllegalArgumentException("Invalid value for surname. Length must be greater than or equal to 0.");
    }
    
    this.surname = surname;
    return this;
  }

   /**
   * The customer&#39;s last name or surname. Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.
   * @return surname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Doe", value = "The customer's last name or surname. Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries.")

  public String getSurname() {
    return surname;
  }


  public void setSurname(String surname) {
    
    
    if (surname != null && surname.length() < 0) {
      throw new IllegalArgumentException("Invalid value for surname. Length must be greater than or equal to 0.");
    }
    this.surname = surname;
  }


  public Customer email(String email) {
    
    
    if (email != null && email.length() < 6) {
      throw new IllegalArgumentException("Invalid value for email. Length must be greater than or equal to 6.");
    }
    
    this.email = email;
    return this;
  }

   /**
   * The customer&#39;s email  address.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "name@example.com", value = "The customer's email  address.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    if (email != null && email.length() < 6) {
      throw new IllegalArgumentException("Invalid value for email. Length must be greater than or equal to 6.");
    }
    this.email = email;
  }


  public Customer mobile(String mobile) {
    
    
    if (mobile != null && mobile.length() < 5) {
      throw new IllegalArgumentException("Invalid value for mobile. Length must be greater than or equal to 5.");
    }
    
    this.mobile = mobile;
    return this;
  }

   /**
   * The customer&#39;s mobile phone number.
   * @return mobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27610107822", value = "The customer's mobile phone number.")

  public String getMobile() {
    return mobile;
  }


  public void setMobile(String mobile) {
    
    
    if (mobile != null && mobile.length() < 5) {
      throw new IllegalArgumentException("Invalid value for mobile. Length must be greater than or equal to 5.");
    }
    this.mobile = mobile;
  }


  public Customer whatsapp(String whatsapp) {
    
    
    if (whatsapp != null && whatsapp.length() < 5) {
      throw new IllegalArgumentException("Invalid value for whatsapp. Length must be greater than or equal to 5.");
    }
    
    this.whatsapp = whatsapp;
    return this;
  }

   /**
   * The customer&#39;s WhatsApp number. Required for communicating with customers regarding payment. Format should be +27123456789. Required if sendWhatsapp is true.
   * @return whatsapp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "+27123456789", value = "The customer's WhatsApp number. Required for communicating with customers regarding payment. Format should be +27123456789. Required if sendWhatsapp is true.")

  public String getWhatsapp() {
    return whatsapp;
  }


  public void setWhatsapp(String whatsapp) {
    
    
    if (whatsapp != null && whatsapp.length() < 5) {
      throw new IllegalArgumentException("Invalid value for whatsapp. Length must be greater than or equal to 5.");
    }
    this.whatsapp = whatsapp;
  }


  public Customer billing(Address billing) {
    
    
    
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getBilling() {
    return billing;
  }


  public void setBilling(Address billing) {
    
    
    
    this.billing = billing;
  }


  public Customer fax(String fax) {
    
    
    
    
    this.fax = fax;
    return this;
  }

   /**
   * The customer&#39;s fax number, if provided.
   * @return fax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2919392022", value = "The customer's fax number, if provided.")

  public String getFax() {
    return fax;
  }


  public void setFax(String fax) {
    
    
    
    this.fax = fax;
  }


  public Customer phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * The customer&#39;s phone number.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27210030000", value = "The customer's phone number.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public Customer ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * The customer&#39;s IP address.
   * @return ip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.0.0.0", value = "The customer's IP address.")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public Customer merchantCustomerLanguage(String merchantCustomerLanguage) {
    
    
    
    
    this.merchantCustomerLanguage = merchantCustomerLanguage;
    return this;
  }

   /**
   * The language used for the customer on the merchant&#39;s site.
   * @return merchantCustomerLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EN", value = "The language used for the customer on the merchant's site.")

  public String getMerchantCustomerLanguage() {
    return merchantCustomerLanguage;
  }


  public void setMerchantCustomerLanguage(String merchantCustomerLanguage) {
    
    
    
    this.merchantCustomerLanguage = merchantCustomerLanguage;
  }


  public Customer status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Used to determine if this is a new or returning customer.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NEW", value = "Used to determine if this is a new or returning customer.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public Customer merchantCustomerId(String merchantCustomerId) {
    
    
    
    
    this.merchantCustomerId = merchantCustomerId;
    return this;
  }

   /**
   * The customer&#39;s ID on the merchant&#39;s site.
   * @return merchantCustomerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sxxopjqy", value = "The customer's ID on the merchant's site.")

  public String getMerchantCustomerId() {
    return merchantCustomerId;
  }


  public void setMerchantCustomerId(String merchantCustomerId) {
    
    
    
    this.merchantCustomerId = merchantCustomerId;
  }


  public Customer taxId(String taxId) {
    
    
    
    
    this.taxId = taxId;
    return this;
  }

   /**
   * The customer&#39;s tax ID, if required.
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4550045030303", value = "The customer's tax ID, if required.")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    
    this.taxId = taxId;
  }


  public Customer taxType(String taxType) {
    
    
    
    
    this.taxType = taxType;
    return this;
  }

   /**
   * The customer&#39;s tax type, if required.
   * @return taxType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "tax type", value = "The customer's tax type, if required.")

  public String getTaxType() {
    return taxType;
  }


  public void setTaxType(String taxType) {
    
    
    
    this.taxType = taxType;
  }


  public Customer birthDate(String birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * The customer&#39;s birth date.
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1996-08-07", value = "The customer's birth date.")

  public String getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(String birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public Customer browser(CustomerBrowser browser) {
    
    
    
    
    this.browser = browser;
    return this;
  }

   /**
   * Get browser
   * @return browser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomerBrowser getBrowser() {
    return browser;
  }


  public void setBrowser(CustomerBrowser browser) {
    
    
    
    this.browser = browser;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Customer instance itself
   */
  public Customer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.givenName, customer.givenName) &&
        Objects.equals(this.surname, customer.surname) &&
        Objects.equals(this.email, customer.email) &&
        Objects.equals(this.mobile, customer.mobile) &&
        Objects.equals(this.whatsapp, customer.whatsapp) &&
        Objects.equals(this.billing, customer.billing) &&
        Objects.equals(this.fax, customer.fax) &&
        Objects.equals(this.phone, customer.phone) &&
        Objects.equals(this.ip, customer.ip) &&
        Objects.equals(this.merchantCustomerLanguage, customer.merchantCustomerLanguage) &&
        Objects.equals(this.status, customer.status) &&
        Objects.equals(this.merchantCustomerId, customer.merchantCustomerId) &&
        Objects.equals(this.taxId, customer.taxId) &&
        Objects.equals(this.taxType, customer.taxType) &&
        Objects.equals(this.birthDate, customer.birthDate) &&
        Objects.equals(this.browser, customer.browser)&&
        Objects.equals(this.additionalProperties, customer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(givenName, surname, email, mobile, whatsapp, billing, fax, phone, ip, merchantCustomerLanguage, status, merchantCustomerId, taxId, taxType, birthDate, browser, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    whatsapp: ").append(toIndentedString(whatsapp)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    merchantCustomerLanguage: ").append(toIndentedString(merchantCustomerLanguage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    merchantCustomerId: ").append(toIndentedString(merchantCustomerId)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    browser: ").append(toIndentedString(browser)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("givenName");
    openapiFields.add("surname");
    openapiFields.add("email");
    openapiFields.add("mobile");
    openapiFields.add("whatsapp");
    openapiFields.add("billing");
    openapiFields.add("fax");
    openapiFields.add("phone");
    openapiFields.add("ip");
    openapiFields.add("merchantCustomerLanguage");
    openapiFields.add("status");
    openapiFields.add("merchantCustomerId");
    openapiFields.add("taxId");
    openapiFields.add("taxType");
    openapiFields.add("birthDate");
    openapiFields.add("browser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("givenName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Customer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Customer.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) && !jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if ((jsonObj.get("whatsapp") != null && !jsonObj.get("whatsapp").isJsonNull()) && !jsonObj.get("whatsapp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `whatsapp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("whatsapp").toString()));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("merchantCustomerLanguage") != null && !jsonObj.get("merchantCustomerLanguage").isJsonNull()) && !jsonObj.get("merchantCustomerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCustomerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCustomerLanguage").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("merchantCustomerId") != null && !jsonObj.get("merchantCustomerId").isJsonNull()) && !jsonObj.get("merchantCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCustomerId").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("taxType") != null && !jsonObj.get("taxType").isJsonNull()) && !jsonObj.get("taxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxType").toString()));
      }
      if ((jsonObj.get("birthDate") != null && !jsonObj.get("birthDate").isJsonNull()) && !jsonObj.get("birthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthDate").toString()));
      }
      // validate the optional field `browser`
      if (jsonObj.get("browser") != null && !jsonObj.get("browser").isJsonNull()) {
        CustomerBrowser.validateJsonObject(jsonObj.getAsJsonObject("browser"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Customer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Customer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Customer
  * @throws IOException if the JSON string is invalid with respect to Customer
  */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

 /**
  * Convert an instance of Customer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


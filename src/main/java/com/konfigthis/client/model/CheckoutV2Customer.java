/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CheckoutV2Customer
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckoutV2Customer {
  public static final String SERIALIZED_NAME_MERCHANT_CUSTOMER_ID = "merchantCustomerId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CUSTOMER_ID)
  private String merchantCustomerId;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public CheckoutV2Customer() {
  }

  public CheckoutV2Customer merchantCustomerId(String merchantCustomerId) {
    
    
    if (merchantCustomerId != null && merchantCustomerId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantCustomerId. Length must be greater than or equal to 0.");
    }
    
    this.merchantCustomerId = merchantCustomerId;
    return this;
  }

   /**
   * An identifier for this customer. Typically this is the ID that identifies the shopper in the shop&#39;s system.
   * @return merchantCustomerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "971020", value = "An identifier for this customer. Typically this is the ID that identifies the shopper in the shop's system.")

  public String getMerchantCustomerId() {
    return merchantCustomerId;
  }


  public void setMerchantCustomerId(String merchantCustomerId) {
    
    
    if (merchantCustomerId != null && merchantCustomerId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantCustomerId. Length must be greater than or equal to 0.");
    }
    this.merchantCustomerId = merchantCustomerId;
  }


  public CheckoutV2Customer givenName(String givenName) {
    
    
    if (givenName != null && givenName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for givenName. Length must be greater than or equal to 0.");
    }
    
    this.givenName = givenName;
    return this;
  }

   /**
   * The customer&#39;s first name or given name. Required if you send in any other customer parameters, also required for some risk checks and payment providers. Truncated after 48 characters.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries. 
   * @return givenName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "The customer's first name or given name. Required if you send in any other customer parameters, also required for some risk checks and payment providers. Truncated after 48 characters.  Peach Payments recommends including the name so that it displays in the Peach Dashboard and is available for subsequent queries. ")

  public String getGivenName() {
    return givenName;
  }


  public void setGivenName(String givenName) {
    
    
    if (givenName != null && givenName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for givenName. Length must be greater than or equal to 0.");
    }
    this.givenName = givenName;
  }


  public CheckoutV2Customer surname(String surname) {
    
    
    if (surname != null && surname.length() < 0) {
      throw new IllegalArgumentException("Invalid value for surname. Length must be greater than or equal to 0.");
    }
    
    this.surname = surname;
    return this;
  }

   /**
   * The customer&#39;s last name or surname. Required if you send in any other customer parameters, also required for some risk checks and payment providers. Truncated after 48 characters.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries. 
   * @return surname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith", value = "The customer's last name or surname. Required if you send in any other customer parameters, also required for some risk checks and payment providers. Truncated after 48 characters.  Peach Payments recommends including the surname so that it displays in the Peach Dashboard and is available for subsequent queries. ")

  public String getSurname() {
    return surname;
  }


  public void setSurname(String surname) {
    
    
    if (surname != null && surname.length() < 0) {
      throw new IllegalArgumentException("Invalid value for surname. Length must be greater than or equal to 0.");
    }
    this.surname = surname;
  }


  public CheckoutV2Customer mobile(String mobile) {
    
    
    if (mobile != null && mobile.length() < 5) {
      throw new IllegalArgumentException("Invalid value for mobile. Length must be greater than or equal to 5.");
    }
    
    this.mobile = mobile;
    return this;
  }

   /**
   * The customer&#39;s mobile number.
   * @return mobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27123456789", value = "The customer's mobile number.")

  public String getMobile() {
    return mobile;
  }


  public void setMobile(String mobile) {
    
    
    if (mobile != null && mobile.length() < 5) {
      throw new IllegalArgumentException("Invalid value for mobile. Length must be greater than or equal to 5.");
    }
    this.mobile = mobile;
  }


  public CheckoutV2Customer email(String email) {
    
    
    if (email != null && email.length() < 6) {
      throw new IllegalArgumentException("Invalid value for email. Length must be greater than or equal to 6.");
    }
    
    this.email = email;
    return this;
  }

   /**
   * The customer&#39;s email address.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "johnsmith@mail.com", value = "The customer's email address.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    if (email != null && email.length() < 6) {
      throw new IllegalArgumentException("Invalid value for email. Length must be greater than or equal to 6.");
    }
    this.email = email;
  }


  public CheckoutV2Customer idNumber(String idNumber) {
    
    
    if (idNumber != null && idNumber.length() < 13) {
      throw new IllegalArgumentException("Invalid value for idNumber. Length must be greater than or equal to 13.");
    }
    
    this.idNumber = idNumber;
    return this;
  }

   /**
   * The customer&#39;s ID number, required for high-risk merchants supporting Capitec Pay.
   * @return idNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9001010000084", value = "The customer's ID number, required for high-risk merchants supporting Capitec Pay.")

  public String getIdNumber() {
    return idNumber;
  }


  public void setIdNumber(String idNumber) {
    
    
    if (idNumber != null && idNumber.length() < 13) {
      throw new IllegalArgumentException("Invalid value for idNumber. Length must be greater than or equal to 13.");
    }
    this.idNumber = idNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutV2Customer instance itself
   */
  public CheckoutV2Customer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutV2Customer checkoutV2Customer = (CheckoutV2Customer) o;
    return Objects.equals(this.merchantCustomerId, checkoutV2Customer.merchantCustomerId) &&
        Objects.equals(this.givenName, checkoutV2Customer.givenName) &&
        Objects.equals(this.surname, checkoutV2Customer.surname) &&
        Objects.equals(this.mobile, checkoutV2Customer.mobile) &&
        Objects.equals(this.email, checkoutV2Customer.email) &&
        Objects.equals(this.idNumber, checkoutV2Customer.idNumber)&&
        Objects.equals(this.additionalProperties, checkoutV2Customer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantCustomerId, givenName, surname, mobile, email, idNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutV2Customer {\n");
    sb.append("    merchantCustomerId: ").append(toIndentedString(merchantCustomerId)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchantCustomerId");
    openapiFields.add("givenName");
    openapiFields.add("surname");
    openapiFields.add("mobile");
    openapiFields.add("email");
    openapiFields.add("idNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutV2Customer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutV2Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutV2Customer is not found in the empty JSON string", CheckoutV2Customer.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("merchantCustomerId") != null && !jsonObj.get("merchantCustomerId").isJsonNull()) && !jsonObj.get("merchantCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCustomerId").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) && !jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
      if ((jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutV2Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutV2Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutV2Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutV2Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutV2Customer>() {
           @Override
           public void write(JsonWriter out, CheckoutV2Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutV2Customer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckoutV2Customer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutV2Customer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutV2Customer
  * @throws IOException if the JSON string is invalid with respect to CheckoutV2Customer
  */
  public static CheckoutV2Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutV2Customer.class);
  }

 /**
  * Convert an instance of CheckoutV2Customer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


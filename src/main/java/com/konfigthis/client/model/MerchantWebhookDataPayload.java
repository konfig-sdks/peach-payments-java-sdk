/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Card;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.MerchantWebhookDataPayloadAuthentication;
import com.konfigthis.client.model.MerchantWebhookDataPayloadBankAccount;
import com.konfigthis.client.model.MerchantWebhookDataPayloadMerchant;
import com.konfigthis.client.model.PaymentType;
import com.konfigthis.client.model.Recon;
import com.konfigthis.client.model.Result;
import com.konfigthis.client.model.ResultDetails;
import com.konfigthis.client.model.Shopify;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The webhook data schema after decryption.
 */
@ApiModel(description = "The webhook data schema after decryption.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MerchantWebhookDataPayload {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentType paymentType;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_MERCHANT_INVOICE_ID = "merchantInvoiceId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_INVOICE_ID)
  private String merchantInvoiceId;

  public static final String SERIALIZED_NAME_MERCHANT_ACCOUNT_ID = "merchantAccountId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ACCOUNT_ID)
  private String merchantAccountId;

  public static final String SERIALIZED_NAME_DESCRIPTOR = "descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private String descriptor;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PRESENTATION_AMOUNT = "presentationAmount";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_AMOUNT)
  private String presentationAmount;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Result result;

  public static final String SERIALIZED_NAME_RESULT_DETAILS = "resultDetails";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS)
  private ResultDetails resultDetails;

  public static final String SERIALIZED_NAME_CONNECTOR_TX_I_D1 = "connectorTxID1";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TX_I_D1)
  private String connectorTxID1;

  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private MerchantWebhookDataPayloadAuthentication authentication;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private Card card;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Address shipping;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private Address billing;

  public static final String SERIALIZED_NAME_RECON = "recon";
  @SerializedName(SERIALIZED_NAME_RECON)
  private Recon recon;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "bankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private MerchantWebhookDataPayloadBankAccount bankAccount;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS = "customParameters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS)
  private Object customParameters;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_SHOPIFY = "shopify";
  @SerializedName(SERIALIZED_NAME_SHOPIFY)
  private Shopify shopify;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private MerchantWebhookDataPayloadMerchant merchant;

  public MerchantWebhookDataPayload() {
  }

  public MerchantWebhookDataPayload id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique transaction ID provided by Peach Payments.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "b4508276b8d146728dac871d6f68b45d", required = true, value = "The unique transaction ID provided by Peach Payments.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public MerchantWebhookDataPayload paymentType(PaymentType paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PaymentType getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(PaymentType paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public MerchantWebhookDataPayload amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The payment request amount.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "22.50", required = true, value = "The payment request amount.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }


  public MerchantWebhookDataPayload merchantInvoiceId(String merchantInvoiceId) {
    
    
    
    
    this.merchantInvoiceId = merchantInvoiceId;
    return this;
  }

   /**
   * The merchant&#39;s invoice ID.
   * @return merchantInvoiceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "20170630407200", required = true, value = "The merchant's invoice ID.")

  public String getMerchantInvoiceId() {
    return merchantInvoiceId;
  }


  public void setMerchantInvoiceId(String merchantInvoiceId) {
    
    
    
    this.merchantInvoiceId = merchantInvoiceId;
  }


  public MerchantWebhookDataPayload merchantAccountId(String merchantAccountId) {
    
    
    
    
    this.merchantAccountId = merchantAccountId;
    return this;
  }

   /**
   * Merchant account ID.
   * @return merchantAccountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "80d41ee71ee011e98e81067b75644abf", required = true, value = "Merchant account ID.")

  public String getMerchantAccountId() {
    return merchantAccountId;
  }


  public void setMerchantAccountId(String merchantAccountId) {
    
    
    
    this.merchantAccountId = merchantAccountId;
  }


  public MerchantWebhookDataPayload descriptor(String descriptor) {
    
    
    
    
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Get descriptor
   * @return descriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescriptor() {
    return descriptor;
  }


  public void setDescriptor(String descriptor) {
    
    
    
    this.descriptor = descriptor;
  }


  public MerchantWebhookDataPayload currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code of the payment request amount as defined by ISO-4217.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ZAR", required = true, value = "The currency code of the payment request amount as defined by ISO-4217.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public MerchantWebhookDataPayload presentationAmount(String presentationAmount) {
    
    
    
    
    this.presentationAmount = presentationAmount;
    return this;
  }

   /**
   * The payment request amount.
   * @return presentationAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "22.50", required = true, value = "The payment request amount.")

  public String getPresentationAmount() {
    return presentationAmount;
  }


  public void setPresentationAmount(String presentationAmount) {
    
    
    
    this.presentationAmount = presentationAmount;
  }


  public MerchantWebhookDataPayload result(Result result) {
    
    
    
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Result getResult() {
    return result;
  }


  public void setResult(Result result) {
    
    
    
    this.result = result;
  }


  public MerchantWebhookDataPayload resultDetails(ResultDetails resultDetails) {
    
    
    
    
    this.resultDetails = resultDetails;
    return this;
  }

   /**
   * Get resultDetails
   * @return resultDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ResultDetails getResultDetails() {
    return resultDetails;
  }


  public void setResultDetails(ResultDetails resultDetails) {
    
    
    
    this.resultDetails = resultDetails;
  }


  public MerchantWebhookDataPayload connectorTxID1(String connectorTxID1) {
    
    
    
    
    this.connectorTxID1 = connectorTxID1;
    return this;
  }

   /**
   * The unique transaction identifier provided by the payment service provider.
   * @return connectorTxID1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8ac7a49f7921f2fd0179230196ec4bbe", required = true, value = "The unique transaction identifier provided by the payment service provider.")

  public String getConnectorTxID1() {
    return connectorTxID1;
  }


  public void setConnectorTxID1(String connectorTxID1) {
    
    
    
    this.connectorTxID1 = connectorTxID1;
  }


  public MerchantWebhookDataPayload authentication(MerchantWebhookDataPayloadAuthentication authentication) {
    
    
    
    
    this.authentication = authentication;
    return this;
  }

   /**
   * Get authentication
   * @return authentication
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MerchantWebhookDataPayloadAuthentication getAuthentication() {
    return authentication;
  }


  public void setAuthentication(MerchantWebhookDataPayloadAuthentication authentication) {
    
    
    
    this.authentication = authentication;
  }


  public MerchantWebhookDataPayload card(Card card) {
    
    
    
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Card getCard() {
    return card;
  }


  public void setCard(Card card) {
    
    
    
    this.card = card;
  }


  public MerchantWebhookDataPayload timestamp(OffsetDateTime timestamp) {
    
    
    
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp of the transaction.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-04-23T07:41:25.519947Z", required = true, value = "The timestamp of the transaction.")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    
    
    
    this.timestamp = timestamp;
  }


  public MerchantWebhookDataPayload customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public MerchantWebhookDataPayload shipping(Address shipping) {
    
    
    
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Address getShipping() {
    return shipping;
  }


  public void setShipping(Address shipping) {
    
    
    
    this.shipping = shipping;
  }


  public MerchantWebhookDataPayload billing(Address billing) {
    
    
    
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Address getBilling() {
    return billing;
  }


  public void setBilling(Address billing) {
    
    
    
    this.billing = billing;
  }


  public MerchantWebhookDataPayload recon(Recon recon) {
    
    
    
    
    this.recon = recon;
    return this;
  }

   /**
   * Get recon
   * @return recon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Recon getRecon() {
    return recon;
  }


  public void setRecon(Recon recon) {
    
    
    
    this.recon = recon;
  }


  public MerchantWebhookDataPayload bankAccount(MerchantWebhookDataPayloadBankAccount bankAccount) {
    
    
    
    
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MerchantWebhookDataPayloadBankAccount getBankAccount() {
    return bankAccount;
  }


  public void setBankAccount(MerchantWebhookDataPayloadBankAccount bankAccount) {
    
    
    
    this.bankAccount = bankAccount;
  }


  public MerchantWebhookDataPayload customParameters(Object customParameters) {
    
    
    
    
    this.customParameters = customParameters;
    return this;
  }

   /**
   * A JSON object depicting custom information sent by the merchant. Echoed back in the response.
   * @return customParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON object depicting custom information sent by the merchant. Echoed back in the response.")

  public Object getCustomParameters() {
    return customParameters;
  }


  public void setCustomParameters(Object customParameters) {
    
    
    
    this.customParameters = customParameters;
  }


  public MerchantWebhookDataPayload referenceId(String referenceId) {
    
    
    
    
    this.referenceId = referenceId;
    return this;
  }

   /**
   * The unique transaction ID provided by Peach Payments.
   * @return referenceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "b4508276b8d146728dac871d6f68b45d", required = true, value = "The unique transaction ID provided by Peach Payments.")

  public String getReferenceId() {
    return referenceId;
  }


  public void setReferenceId(String referenceId) {
    
    
    
    this.referenceId = referenceId;
  }


  public MerchantWebhookDataPayload shopify(Shopify shopify) {
    
    
    
    
    this.shopify = shopify;
    return this;
  }

   /**
   * Get shopify
   * @return shopify
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Shopify getShopify() {
    return shopify;
  }


  public void setShopify(Shopify shopify) {
    
    
    
    this.shopify = shopify;
  }


  public MerchantWebhookDataPayload merchant(MerchantWebhookDataPayloadMerchant merchant) {
    
    
    
    
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MerchantWebhookDataPayloadMerchant getMerchant() {
    return merchant;
  }


  public void setMerchant(MerchantWebhookDataPayloadMerchant merchant) {
    
    
    
    this.merchant = merchant;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantWebhookDataPayload instance itself
   */
  public MerchantWebhookDataPayload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantWebhookDataPayload merchantWebhookDataPayload = (MerchantWebhookDataPayload) o;
    return Objects.equals(this.id, merchantWebhookDataPayload.id) &&
        Objects.equals(this.paymentType, merchantWebhookDataPayload.paymentType) &&
        Objects.equals(this.amount, merchantWebhookDataPayload.amount) &&
        Objects.equals(this.merchantInvoiceId, merchantWebhookDataPayload.merchantInvoiceId) &&
        Objects.equals(this.merchantAccountId, merchantWebhookDataPayload.merchantAccountId) &&
        Objects.equals(this.descriptor, merchantWebhookDataPayload.descriptor) &&
        Objects.equals(this.currency, merchantWebhookDataPayload.currency) &&
        Objects.equals(this.presentationAmount, merchantWebhookDataPayload.presentationAmount) &&
        Objects.equals(this.result, merchantWebhookDataPayload.result) &&
        Objects.equals(this.resultDetails, merchantWebhookDataPayload.resultDetails) &&
        Objects.equals(this.connectorTxID1, merchantWebhookDataPayload.connectorTxID1) &&
        Objects.equals(this.authentication, merchantWebhookDataPayload.authentication) &&
        Objects.equals(this.card, merchantWebhookDataPayload.card) &&
        Objects.equals(this.timestamp, merchantWebhookDataPayload.timestamp) &&
        Objects.equals(this.customer, merchantWebhookDataPayload.customer) &&
        Objects.equals(this.shipping, merchantWebhookDataPayload.shipping) &&
        Objects.equals(this.billing, merchantWebhookDataPayload.billing) &&
        Objects.equals(this.recon, merchantWebhookDataPayload.recon) &&
        Objects.equals(this.bankAccount, merchantWebhookDataPayload.bankAccount) &&
        Objects.equals(this.customParameters, merchantWebhookDataPayload.customParameters) &&
        Objects.equals(this.referenceId, merchantWebhookDataPayload.referenceId) &&
        Objects.equals(this.shopify, merchantWebhookDataPayload.shopify) &&
        Objects.equals(this.merchant, merchantWebhookDataPayload.merchant)&&
        Objects.equals(this.additionalProperties, merchantWebhookDataPayload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, paymentType, amount, merchantInvoiceId, merchantAccountId, descriptor, currency, presentationAmount, result, resultDetails, connectorTxID1, authentication, card, timestamp, customer, shipping, billing, recon, bankAccount, customParameters, referenceId, shopify, merchant, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantWebhookDataPayload {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    merchantInvoiceId: ").append(toIndentedString(merchantInvoiceId)).append("\n");
    sb.append("    merchantAccountId: ").append(toIndentedString(merchantAccountId)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    presentationAmount: ").append(toIndentedString(presentationAmount)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    resultDetails: ").append(toIndentedString(resultDetails)).append("\n");
    sb.append("    connectorTxID1: ").append(toIndentedString(connectorTxID1)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    recon: ").append(toIndentedString(recon)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    shopify: ").append(toIndentedString(shopify)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("paymentType");
    openapiFields.add("amount");
    openapiFields.add("merchantInvoiceId");
    openapiFields.add("merchantAccountId");
    openapiFields.add("descriptor");
    openapiFields.add("currency");
    openapiFields.add("presentationAmount");
    openapiFields.add("result");
    openapiFields.add("resultDetails");
    openapiFields.add("connectorTxID1");
    openapiFields.add("authentication");
    openapiFields.add("card");
    openapiFields.add("timestamp");
    openapiFields.add("customer");
    openapiFields.add("shipping");
    openapiFields.add("billing");
    openapiFields.add("recon");
    openapiFields.add("bankAccount");
    openapiFields.add("customParameters");
    openapiFields.add("referenceId");
    openapiFields.add("shopify");
    openapiFields.add("merchant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("paymentType");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("merchantInvoiceId");
    openapiRequiredFields.add("merchantAccountId");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("presentationAmount");
    openapiRequiredFields.add("result");
    openapiRequiredFields.add("resultDetails");
    openapiRequiredFields.add("connectorTxID1");
    openapiRequiredFields.add("authentication");
    openapiRequiredFields.add("card");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("shipping");
    openapiRequiredFields.add("billing");
    openapiRequiredFields.add("bankAccount");
    openapiRequiredFields.add("referenceId");
    openapiRequiredFields.add("shopify");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantWebhookDataPayload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantWebhookDataPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantWebhookDataPayload is not found in the empty JSON string", MerchantWebhookDataPayload.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantWebhookDataPayload.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("merchantInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantInvoiceId").toString()));
      }
      if (!jsonObj.get("merchantAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantAccountId").toString()));
      }
      if ((jsonObj.get("descriptor") != null && !jsonObj.get("descriptor").isJsonNull()) && !jsonObj.get("descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptor").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("presentationAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentationAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentationAmount").toString()));
      }
      // validate the required field `result`
      Result.validateJsonObject(jsonObj.getAsJsonObject("result"));
      // validate the required field `resultDetails`
      ResultDetails.validateJsonObject(jsonObj.getAsJsonObject("resultDetails"));
      if (!jsonObj.get("connectorTxID1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorTxID1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorTxID1").toString()));
      }
      // validate the required field `authentication`
      MerchantWebhookDataPayloadAuthentication.validateJsonObject(jsonObj.getAsJsonObject("authentication"));
      // validate the required field `card`
      Card.validateJsonObject(jsonObj.getAsJsonObject("card"));
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      // validate the required field `shipping`
      Address.validateJsonObject(jsonObj.getAsJsonObject("shipping"));
      // validate the required field `billing`
      Address.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      // validate the optional field `recon`
      if (jsonObj.get("recon") != null && !jsonObj.get("recon").isJsonNull()) {
        Recon.validateJsonObject(jsonObj.getAsJsonObject("recon"));
      }
      // validate the required field `bankAccount`
      MerchantWebhookDataPayloadBankAccount.validateJsonObject(jsonObj.getAsJsonObject("bankAccount"));
      if (!jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      // validate the required field `shopify`
      Shopify.validateJsonObject(jsonObj.getAsJsonObject("shopify"));
      // validate the optional field `merchant`
      if (jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) {
        MerchantWebhookDataPayloadMerchant.validateJsonObject(jsonObj.getAsJsonObject("merchant"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantWebhookDataPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantWebhookDataPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantWebhookDataPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantWebhookDataPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantWebhookDataPayload>() {
           @Override
           public void write(JsonWriter out, MerchantWebhookDataPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantWebhookDataPayload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantWebhookDataPayload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantWebhookDataPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantWebhookDataPayload
  * @throws IOException if the JSON string is invalid with respect to MerchantWebhookDataPayload
  */
  public static MerchantWebhookDataPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantWebhookDataPayload.class);
  }

 /**
  * Convert an instance of MerchantWebhookDataPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


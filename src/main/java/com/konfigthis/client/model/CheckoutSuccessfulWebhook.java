/*
 * Payments API inbound
 * The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@peachpayments.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Webhook sent when a checkout instance is successfully completed.
 */
@ApiModel(description = "Webhook sent when a checkout instance is successfully completed.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckoutSuccessfulWebhook {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CHECKOUT_ID = "checkoutId";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_ID)
  private String checkoutId;

  /**
   * The currency code of the payment request amount.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    ZAR("ZAR"),
    
    USD("USD"),
    
    KES("KES"),
    
    MUR("MUR"),
    
    GBP("GBP"),
    
    EUR("EUR");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_MERCHANT_TRANSACTION_ID = "merchantTransactionId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TRANSACTION_ID)
  private String merchantTransactionId;

  /**
   * The payment type for the request.
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
 public enum PaymentTypeEnum {
    DB("DB");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  public static final String SERIALIZED_NAME_RESULT_CODE = "result.code";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private String resultCode = "000.000.000";

  public static final String SERIALIZED_NAME_RESULT_DESCRIPTION = "result.description";
  @SerializedName(SERIALIZED_NAME_RESULT_DESCRIPTION)
  private String resultDescription = "Request successfully processed in 'Merchant in Integrator Test Mode'";

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PAYMENT_BRAND = "paymentBrand";
  @SerializedName(SERIALIZED_NAME_PAYMENT_BRAND)
  private String paymentBrand = "EFTSECURE";

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchant.name";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_RECON_AUTH_CODE = "recon.authCode";
  @SerializedName(SERIALIZED_NAME_RECON_AUTH_CODE)
  private String reconAuthCode;

  public static final String SERIALIZED_NAME_RECON_RESULT_CODE = "recon.resultCode";
  @SerializedName(SERIALIZED_NAME_RECON_RESULT_CODE)
  private String reconResultCode;

  public static final String SERIALIZED_NAME_RECON_RRN = "recon.rrn";
  @SerializedName(SERIALIZED_NAME_RECON_RRN)
  private String reconRrn;

  public static final String SERIALIZED_NAME_RESULT_DETAILS_ACQUIRER_RESPONSE = "resultDetails.AcquirerResponse";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS_ACQUIRER_RESPONSE)
  private String resultDetailsAcquirerResponse;

  public static final String SERIALIZED_NAME_RESULT_DETAILS_CONNECTOR_TX_I_D1 = "resultDetails.ConnectorTxID1";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS_CONNECTOR_TX_I_D1)
  private String resultDetailsConnectorTxID1;

  public static final String SERIALIZED_NAME_RESULT_DETAILS_EXTENDED_DESCRIPTION = "resultDetails.ExtendedDescription";
  @SerializedName(SERIALIZED_NAME_RESULT_DETAILS_EXTENDED_DESCRIPTION)
  private String resultDetailsExtendedDescription;

  public static final String SERIALIZED_NAME_CARD_BIN = "card.bin";
  @SerializedName(SERIALIZED_NAME_CARD_BIN)
  private String cardBin;

  public static final String SERIALIZED_NAME_CARD_HOLDER = "card.holder";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER)
  private String cardHolder;

  public static final String SERIALIZED_NAME_CARD_LAST4_DIGITS = "card.last4Digits";
  @SerializedName(SERIALIZED_NAME_CARD_LAST4_DIGITS)
  private String cardLast4Digits;

  public CheckoutSuccessfulWebhook() {
  }

  public CheckoutSuccessfulWebhook amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the payment request. The period is used as the decimal separator. M-PESA does not support decimal amounts, so Checkout automatically rounds them up.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1010.22", value = "The amount of the payment request. The period is used as the decimal separator. M-PESA does not support decimal amounts, so Checkout automatically rounds them up.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }


  public CheckoutSuccessfulWebhook checkoutId(String checkoutId) {
    
    
    
    
    this.checkoutId = checkoutId;
    return this;
  }

   /**
   * Checkout ID.
   * @return checkoutId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "948cc8dec52a11eb85290242ac130003", value = "Checkout ID.")

  public String getCheckoutId() {
    return checkoutId;
  }


  public void setCheckoutId(String checkoutId) {
    
    
    
    this.checkoutId = checkoutId;
  }


  public CheckoutSuccessfulWebhook currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency code of the payment request amount.
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZAR", value = "The currency code of the payment request amount.")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public CheckoutSuccessfulWebhook merchantTransactionId(String merchantTransactionId) {
    
    
    if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
    }
    
    this.merchantTransactionId = merchantTransactionId;
    return this;
  }

   /**
   * Merchant-provided reference number unique for your transactions.
   * @return merchantTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OrderNo453432", value = "Merchant-provided reference number unique for your transactions.")

  public String getMerchantTransactionId() {
    return merchantTransactionId;
  }


  public void setMerchantTransactionId(String merchantTransactionId) {
    
    
    if (merchantTransactionId != null && merchantTransactionId.length() < 8) {
      throw new IllegalArgumentException("Invalid value for merchantTransactionId. Length must be greater than or equal to 8.");
    }
    this.merchantTransactionId = merchantTransactionId;
  }


  public CheckoutSuccessfulWebhook paymentType(PaymentTypeEnum paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The payment type for the request.
   * @return paymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DB", value = "The payment type for the request.")

  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(PaymentTypeEnum paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public CheckoutSuccessfulWebhook resultCode(String resultCode) {
    
    
    
    
    this.resultCode = resultCode;
    return this;
  }

   /**
   * Get resultCode
   * @return resultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "000.000.000", value = "")

  public String getResultCode() {
    return resultCode;
  }


  public void setResultCode(String resultCode) {
    
    
    
    this.resultCode = resultCode;
  }


  public CheckoutSuccessfulWebhook resultDescription(String resultDescription) {
    
    
    
    
    this.resultDescription = resultDescription;
    return this;
  }

   /**
   * Get resultDescription
   * @return resultDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Request successfully processed in 'Merchant in Integrator Test Mode'", value = "")

  public String getResultDescription() {
    return resultDescription;
  }


  public void setResultDescription(String resultDescription) {
    
    
    
    this.resultDescription = resultDescription;
  }


  public CheckoutSuccessfulWebhook signature(String signature) {
    
    
    
    
    this.signature = signature;
    return this;
  }

   /**
   * Token to verify the integrity of the webhook, ensuring the request is coming from Checkout.
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a668342244a9c77b08a2f9090d033d6e2610b431a5c0ca975f32035ed06164f4", value = "Token to verify the integrity of the webhook, ensuring the request is coming from Checkout.")

  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    
    
    
    this.signature = signature;
  }


  public CheckoutSuccessfulWebhook timestamp(String timestamp) {
    
    
    
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Date and time when the webhook was sent.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-07-04T08:10:05Z", value = "Date and time when the webhook was sent.")

  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    
    
    
    this.timestamp = timestamp;
  }


  public CheckoutSuccessfulWebhook id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The transaction ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The transaction ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CheckoutSuccessfulWebhook paymentBrand(String paymentBrand) {
    
    
    
    
    this.paymentBrand = paymentBrand;
    return this;
  }

   /**
   * Get paymentBrand
   * @return paymentBrand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EFTSECURE", value = "")

  public String getPaymentBrand() {
    return paymentBrand;
  }


  public void setPaymentBrand(String paymentBrand) {
    
    
    
    this.paymentBrand = paymentBrand;
  }


  public CheckoutSuccessfulWebhook merchantName(String merchantName) {
    
    
    
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * Get merchantName
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    
    
    
    this.merchantName = merchantName;
  }


  public CheckoutSuccessfulWebhook reconAuthCode(String reconAuthCode) {
    
    
    
    
    this.reconAuthCode = reconAuthCode;
    return this;
  }

   /**
   * Get reconAuthCode
   * @return reconAuthCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReconAuthCode() {
    return reconAuthCode;
  }


  public void setReconAuthCode(String reconAuthCode) {
    
    
    
    this.reconAuthCode = reconAuthCode;
  }


  public CheckoutSuccessfulWebhook reconResultCode(String reconResultCode) {
    
    
    
    
    this.reconResultCode = reconResultCode;
    return this;
  }

   /**
   * Get reconResultCode
   * @return reconResultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReconResultCode() {
    return reconResultCode;
  }


  public void setReconResultCode(String reconResultCode) {
    
    
    
    this.reconResultCode = reconResultCode;
  }


  public CheckoutSuccessfulWebhook reconRrn(String reconRrn) {
    
    
    
    
    this.reconRrn = reconRrn;
    return this;
  }

   /**
   * Get reconRrn
   * @return reconRrn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReconRrn() {
    return reconRrn;
  }


  public void setReconRrn(String reconRrn) {
    
    
    
    this.reconRrn = reconRrn;
  }


  public CheckoutSuccessfulWebhook resultDetailsAcquirerResponse(String resultDetailsAcquirerResponse) {
    
    
    
    
    this.resultDetailsAcquirerResponse = resultDetailsAcquirerResponse;
    return this;
  }

   /**
   * Get resultDetailsAcquirerResponse
   * @return resultDetailsAcquirerResponse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResultDetailsAcquirerResponse() {
    return resultDetailsAcquirerResponse;
  }


  public void setResultDetailsAcquirerResponse(String resultDetailsAcquirerResponse) {
    
    
    
    this.resultDetailsAcquirerResponse = resultDetailsAcquirerResponse;
  }


  public CheckoutSuccessfulWebhook resultDetailsConnectorTxID1(String resultDetailsConnectorTxID1) {
    
    
    
    
    this.resultDetailsConnectorTxID1 = resultDetailsConnectorTxID1;
    return this;
  }

   /**
   * Get resultDetailsConnectorTxID1
   * @return resultDetailsConnectorTxID1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResultDetailsConnectorTxID1() {
    return resultDetailsConnectorTxID1;
  }


  public void setResultDetailsConnectorTxID1(String resultDetailsConnectorTxID1) {
    
    
    
    this.resultDetailsConnectorTxID1 = resultDetailsConnectorTxID1;
  }


  public CheckoutSuccessfulWebhook resultDetailsExtendedDescription(String resultDetailsExtendedDescription) {
    
    
    
    
    this.resultDetailsExtendedDescription = resultDetailsExtendedDescription;
    return this;
  }

   /**
   * Get resultDetailsExtendedDescription
   * @return resultDetailsExtendedDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResultDetailsExtendedDescription() {
    return resultDetailsExtendedDescription;
  }


  public void setResultDetailsExtendedDescription(String resultDetailsExtendedDescription) {
    
    
    
    this.resultDetailsExtendedDescription = resultDetailsExtendedDescription;
  }


  public CheckoutSuccessfulWebhook cardBin(String cardBin) {
    
    
    
    
    this.cardBin = cardBin;
    return this;
  }

   /**
   * Get cardBin
   * @return cardBin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardBin() {
    return cardBin;
  }


  public void setCardBin(String cardBin) {
    
    
    
    this.cardBin = cardBin;
  }


  public CheckoutSuccessfulWebhook cardHolder(String cardHolder) {
    
    
    
    
    this.cardHolder = cardHolder;
    return this;
  }

   /**
   * Get cardHolder
   * @return cardHolder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardHolder() {
    return cardHolder;
  }


  public void setCardHolder(String cardHolder) {
    
    
    
    this.cardHolder = cardHolder;
  }


  public CheckoutSuccessfulWebhook cardLast4Digits(String cardLast4Digits) {
    
    
    
    
    this.cardLast4Digits = cardLast4Digits;
    return this;
  }

   /**
   * Get cardLast4Digits
   * @return cardLast4Digits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardLast4Digits() {
    return cardLast4Digits;
  }


  public void setCardLast4Digits(String cardLast4Digits) {
    
    
    
    this.cardLast4Digits = cardLast4Digits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutSuccessfulWebhook instance itself
   */
  public CheckoutSuccessfulWebhook putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutSuccessfulWebhook checkoutSuccessfulWebhook = (CheckoutSuccessfulWebhook) o;
    return Objects.equals(this.amount, checkoutSuccessfulWebhook.amount) &&
        Objects.equals(this.checkoutId, checkoutSuccessfulWebhook.checkoutId) &&
        Objects.equals(this.currency, checkoutSuccessfulWebhook.currency) &&
        Objects.equals(this.merchantTransactionId, checkoutSuccessfulWebhook.merchantTransactionId) &&
        Objects.equals(this.paymentType, checkoutSuccessfulWebhook.paymentType) &&
        Objects.equals(this.resultCode, checkoutSuccessfulWebhook.resultCode) &&
        Objects.equals(this.resultDescription, checkoutSuccessfulWebhook.resultDescription) &&
        Objects.equals(this.signature, checkoutSuccessfulWebhook.signature) &&
        Objects.equals(this.timestamp, checkoutSuccessfulWebhook.timestamp) &&
        Objects.equals(this.id, checkoutSuccessfulWebhook.id) &&
        Objects.equals(this.paymentBrand, checkoutSuccessfulWebhook.paymentBrand) &&
        Objects.equals(this.merchantName, checkoutSuccessfulWebhook.merchantName) &&
        Objects.equals(this.reconAuthCode, checkoutSuccessfulWebhook.reconAuthCode) &&
        Objects.equals(this.reconResultCode, checkoutSuccessfulWebhook.reconResultCode) &&
        Objects.equals(this.reconRrn, checkoutSuccessfulWebhook.reconRrn) &&
        Objects.equals(this.resultDetailsAcquirerResponse, checkoutSuccessfulWebhook.resultDetailsAcquirerResponse) &&
        Objects.equals(this.resultDetailsConnectorTxID1, checkoutSuccessfulWebhook.resultDetailsConnectorTxID1) &&
        Objects.equals(this.resultDetailsExtendedDescription, checkoutSuccessfulWebhook.resultDetailsExtendedDescription) &&
        Objects.equals(this.cardBin, checkoutSuccessfulWebhook.cardBin) &&
        Objects.equals(this.cardHolder, checkoutSuccessfulWebhook.cardHolder) &&
        Objects.equals(this.cardLast4Digits, checkoutSuccessfulWebhook.cardLast4Digits)&&
        Objects.equals(this.additionalProperties, checkoutSuccessfulWebhook.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, checkoutId, currency, merchantTransactionId, paymentType, resultCode, resultDescription, signature, timestamp, id, paymentBrand, merchantName, reconAuthCode, reconResultCode, reconRrn, resultDetailsAcquirerResponse, resultDetailsConnectorTxID1, resultDetailsExtendedDescription, cardBin, cardHolder, cardLast4Digits, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutSuccessfulWebhook {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    checkoutId: ").append(toIndentedString(checkoutId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    merchantTransactionId: ").append(toIndentedString(merchantTransactionId)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    resultDescription: ").append(toIndentedString(resultDescription)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    paymentBrand: ").append(toIndentedString(paymentBrand)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    reconAuthCode: ").append(toIndentedString(reconAuthCode)).append("\n");
    sb.append("    reconResultCode: ").append(toIndentedString(reconResultCode)).append("\n");
    sb.append("    reconRrn: ").append(toIndentedString(reconRrn)).append("\n");
    sb.append("    resultDetailsAcquirerResponse: ").append(toIndentedString(resultDetailsAcquirerResponse)).append("\n");
    sb.append("    resultDetailsConnectorTxID1: ").append(toIndentedString(resultDetailsConnectorTxID1)).append("\n");
    sb.append("    resultDetailsExtendedDescription: ").append(toIndentedString(resultDetailsExtendedDescription)).append("\n");
    sb.append("    cardBin: ").append(toIndentedString(cardBin)).append("\n");
    sb.append("    cardHolder: ").append(toIndentedString(cardHolder)).append("\n");
    sb.append("    cardLast4Digits: ").append(toIndentedString(cardLast4Digits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("checkoutId");
    openapiFields.add("currency");
    openapiFields.add("merchantTransactionId");
    openapiFields.add("paymentType");
    openapiFields.add("result.code");
    openapiFields.add("result.description");
    openapiFields.add("signature");
    openapiFields.add("timestamp");
    openapiFields.add("id");
    openapiFields.add("paymentBrand");
    openapiFields.add("merchant.name");
    openapiFields.add("recon.authCode");
    openapiFields.add("recon.resultCode");
    openapiFields.add("recon.rrn");
    openapiFields.add("resultDetails.AcquirerResponse");
    openapiFields.add("resultDetails.ConnectorTxID1");
    openapiFields.add("resultDetails.ExtendedDescription");
    openapiFields.add("card.bin");
    openapiFields.add("card.holder");
    openapiFields.add("card.last4Digits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutSuccessfulWebhook
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutSuccessfulWebhook.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutSuccessfulWebhook is not found in the empty JSON string", CheckoutSuccessfulWebhook.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("checkoutId") != null && !jsonObj.get("checkoutId").isJsonNull()) && !jsonObj.get("checkoutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkoutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkoutId").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("merchantTransactionId") != null && !jsonObj.get("merchantTransactionId").isJsonNull()) && !jsonObj.get("merchantTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantTransactionId").toString()));
      }
      if ((jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) && !jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      if ((jsonObj.get("result.code") != null && !jsonObj.get("result.code").isJsonNull()) && !jsonObj.get("result.code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result.code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result.code").toString()));
      }
      if ((jsonObj.get("result.description") != null && !jsonObj.get("result.description").isJsonNull()) && !jsonObj.get("result.description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result.description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result.description").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("paymentBrand") != null && !jsonObj.get("paymentBrand").isJsonNull()) && !jsonObj.get("paymentBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentBrand").toString()));
      }
      if ((jsonObj.get("merchant.name") != null && !jsonObj.get("merchant.name").isJsonNull()) && !jsonObj.get("merchant.name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant.name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant.name").toString()));
      }
      if ((jsonObj.get("recon.authCode") != null && !jsonObj.get("recon.authCode").isJsonNull()) && !jsonObj.get("recon.authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recon.authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recon.authCode").toString()));
      }
      if ((jsonObj.get("recon.resultCode") != null && !jsonObj.get("recon.resultCode").isJsonNull()) && !jsonObj.get("recon.resultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recon.resultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recon.resultCode").toString()));
      }
      if ((jsonObj.get("recon.rrn") != null && !jsonObj.get("recon.rrn").isJsonNull()) && !jsonObj.get("recon.rrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recon.rrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recon.rrn").toString()));
      }
      if ((jsonObj.get("resultDetails.AcquirerResponse") != null && !jsonObj.get("resultDetails.AcquirerResponse").isJsonNull()) && !jsonObj.get("resultDetails.AcquirerResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultDetails.AcquirerResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultDetails.AcquirerResponse").toString()));
      }
      if ((jsonObj.get("resultDetails.ConnectorTxID1") != null && !jsonObj.get("resultDetails.ConnectorTxID1").isJsonNull()) && !jsonObj.get("resultDetails.ConnectorTxID1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultDetails.ConnectorTxID1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultDetails.ConnectorTxID1").toString()));
      }
      if ((jsonObj.get("resultDetails.ExtendedDescription") != null && !jsonObj.get("resultDetails.ExtendedDescription").isJsonNull()) && !jsonObj.get("resultDetails.ExtendedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultDetails.ExtendedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultDetails.ExtendedDescription").toString()));
      }
      if ((jsonObj.get("card.bin") != null && !jsonObj.get("card.bin").isJsonNull()) && !jsonObj.get("card.bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card.bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card.bin").toString()));
      }
      if ((jsonObj.get("card.holder") != null && !jsonObj.get("card.holder").isJsonNull()) && !jsonObj.get("card.holder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card.holder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card.holder").toString()));
      }
      if ((jsonObj.get("card.last4Digits") != null && !jsonObj.get("card.last4Digits").isJsonNull()) && !jsonObj.get("card.last4Digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card.last4Digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card.last4Digits").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutSuccessfulWebhook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutSuccessfulWebhook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutSuccessfulWebhook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutSuccessfulWebhook.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutSuccessfulWebhook>() {
           @Override
           public void write(JsonWriter out, CheckoutSuccessfulWebhook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutSuccessfulWebhook read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckoutSuccessfulWebhook instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutSuccessfulWebhook given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutSuccessfulWebhook
  * @throws IOException if the JSON string is invalid with respect to CheckoutSuccessfulWebhook
  */
  public static CheckoutSuccessfulWebhook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutSuccessfulWebhook.class);
  }

 /**
  * Convert an instance of CheckoutSuccessfulWebhook to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

